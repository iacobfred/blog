/* Do not edit this file. It was generated programmatically. */

import { MantraCreationArgs, MantraUpdateArgs } from "@/generated/args/mantra.args";
import { MantraFragment } from "@/generated/fragments/mantra.fragment";
import {
  CREATE_MANTRA,
  updateCacheAfterCreatingMantra,
  UPDATE_MANTRA,
} from "@/generated/mutations/mantra.mutations";
import {
  initializeMantraData,
  MantraData,
  mantraDataReducer,
} from "@/generated/reducers/mantra.reducer";
import { Payload, useHandleMutation } from "@/utils/data";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";
// import { useUser } from "@/components/contexts/UserContext";

type MantraCreationMutationHookOptions = MutationHookOptions<
  { createMantra: MantraFragment },
  MantraCreationArgs
>;

export const useCreateMantra = (options?: MantraCreationMutationHookOptions) => {
  return useHandleMutation<{ createMantra: MantraFragment }, MantraCreationArgs>(CREATE_MANTRA, {
    ...updateCacheAfterCreatingMantra,
    ...(options ?? {}),
  });
};

type MantraUpdateMutationHookOptions = MutationHookOptions<
  { updateMantra: MantraFragment },
  MantraUpdateArgs
>;

export const useUpdateMantra = (options?: MantraUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateMantra: MantraFragment }, MantraUpdateArgs>(
    UPDATE_MANTRA,
    options
  );
};

export const useMantraDataReducer = (
  data: MantraData
): [MantraData, Dispatch<Payload<MantraData>>] => {
  const initialData = initializeMantraData(data);
  const [mantraData, dispatchMantraData] = useReducer(
    mantraDataReducer,
    initialData,
    initializeMantraData
  );
  useEffect(() => {
    if (data.userId && !mantraData?.userId) {
      console.log("Dispatching mantra data!");
      dispatchMantraData({ field: "init", value: data });
    }
  }, [data, mantraData]);
  return [mantraData, dispatchMantraData];
};
