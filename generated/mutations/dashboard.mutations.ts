/* Do not edit this file. It was generated programmatically. */

import { DashboardCreationArgs } from "@/generated/args/dashboard.args";
import { dashboardFragment, DashboardFragment } from "@/generated/fragments/dashboard.fragment";
import { DashboardCreationInput, DashboardUpdateInput } from "@/generated/inputs/dashboard.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_DASHBOARD = gql`
  mutation CreateDashboard($data: DashboardCreationInput!) {
    createDashboard(data: $data) {
      ...DashboardFragment
    }
  }
  ${dashboardFragment}
`;

export const getOptimisticResponseForDashboardCreation = (
  data: DashboardCreationInput
): { createDashboard: DashboardFragment } => {
  const now = new Date();
  return {
    createDashboard: {
      __typename: "Dashboard",
      id: "tmp-id",
      description: null,
      isDefault: null,
      public: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingDashboard: MutationHookOptions<
  { createDashboard: DashboardFragment },
  DashboardCreationArgs
> = {
  update(cache, { data }) {
    const { createDashboard } = data || {};
    if (createDashboard) {
      const newDashboardRef = cache.writeFragment({
        data: createDashboard,
        fragment: gql`
          fragment NewDashboard on Dashboard {
            ...DashboardFragment
          }
          ${dashboardFragment}
        `,
        fragmentName: "NewDashboard",
      });
      cache.modify({
        id: `User:${createDashboard.userId}`,
        fields: {
          dashboards(existingDashboardRefs = []) {
            return [...existingDashboardRefs, newDashboardRef];
          },
        },
      });
      cache.modify({
        fields: {
          dashboards(existingDashboards = []) {
            return [...existingDashboards, newDashboardRef];
          },
        },
      });
    }
  },
};

export const UPDATE_DASHBOARD = gql`
  mutation UpdateDashboard($where: DashboardWhereUniqueInput!, $data: DashboardUpdateInput!) {
    updateDashboard(where: $where, data: $data) {
      ...DashboardFragment
    }
  }
  ${dashboardFragment}
`;

export const getOptimisticResponseForDashboardUpdate = (
  fragment: DashboardFragment,
  data: DashboardUpdateInput
) => {
  const now = new Date();
  return {
    updateDashboard: {
      __typename: "Dashboard",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_DASHBOARD = gql`
  mutation UpdateDashboard($where: DashboardWhereUniqueInput!, $data: DashboardCreationInput!) {
    upsertDashboard(where: $where, data: $data) {
      ...DashboardFragment
    }
  }
  ${dashboardFragment}
`;

export const UPDATE_DASHBOARDS = gql`
  mutation UpdateDashboards($where: DashboardWhereInput!, $data: DashboardUpdateInput!) {
    updateDashboards(where: $where, data: $data) {
      ...DashboardFragment
    }
  }
  ${dashboardFragment}
`;

export const UPDATE_DASHBOARDS_DISTINCTLY = gql`
  mutation UpdateDashboardsDistinctly($data: [DashboardUpdateInput!]!) {
    updateDashboardsDistinctly(data: $data) {
      ...DashboardFragment
    }
  }
  ${dashboardFragment}
`;
