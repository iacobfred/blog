/* Do not edit this file. It was generated programmatically. */

import {
  ArgsForUpdatingManyNotes,
  DeleteManyNoteArgs,
  DeleteNoteArgs,
  FindManyNoteArgs,
  FindUniqueNoteArgs,
  NoteCreationArgs,
  NotesCreationArgs,
  NoteUpdateArgs,
  NoteUpsertionArgs,
} from "@/generated/args/note.args";
import NoteModel, { Note } from "@/generated/models/note.model";
import UserModel from "@/generated/models/user.model";
import { GqlContext } from "@/graphql/context";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Note)
export class NoteResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() note: Note) {
    return note._id;
  }

  @TypeGraphQL.Query(() => Note, { nullable: true })
  async note(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueNoteArgs
  ): Promise<Note | null> {
    const filter = convertFilterForMongo(args.where);
    return NoteModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [Note], { nullable: false })
  async notes(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyNoteArgs
  ): Promise<Note[]> {
    const filter = convertFilterForMongo(args.where);
    return NoteModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Note)
  async createNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NoteCreationArgs
  ) {
    const note = await NoteModel.create(args.data);
    if (note) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate({ _id: note.userId }, { $push: { notes: { ...note } } });
    }
    return note;
  }

  @TypeGraphQL.Mutation(() => [Note], { nullable: false })
  async createManyNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotesCreationArgs
  ): Promise<Note[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Note)
  async updateNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NoteUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const note = await NoteModel.findOneAndUpdate(filter, args.data, { returnDocument: "after" });
    // NOTE: This update fails if it's not awaited.
    note &&
      (await UserModel.findOneAndUpdate(
        { _id: note.userId, "notes._id": note._id },
        {
          $set: { "notes.$": { ...note } },
        }
      ));
    return note;
  }

  @TypeGraphQL.Mutation(() => Note)
  async upsertNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NoteUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const note = await NoteModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return note;
  }

  @TypeGraphQL.Mutation(() => [Note], { nullable: false })
  async updateNotes(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotes
  ): Promise<Note[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Note], { nullable: false })
  async updateNotesDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotes
  ): Promise<Note[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Note, { nullable: true })
  async deleteNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteNoteArgs
  ): Promise<Note | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Note], { nullable: false })
  async deleteManyNote(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyNoteArgs
  ): Promise<Note[]> {
    throw new Error("Not implemented");
  }
}
