/* Do not edit this file. It was generated programmatically. */

import {
  ArgsForUpdatingManyCalendarEvents,
  CalendarEventCreationArgs,
  CalendarEventsCreationArgs,
  CalendarEventUpdateArgs,
  CalendarEventUpsertionArgs,
  DeleteCalendarEventArgs,
  DeleteManyCalendarEventArgs,
  FindManyCalendarEventArgs,
  FindUniqueCalendarEventArgs,
} from "@/generated/args/calendarEvent.args";
import CalendarEventModel, { CalendarEvent } from "@/generated/models/calendarEvent.model";
import UserModel from "@/generated/models/user.model";
import { GqlContext } from "@/graphql/context";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => CalendarEvent)
export class CalendarEventResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() calendarEvent: CalendarEvent) {
    return calendarEvent._id;
  }

  @TypeGraphQL.Query(() => CalendarEvent, { nullable: true })
  async calendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueCalendarEventArgs
  ): Promise<CalendarEvent | null> {
    const filter = convertFilterForMongo(args.where);
    return CalendarEventModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [CalendarEvent], { nullable: false })
  async calendarEvents(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyCalendarEventArgs
  ): Promise<CalendarEvent[]> {
    const filter = convertFilterForMongo(args.where);
    return CalendarEventModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => CalendarEvent)
  async createCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarEventCreationArgs
  ) {
    const calendarEvent = await CalendarEventModel.create(args.data);
    if (calendarEvent) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: calendarEvent.userId },
        { $push: { calendarEvents: { ...calendarEvent } } }
      );
    }
    return calendarEvent;
  }

  @TypeGraphQL.Mutation(() => [CalendarEvent], { nullable: false })
  async createManyCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarEventsCreationArgs
  ): Promise<CalendarEvent[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => CalendarEvent)
  async updateCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarEventUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const calendarEvent = await CalendarEventModel.findOneAndUpdate(filter, args.data, {
      returnDocument: "after",
    });
    // NOTE: This update fails if it's not awaited.
    calendarEvent &&
      (await UserModel.findOneAndUpdate(
        { _id: calendarEvent.userId, "calendarEvents._id": calendarEvent._id },
        {
          $set: { "calendarEvents.$": { ...calendarEvent } },
        }
      ));
    return calendarEvent;
  }

  @TypeGraphQL.Mutation(() => CalendarEvent)
  async upsertCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarEventUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const calendarEvent = await CalendarEventModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return calendarEvent;
  }

  @TypeGraphQL.Mutation(() => [CalendarEvent], { nullable: false })
  async updateCalendarEvents(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyCalendarEvents
  ): Promise<CalendarEvent[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [CalendarEvent], { nullable: false })
  async updateCalendarEventsDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyCalendarEvents
  ): Promise<CalendarEvent[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => CalendarEvent, { nullable: true })
  async deleteCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteCalendarEventArgs
  ): Promise<CalendarEvent | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [CalendarEvent], { nullable: false })
  async deleteManyCalendarEvent(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyCalendarEventArgs
  ): Promise<CalendarEvent[]> {
    throw new Error("Not implemented");
  }
}
