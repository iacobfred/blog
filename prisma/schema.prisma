// Prisma schema file: https://pris.ly/d/prisma-schema

// TODO: Split into multiple files?
// https://github.com/prisma/prisma/issues/2377#issuecomment-974662122

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

model Redirect {
  id       Int    @id @default(autoincrement())
  old_path String
  new_path String
}

model Account {
  id                Int        @id @default(autoincrement())
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  provider          String
  providerAccountId String
  scopes            String[]
  accessToken       String?
  refreshToken      String?
  accessTokenExpiry DateTime?
  syncToken         String?
  createdAt         DateTime   @default(now())
  calendars         Calendar[]

  CalendarEvent CalendarEvent[]
  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  Int                      @id @default(autoincrement())
  uid                 String                   @unique @default(cuid())
  name                String?
  email               String                   @unique
  emailVerified       DateTime?
  image               String?
  isAdmin             Boolean                  @default(false)
  settings            Json                     @default("{}")
  lastLogin           DateTime?
  accounts            Account[]
  calendars           Calendar[]               @relation("calendars")
  identities          Identification[]
  userValues          UserValue[]
  userBeliefs         UserBelief[]
  habits              Habit[]
  tasks               Task[]
  dashboards          Dashboard[]
  notebooks           Notebook[]
  notebookPermissions NotebookUserPermission[]
  lists               List[]
  readings            Reading[]
  bookshelves         Bookshelf[]
  bookReviews         BookReview[]
}

model Dashboard {
  id        Int     @id @default(autoincrement())
  name      String
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  layouts   Json    @default("[]")
  isDefault Boolean @default(false)
  isPublic  Boolean @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([name, userId])
}

enum CalendarProvider {
  google
  apple
}

model Calendar {
  id              Int               @id @default(autoincrement())
  uid             String            @unique(map: "Calendar_uid_unique_constraint") @default(cuid())
  user            User              @relation("calendars", fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  name            String?
  color           String?
  provider        CalendarProvider?
  sourceId        String?
  syncToken       String?
  sourceAccount   Account?          @relation(fields: [accountSourceId], references: [id], onDelete: Cascade)
  accountSourceId Int?
  primary         Boolean?          @default(false)
  public          Boolean?          @default(false)
  enabled         Boolean?          @default(true)

  events CalendarEvent[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([id, sourceId])
  @@unique([sourceId, accountSourceId])
}

model CalendarEvent {
  id               Int             @id @default(autoincrement())
  uid              String          @unique(map: "CalendarEvent_uid_unique_constraint") @default(cuid())
  sourceId         String?
  sourceAccount    Account?        @relation(fields: [accountSourceId], references: [id], onDelete: Cascade)
  accountSourceId  Int?
  calendar         Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId       Int
  calendarSourceId String?
  schedule         ActionSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId       Int?
  // TODO: remove habit and habitId
  habit            Habit?          @relation(fields: [habitId], references: [id])
  habitId          Int?
  task             Task?           @relation(fields: [taskId], references: [id])
  taskId           Int?
  title            String
  start            DateTime
  end              DateTime?
  allDay           Boolean         @default(false)
  notes            String?
  canceled        Boolean?        @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([id, sourceId])
  @@unique([sourceId, calendarSourceId])
  @@map(name: "calendarEvents")
}

model ScheduleTemplate {
  id                      Int                      @id @default(autoincrement())
  frequency               FREQUENCY                @default(DAY)
  multiplier              Int                      @default(1)
  chron                   String?
  actionScheduleTemplates ActionScheduleTemplate[]
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  categorizations Categorization[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model Categorization {
  id         Int      @id @default(autoincrement())
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  actId      Int
  act        Act      @relation(fields: [actId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

// e.g., running
model Act {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  description String?
  isPublic    Boolean @default(false)

  parent   Act? @relation("variants", fields: [parentId], references: [id])
  parentId Int?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  variants           Act[]                    @relation("variants")
  habits             Habit[]
  metricApplications MetricApplication[]
  identityRelations  IdentityActRelation[]
  scheduleTemplates  ActionScheduleTemplate[]
  categorizations    Categorization[]
}

// e.g., running:miles
model MetricApplication {
  id       Int    @unique @default(autoincrement())
  actId    Int
  act      Act    @relation(fields: [actId], references: [id], onDelete: Cascade)
  metricId Int
  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@id([actId, metricId])
}

model MetricUsage {
  id         Int            @unique @default(autoincrement())
  metricId   Int
  metric     Metric         @relation(fields: [metricId], references: [id], onDelete: Cascade)
  habitId    Int
  habit      Habit          @relation(fields: [habitId], references: [id], onDelete: Cascade)
  records    MetricRecord[]
  archivedAt DateTime?

  @@id([habitId, metricId])
}

// e.g., miles
model Metric {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  applications MetricApplication[]
  usages       MetricUsage[]
}

model Habit {
  id                       Int              @id @default(autoincrement())
  actId                    Int
  act                      Act              @relation(fields: [actId], references: [id], onDelete: Cascade)
  userId                   Int
  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                     String
  isPublic                 Boolean          @default(false)
  schedules                ActionSchedule[]
  tasks                    Task[]
  calendarEvents           CalendarEvent[]
  // themes                   ActionTheme[]
  metrics                  MetricUsage[]
  goals                    Goal[]
  routines                 RoutineHabit[]
  defaultDurationInMinutes Int?
  actions                  Action[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model RoutineHabit {
  id                Int     @unique @default(autoincrement())
  routine           Routine @relation(fields: [routineId], references: [id])
  routineId         Int
  habit             Habit   @relation(fields: [habitId], references: [id])
  habitId           Int
  position          Int
  durationInMinutes Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@id([routineId, position])
}

model Routine {
  id                Int            @id @default(autoincrement())
  userId            Int
  name              String
  habits            RoutineHabit[]
  durationInMinutes Int?
  notes             String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model MetricRecord {
  id            Int         @id @default(autoincrement())
  metricUsageId Int
  metricUsage   MetricUsage @relation(fields: [metricUsageId], references: [id])
  actionId      Int
  action        Action      @relation(fields: [actionId], references: [id])
  value         Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

// One-off tasks
model Task {
  id               Int             @id @default(autoincrement())
  title            String
  description      String?
  plannedStartDate DateTime?       @default(now())
  dueDate          DateTime?
  userId           Int
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId         Int?
  parent           Task?           @relation("children", fields: [parentId], references: [id])
  habitId          Int?
  habit            Habit?          @relation(fields: [habitId], references: [id])
  subtasks         Task[]          @relation("children")
  rank             Int             @default(dbgenerated("floor(random() * power(10, 9))"))
  completedAt      DateTime?
  calendarEvents   CalendarEvent[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([userId, parentId, rank])
}

model Action {
  id            Int            @id @default(autoincrement())
  habit         Habit?         @relation(fields: [habitId], references: [id])
  habitId       Int?
  start         DateTime
  end           DateTime
  notes         String?
  metricRecords MetricRecord[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model ActionSchedule {
  id             Int                     @id @default(autoincrement())
  habit          Habit                   @relation(fields: [habitId], references: [id])
  habitId        Int
  frequency      FREQUENCY               @default(DAY)
  multiplier     Int                     @default(1)
  quantity       Int                     @default(1)
  calendarEvents CalendarEvent[]
  active         Boolean                 @default(false)
  template       ActionScheduleTemplate? @relation(fields: [templateId], references: [id])
  templateId     Int?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

// // theme or focus
// model ActionTheme {
//   id       Int       @id @default(autoincrement())
//   actionId Int?
//   action   Action?   @relation(fields: [actionId], references: [id])
//   key      String
//   body     String
//   start    DateTime
//   end      DateTime?
//   habit    Habit    @relation(fields: [habitId], references: [id])
//   habitId  Int
// }

model ActionScheduleTemplate {
  id                 Int              @id @default(autoincrement())
  act                Act              @relation(fields: [actId], references: [id])
  actId              Int
  scheduleTemplate   ScheduleTemplate @relation(fields: [scheduleTemplateId], references: [id])
  scheduleTemplateId Int
  frequency          FREQUENCY        @default(DAY)
  multiplier         Int              @default(1)
  quantity           Int              @default(1)
  // unit                 FREQUENCY                     @default(DAY)
  actionSchedules    ActionSchedule[]

  @@unique([actId, frequency, multiplier])
}

enum TYPE {
  CHRON
  INTERVAL
}

enum FREQUENCY {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

model Identification {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  deleted    DateTime?

  @@unique([userId, identityId])
  @@map(name: "identifications")
}

model Identity {
  id              Int                   @id @default(autoincrement())
  name            String
  slug            String                @unique
  description     String?
  identities      Identification[]
  actionRelations IdentityActRelation[]

  @@map(name: "identities")
}

model Goal {
  id         Int    @id @default(autoincrement())
  habit      Habit  @relation(fields: [habitId], references: [id])
  habitId    Int
  goalId     Int?
  goal       Goal?  @relation("GoalMilestones", fields: [goalId], references: [id])
  milestones Goal[] @relation("GoalMilestones")
  quantity   Int
}

model IdentityActRelation {
  id         Int       @id @default(autoincrement())
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  action     Act       @relation(fields: [actionId], references: [id])
  actionId   Int
  deleted    DateTime?

  @@unique([identityId, actionId])
}

model Belief {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  description String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  userBelief UserBelief[]
}

model UserBelief {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  belief   Belief @relation(fields: [beliefId], references: [id])
  beliefId Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([userId, beliefId])
}

model Value {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  description String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  userValues UserValue[]
}

model UserValue {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  value   Value @relation(fields: [valueId], references: [id])
  valueId Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([userId, valueId])
}

enum LIST_FIELD_TYPE {
  STRING
  INT
  FLOAT
  DATE
  DATETIME
  BOOLEAN
}

model NotebookUserPermission {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  notebook   Notebook  @relation(fields: [notebookId], references: [id])
  notebookId Int
  deleted    DateTime?

  @@unique([userId, notebookId])
}

model Notebook {
  id              Int                      @id @default(autoincrement())
  owner           User                     @relation(fields: [ownerId], references: [id])
  ownerId         Int
  title           String
  isPublic        Boolean                  @default(false)
  description     String?
  notes           Note[]
  userPermissions NotebookUserPermission[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([ownerId, title])
}

model Note {
  id         Int      @id @default(autoincrement())
  notebook   Notebook @relation(fields: [notebookId], references: [id])
  notebookId Int
  title      String?
  body       String?
  isPublic   Boolean  @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model List {
  id          Int     @id @default(autoincrement())
  owner       User    @relation(fields: [ownerId], references: [id])
  ownerId     Int
  name        String
  slug        String  @unique
  description String?
  fields      Json    @default("[]")

  items Item[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model Item {
  id     Int  @id @default(autoincrement())
  list   List @relation(fields: [listId], references: [id])
  listId Int
  data   Json @default("{}")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model Author {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  authorships Authorship[]
}

model Authorship {
  id       Int    @id @default(autoincrement())
  author   Author @relation(fields: [authorId], references: [id])
  authorId Int
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  position Int    @default(0)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([authorId, bookId])
}

model Book {
  id                      Int      @id @default(autoincrement())
  // Goodreads ID, etc.
  ids                     Json
  isbn                    String?
  isbn13                  String?
  title                   String
  slug                    String   @unique
  description             String?
  authorNames             String[]
  authorNamesLf           String[]
  publicationYear         Int?
  originalPublicationYear Int?

  extra Json

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  authorships Authorship[]
  readings    Reading[]
  shelvings   Shelving[]
  BookReview  BookReview[]
}

model Reading {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  book         Book        @relation(fields: [bookId], references: [id])
  bookId       Int
  dateStarted  DateTime?
  dateFinished DateTime?
  review       BookReview?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

model Bookshelf {
  id          Int        @id @default(autoincrement())
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     Int
  name        String
  slug        String     @unique
  isPublic    Boolean    @default(false)
  description String?
  shelvings   Shelving[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@map(name: "bookshelves")
}

model Shelving {
  id        Int       @id @default(autoincrement())
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    Int
  shelf     Bookshelf @relation(fields: [shelfId], references: [id])
  shelfId   Int
  position  Int       @default(0)
  rationale String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?

  @@unique([shelfId, position])
}

model BookReview {
  id        Int      @id @default(autoincrement())
  review    String
  rating    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reading   Reading? @relation(fields: [readingId], references: [id])
  readingId Int?     @unique

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}
