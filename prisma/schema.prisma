// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  uid               String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  emailVerified      DateTime?
  image              String?
  isAdmin            Boolean            @default(false)
  accounts           Account[]
  identitySelections UserIdentity[]
  valueSelections    ValueSelection[]
  beliefSelections   BeliefSelection[]
  userActions        UserAction[]
  actionCompletions  ActionCompletion[]
  calendars          Calendar[]
}

enum Color {
  BLUE
}

model Calendar {
  id       Int             @id @default(autoincrement())
  uid      String          @unique(map: "Calendar_uid_unique_constraint") @default(cuid())
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  name     String?
  color    Color?
  isPublic Boolean         @default(false)
  events   CalendarEvent[]
}

model CalendarEvent {
  id           Int                 @id @default(autoincrement())
  uid          String              @unique(map: "CalendarEvent_uid_unique_constraint") @default(cuid())
  calendar     Calendar            @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId   Int
  schedule     UserActionSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId   Int?
  userAction   UserAction?         @relation(fields: [userActionId], references: [id])
  userActionId Int?
  title        String
  start        DateTime
  end          DateTime?
  allDay       Boolean             @default(false)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime?

  @@map(name: "calendarEvents")
}

model ScheduleTemplate {
  id                      Int                      @id @default(autoincrement())
  frequency               FREQUENCY                @default(DAY)
  multiplier              Int                      @default(1)
  chron                   String?
  actionScheduleTemplates ActionScheduleTemplate[]
}

model Action {
  id                Int                      @id @default(autoincrement())
  name              String
  slug              String                   @unique
  description       String?
  identityRelations IdentityActionRelation[]
  scheduleTemplates ActionScheduleTemplate[]
  completions       ActionCompletion[]
  userActions       UserAction[]
}

model UserAction {
  id             Int                  @id @default(autoincrement())
  user           User                 @relation(fields: [userId], references: [id])
  userId         String
  action         Action               @relation(fields: [actionId], references: [id])
  actionId       Int
  schedules      UserActionSchedule[]
  calendarEvents CalendarEvent[]
  goals          Goal[]
  adoptedAt      DateTime             @default(now())
  abandonedAt    DateTime?

  @@unique([userId, actionId])
}

model ActionScheduleTemplate {
  id                  Int                  @id @default(autoincrement())
  action              Action               @relation(fields: [actionId], references: [id])
  actionId            Int
  scheduleTemplate    ScheduleTemplate     @relation(fields: [scheduleTemplateId], references: [id])
  scheduleTemplateId  Int
  frequency           FREQUENCY            @default(DAY)
  multiplier          Int                  @default(1)
  quantity            Int                  @default(1)
  chron               String?
  // unit                 FREQUENCY                     @default(DAY)
  userActionSchedules UserActionSchedule[]

  @@unique([actionId, frequency, multiplier])
}

model UserActionSchedule {
  id                       Int                     @id @default(autoincrement())
  userAction               UserAction?             @relation(fields: [userActionId], references: [id])
  userActionId             Int
  frequency                FREQUENCY               @default(DAY)
  multiplier               Int                     @default(1)
  quantity                 Int                     @default(1)
  actionScheduleTemplate   ActionScheduleTemplate? @relation(fields: [actionScheduleTemplateId], references: [id])
  actionScheduleTemplateId Int?
  calendarEvents           CalendarEvent[]
  adoptedAt                DateTime                @default(now())
  abandonedAt              DateTime?
  active                   Boolean                 @default(false)
}

model ActionCompletion {
  id       Int      @id @default(autoincrement())
  action   Action   @relation(fields: [actionId], references: [id])
  actionId Int
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  date     DateTime @default(now())
}

enum TYPE {
  CHRON
  INTERVAL
}

enum FREQUENCY {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

model UserIdentity {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  deleted    DateTime?

  @@unique([userId, identityId])
}

model Identity {
  id                 Int                      @id @default(autoincrement())
  name               String
  slug               String                   @unique
  description        String?
  identitySelections UserIdentity[]
  actionRelations    IdentityActionRelation[]

  @@map(name: "identities")
}

model Goal {
  id           Int        @id @default(autoincrement())
  userAction   UserAction @relation(fields: [userActionId], references: [id])
  userActionId Int
  goalId       Int?
  goal         Goal?      @relation("GoalMilestones", fields: [goalId], references: [id])
  milestones   Goal[]     @relation("GoalMilestones")
  quantity     Int
}

model IdentityActionRelation {
  id         Int       @id @default(autoincrement())
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  action     Action    @relation(fields: [actionId], references: [id])
  actionId   Int
  deleted    DateTime?

  @@unique([identityId, actionId])
}

model Belief {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  beliefSelection BeliefSelection[]

  @@map(name: "beliefs")
}

model BeliefSelection {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  belief    Belief    @relation(fields: [beliefId], references: [id])
  beliefId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@unique([userId, beliefId])
}

model Value {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  valueSelections ValueSelection[]

  @@map(name: "values")
}

model ValueSelection {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  value     Value     @relation(fields: [valueId], references: [id])
  valueId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@unique([userId, valueId])
}

// model Post {
//   id        Int     @default(autoincrement()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
// }
