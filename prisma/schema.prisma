// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  uid               String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  schedules          Schedule[]
  identitySelections IdentitySelection[]
  valueSelections    ValueSelection[]
  beliefSelections   BeliefSelection[]
  actionCompletions  ActionCompletion[]
  calendars          Calendar[]
}

enum Color {
  BLUE
}

model Calendar {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  name     String
  color    Color?
  isPublic Boolean @default(false)
  events   Event[]
}

model Event {
  id         String   @id @default(cuid())
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId String
  name       String
  start      DateTime
  end        DateTime
}

model IdentitySelection {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  deleted    DateTime?

  @@unique([userId, identityId])
}

model Identity {
  id                 Int                      @id @default(autoincrement())
  name               String
  slug               String                   @unique
  description        String?
  identitySelections IdentitySelection[]
  actionRelations    IdentityActionRelation[]

  @@map(name: "identities")
}

model IdentityActionRelation {
  id         Int       @id @default(autoincrement())
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  action     Action    @relation(fields: [actionId], references: [id])
  actionId   Int
  deleted    DateTime?

  @@unique([identityId, actionId])
}

model Action {
  id                Int                      @id @default(autoincrement())
  name              String
  slug              String                   @unique
  description       String?
  identityRelations IdentityActionRelation[]
  schedules         Schedule[]
  completions       ActionCompletion[]
}

model ActionCompletion {
  id       Int      @id @default(autoincrement())
  action   Action   @relation(fields: [actionId], references: [id])
  actionId Int
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  date     DateTime @default(now())
}

enum TYPE {
  CHRON
  INTERVAL
}

enum UNIT {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

model Schedule {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  action      Action    @relation(fields: [actionId], references: [id])
  actionId    Int
  frequency   UNIT      @default(DAY)
  multiplier  Int       @default(1)
  chron       String?
  adoptedAt   DateTime  @default(now())
  abandonedAt DateTime?

  @@unique([userId, actionId])
}

model Belief {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  beliefSelection BeliefSelection[]

  @@map(name: "beliefs")
}

model BeliefSelection {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  belief    Belief    @relation(fields: [beliefId], references: [id])
  beliefId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@unique([userId, beliefId])
}

model Value {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  valueSelections ValueSelection[]

  @@map(name: "values")
}

model ValueSelection {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  value     Value     @relation(fields: [valueId], references: [id])
  valueId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@unique([userId, valueId])
}

// model Post {
//   id        Int     @default(autoincrement()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
// }
