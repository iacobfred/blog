// Prisma schema file: https://pris.ly/d/prisma-schema

// TODO: Split into multiple files?
// https://github.com/prisma/prisma/issues/2377#issuecomment-974662122

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

model Account {
  id                Int    @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  uid               String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int              @id @default(autoincrement())
  uid           String           @unique @default(cuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean          @default(false)
  accounts      Account[]
  calendars     Calendar[]       @relation("calendars")
  identities    Identification[]
  userValues    UserValue[]
  userBeliefs   UserBelief[]
  habits        Habit[]
  tasks         Task[]
  dashboards    Dashboard[]
  settings      Json             @default("{}")
}

model Dashboard {
  id         Int       @id @default(autoincrement())
  name       String
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  layouts    Json      @default("[]")
  isDefault  Boolean   @default(false)
  isPublic   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

enum Color {
  BLUE
}

model Calendar {
  id       Int             @id @default(autoincrement())
  uid      String          @unique(map: "Calendar_uid_unique_constraint") @default(cuid())
  user     User            @relation("calendars", fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  name     String?
  color    Color?
  isPublic Boolean         @default(false)
  events   CalendarEvent[]
}

model CalendarEvent {
  id         Int             @id @default(autoincrement())
  uid        String          @unique(map: "CalendarEvent_uid_unique_constraint") @default(cuid())
  calendar   Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId Int
  schedule   ActionSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId Int?
  habit      Habit?          @relation(fields: [habitId], references: [id])
  habitId    Int?
  title      String
  start      DateTime
  end        DateTime?
  allDay     Boolean         @default(false)
  notes      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@map(name: "calendarEvents")
}

model ScheduleTemplate {
  id                      Int                      @id @default(autoincrement())
  frequency               FREQUENCY                @default(DAY)
  multiplier              Int                      @default(1)
  chron                   String?
  actionScheduleTemplates ActionScheduleTemplate[]
}

model ActClass {
  id   Int    @id @default(autoincrement())
  name String @unique
  acts Act[]
}

// e.g., running
model Act {
  id                 Int                      @id @default(autoincrement())
  name               String
  slug               String                   @unique
  class              ActClass?                @relation(fields: [classId], references: [id])
  classId            Int?
  description        String?
  isPublic           Boolean                  @default(false)
  identityRelations  IdentityActRelation[]
  scheduleTemplates  ActionScheduleTemplate[]
  habits             Habit[]
  metricApplications MetricApplication[]
  parent             Act?                     @relation("variants", fields: [parentId], references: [id])
  parentId           Int?
  variants           Act[]                    @relation("variants")
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime?
  archivedAt         DateTime?
}

// e.g., running:miles
model MetricApplication {
  id         Int       @unique @default(autoincrement())
  actId      Int
  act        Act       @relation(fields: [actId], references: [id], onDelete: Cascade)
  metricId   Int
  metric     Metric    @relation(fields: [metricId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@id([actId, metricId])
}

model MetricUsage {
  id         Int            @unique @default(autoincrement())
  metricId   Int
  metric     Metric         @relation(fields: [metricId], references: [id], onDelete: Cascade)
  habitId    Int
  habit      Habit          @relation(fields: [habitId], references: [id], onDelete: Cascade)
  records    MetricRecord[]
  archivedAt DateTime?

  @@id([habitId, metricId])
}

// e.g., miles
model Metric {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  applications MetricApplication[]
  usages       MetricUsage[]
}

model Habit {
  id                       Int              @id @default(autoincrement())
  actId                    Int
  act                      Act              @relation(fields: [actId], references: [id], onDelete: Cascade)
  userId                   Int
  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                     String
  isPublic                 Boolean          @default(false)
  schedules                ActionSchedule[]
  tasks                    Task[]
  calendarEvents           CalendarEvent[]
  // themes                   ActionTheme[]
  metrics                  MetricUsage[]
  goals                    Goal[]
  routines                 RoutineHabit[]
  defaultDurationInMinutes Int?
  actions                  Action[]
  createdAt                DateTime         @default(now())
  updatedAt                DateTime?
  archivedAt               DateTime?
}

model RoutineHabit {
  id                Int       @unique @default(autoincrement())
  routine           Routine   @relation(fields: [routineId], references: [id])
  routineId         Int
  habit             Habit     @relation(fields: [habitId], references: [id])
  habitId           Int
  position          Int
  durationInMinutes Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?

  @@id([routineId, position])
}

model Routine {
  id                Int            @id @default(autoincrement())
  userId            Int
  name              String
  habits            RoutineHabit[]
  durationInMinutes Int?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  archivedAt        DateTime?
}

model MetricRecord {
  id            Int         @id @default(autoincrement())
  metricUsageId Int
  metricUsage   MetricUsage @relation(fields: [metricUsageId], references: [id])
  actionId      Int
  action        Action      @relation(fields: [actionId], references: [id])
  value         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  archivedAt    DateTime?
}

// One-off tasks
model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    Int?
  parent      Task?     @relation("children", fields: [parentId], references: [id])
  habitId     Int?
  habit       Habit?    @relation(fields: [habitId], references: [id])
  subtasks    Task[]    @relation("children")
  position    Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  archivedAt  DateTime?
}

model Action {
  id            Int            @id @default(autoincrement())
  habit         Habit          @relation(fields: [habitId], references: [id])
  habitId       Int
  start         DateTime
  end           DateTime
  notes         String?
  metricRecords MetricRecord[]
  archivedAt    DateTime?
}

model ActionSchedule {
  id             Int                     @id @default(autoincrement())
  habit          Habit                   @relation(fields: [habitId], references: [id])
  habitId        Int
  frequency      FREQUENCY               @default(DAY)
  multiplier     Int                     @default(1)
  quantity       Int                     @default(1)
  calendarEvents CalendarEvent[]
  createdAt      DateTime                @default(now())
  archivedAt     DateTime?
  active         Boolean                 @default(false)
  template       ActionScheduleTemplate? @relation(fields: [templateId], references: [id])
  templateId     Int?
}

// // theme or focus
// model ActionTheme {
//   id       Int       @id @default(autoincrement())
//   actionId Int?
//   action   Action?   @relation(fields: [actionId], references: [id])
//   key      String
//   body     String
//   start    DateTime
//   end      DateTime?
//   habit    Habit    @relation(fields: [habitId], references: [id])
//   habitId  Int
// }

model ActionScheduleTemplate {
  id                 Int              @id @default(autoincrement())
  act                Act              @relation(fields: [actId], references: [id])
  actId              Int
  scheduleTemplate   ScheduleTemplate @relation(fields: [scheduleTemplateId], references: [id])
  scheduleTemplateId Int
  frequency          FREQUENCY        @default(DAY)
  multiplier         Int              @default(1)
  quantity           Int              @default(1)
  // unit                 FREQUENCY                     @default(DAY)
  actionSchedules    ActionSchedule[]

  @@unique([actId, frequency, multiplier])
}

enum TYPE {
  CHRON
  INTERVAL
}

enum FREQUENCY {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

model Identification {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  deleted    DateTime?

  @@unique([userId, identityId])
  @@map(name: "identifications")
}

model Identity {
  id              Int                   @id @default(autoincrement())
  name            String
  slug            String                @unique
  description     String?
  identities      Identification[]
  actionRelations IdentityActRelation[]

  @@map(name: "identities")
}

model Goal {
  id         Int    @id @default(autoincrement())
  habit      Habit  @relation(fields: [habitId], references: [id])
  habitId    Int
  goalId     Int?
  goal       Goal?  @relation("GoalMilestones", fields: [goalId], references: [id])
  milestones Goal[] @relation("GoalMilestones")
  quantity   Int
}

model IdentityActRelation {
  id         Int       @id @default(autoincrement())
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  action     Act       @relation(fields: [actionId], references: [id])
  actionId   Int
  deleted    DateTime?

  @@unique([identityId, actionId])
}

model Belief {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  userBelief UserBelief[]

  @@map(name: "beliefs")
}

model UserBelief {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  belief     Belief    @relation(fields: [beliefId], references: [id])
  beliefId   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@unique([userId, beliefId])
}

model Value {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  userValues UserValue[]

  @@map(name: "values")
}

model UserValue {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  value      Value     @relation(fields: [valueId], references: [id])
  valueId    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@unique([userId, valueId])
}

// model Post {
//   id        Int     @default(autoincrement()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
// }
