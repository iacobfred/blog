// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  uid               String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean        @default(false)
  accounts       Account[]
  calendars      Calendar[]     @relation("calendars")
  userIdentities UserIdentity[]
  userValues     UserValue[]
  userBeliefs    UserBelief[]
  actions        Action[]
  dashboards     Dashboard[]
  settings       Json           @default("{}")
}

model Dashboard {
  id         String    @id @default(cuid())
  name       String
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  layouts    Json      @default("[]")
  isDefault  Boolean   @default(false)
  isPublic   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  archivedAt DateTime?
}

enum Color {
  BLUE
}

model Calendar {
  id       Int             @id @default(autoincrement())
  uid      String          @unique(map: "Calendar_uid_unique_constraint") @default(cuid())
  user     User            @relation("calendars", fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  name     String?
  color    Color?
  isPublic Boolean         @default(false)
  events   CalendarEvent[]
}

model CalendarEvent {
  id         Int             @id @default(autoincrement())
  uid        String          @unique(map: "CalendarEvent_uid_unique_constraint") @default(cuid())
  calendar   Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId Int
  schedule   ActionSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId Int?
  action     Action?         @relation(fields: [actionId], references: [id])
  actionId   Int?
  title      String
  start      DateTime
  end        DateTime?
  allDay     Boolean         @default(false)
  notes      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@map(name: "calendarEvents")
}

model ScheduleTemplate {
  id                      Int                      @id @default(autoincrement())
  frequency               FREQUENCY                @default(DAY)
  multiplier              Int                      @default(1)
  chron                   String?
  actionScheduleTemplates ActionScheduleTemplate[]
}

model ActionTemplate {
  id                Int                      @id @default(autoincrement())
  name              String
  slug              String                   @unique
  description       String?
  identityRelations IdentityActionRelation[]
  scheduleTemplates ActionScheduleTemplate[]
  actions           Action[]
}

model Action {
  id                       Int                @id @default(autoincrement())
  user                     User               @relation(fields: [userId], references: [id])
  userId                   String
  template                 ActionTemplate?    @relation(fields: [templateId], references: [id])
  templateId               Int?
  name                     String
  notes                    String?
  schedules                ActionSchedule[]
  themes                   ActionTheme[]
  calendarEvents           CalendarEvent[]
  completions              ActionCompletion[]
  goals                    Goal[]
  routines                 RoutineAction[]    @relation("routines")
  actions                  RoutineAction[]    @relation("actions")
  createdAt                DateTime           @default(now())
  archivedAt               DateTime?
  defaultDurationInMinutes Int?

  @@unique([userId, templateId])
}

model RoutineAction {
  id                Int       @unique @default(autoincrement())
  routine           Action    @relation("actions", fields: [routineId], references: [id])
  routineId         Int
  action            Action    @relation("routines", fields: [actionId], references: [id])
  actionId          Int
  position          Int
  durationInMinutes Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?

  @@id([routineId, actionId])
}

// theme or focus
model ActionTheme {
  id       Int       @id @default(autoincrement())
  actionId Int?
  action   Action?   @relation(fields: [actionId], references: [id])
  key      String
  body     String
  start    DateTime
  end      DateTime?
}

model ActionScheduleTemplate {
  id                 Int              @id @default(autoincrement())
  actionTemplate     ActionTemplate   @relation(fields: [actionTemplateId], references: [id])
  actionTemplateId   Int
  scheduleTemplate   ScheduleTemplate @relation(fields: [scheduleTemplateId], references: [id])
  scheduleTemplateId Int
  frequency          FREQUENCY        @default(DAY)
  multiplier         Int              @default(1)
  quantity           Int              @default(1)
  // unit                 FREQUENCY                     @default(DAY)
  actionSchedules    ActionSchedule[]

  @@unique([actionTemplateId, frequency, multiplier])
}

model ActionSchedule {
  id             Int                     @id @default(autoincrement())
  action         Action?                 @relation(fields: [actionId], references: [id])
  actionId       Int
  frequency      FREQUENCY               @default(DAY)
  multiplier     Int                     @default(1)
  quantity       Int                     @default(1)
  calendarEvents CalendarEvent[]
  createdAt      DateTime                @default(now())
  archivedAt     DateTime?
  active         Boolean                 @default(false)
  template       ActionScheduleTemplate? @relation(fields: [templateId], references: [id])
  templateId     Int?
}

model ActionCompletion {
  id         Int       @id @default(autoincrement())
  action     Action    @relation(fields: [actionId], references: [id])
  actionId   Int
  date       DateTime  @default(now())
  archivedAt DateTime?
}

enum TYPE {
  CHRON
  INTERVAL
}

enum FREQUENCY {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

model UserIdentity {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  identity   Identity  @relation(fields: [identityId], references: [id])
  identityId Int
  deleted    DateTime?

  @@unique([userId, identityId])
  @@map(name: "userIdentities")
}

model Identity {
  id              Int                      @id @default(autoincrement())
  name            String
  slug            String                   @unique
  description     String?
  userIdentities  UserIdentity[]
  actionRelations IdentityActionRelation[]

  @@map(name: "identities")
}

model Goal {
  id         Int    @id @default(autoincrement())
  action     Action @relation(fields: [actionId], references: [id])
  actionId   Int
  goalId     Int?
  goal       Goal?  @relation("GoalMilestones", fields: [goalId], references: [id])
  milestones Goal[] @relation("GoalMilestones")
  quantity   Int
}

model IdentityActionRelation {
  id         Int            @id @default(autoincrement())
  identity   Identity       @relation(fields: [identityId], references: [id])
  identityId Int
  action     ActionTemplate @relation(fields: [actionId], references: [id])
  actionId   Int
  deleted    DateTime?

  @@unique([identityId, actionId])
}

model Belief {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  userBelief UserBelief[]

  @@map(name: "beliefs")
}

model UserBelief {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  belief     Belief    @relation(fields: [beliefId], references: [id])
  beliefId   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@unique([userId, beliefId])
}

model Value {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  userValues UserValue[]

  @@map(name: "values")
}

model UserValue {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  value      Value     @relation(fields: [valueId], references: [id])
  valueId    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  @@unique([userId, valueId])
}

// model Post {
//   id        Int     @default(autoincrement()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
// }
