/* Do not edit this file. It was generated programmatically. */

import { Notebook } from "@web/generated/interfaces/Notebook";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Notebook/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const notebookSchema = new mongoose.Schema<Notebook>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    title: {
      type: String,
      trim: true,
      required: true,
    },
    description: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    public: {
      type: Boolean,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

notebookSchema.plugin(mongooseLeanVirtuals);

notebookSchema.pre<HydratedDocument<Notebook>>("save", async function () {
  return Promise.resolve(preSave(this));
});

notebookSchema.post<Notebook>("save", async function (document) {
  await postCreate(document);
});

notebookSchema.post<Notebook>(
  "findOneAndUpdate",
  async function (_result: Notebook | ModifyResult<Notebook>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<Notebook>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<Notebook>).value) {
      const result = _result as ModifyResult<Notebook>;
      const notebook = result.value;
      if (notebook) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(notebook);
        } else {
          await postUpdate(notebook, updatedFields);
        }
      }
    } else {
      const result = _result as Notebook;
      await postUpdate(result, updatedFields);
    }
  }
);

export { notebookSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const NotebookModel: mongoose.Model<Notebook> =
  mongoose.models.Notebook || mongoose.model<Notebook>("Notebook", notebookSchema);

export default NotebookModel;
