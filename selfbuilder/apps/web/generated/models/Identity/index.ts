/* Do not edit this file. It was generated programmatically. */

import { Identity } from "@web/generated/interfaces/Identity";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Identity/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const identitySchema = new mongoose.Schema<Identity>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    name: {
      type: String,
      trim: true,
      required: true,
    },
    description: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

identitySchema.plugin(mongooseLeanVirtuals);

identitySchema.pre<HydratedDocument<Identity>>("save", async function () {
  return Promise.resolve(preSave(this));
});

identitySchema.post<Identity>("save", async function (document) {
  await postCreate(document);
});

identitySchema.post<Identity>(
  "findOneAndUpdate",
  async function (_result: Identity | ModifyResult<Identity>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<Identity>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<Identity>).value) {
      const result = _result as ModifyResult<Identity>;
      const identity = result.value;
      if (identity) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(identity);
        } else {
          await postUpdate(identity, updatedFields);
        }
      }
    } else {
      const result = _result as Identity;
      await postUpdate(result, updatedFields);
    }
  }
);

export { identitySchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const IdentityModel: mongoose.Model<Identity> =
  mongoose.models.Identity || mongoose.model<Identity>("Identity", identitySchema);

export default IdentityModel;
