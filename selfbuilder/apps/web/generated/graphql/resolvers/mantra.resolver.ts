/* Do not edit this file. It was generated programmatically. */

import {
  FindManyMantraArgs,
  FindUniqueMantraArgs,
  MantraCreationArgs,
  MantraUpdateArgs,
  MantraUpsertionArgs,
} from "@web/generated/graphql/args/mantra.args";
import Mantra from "@web/generated/graphql/types/Mantra";
import MantraModel from "@web/generated/models/Mantra";
import {
  createMantra as _createMantra,
  findMantra as _findMantra,
  updateMantra as _updateMantra,
  upsertMantra as _upsertMantra,
} from "@web/generated/shortcuts/mantra.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Mantra)
export class MantraResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() mantra: Mantra) {
    return mantra._id;
  }

  @TypeGraphQL.Query(() => Mantra, { nullable: true })
  async mantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueMantraArgs
  ) {
    return await _findMantra(args);
  }

  @TypeGraphQL.Query(() => [Mantra], { nullable: false })
  async mantras(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyMantraArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await MantraModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Mantra)
  async createMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraCreationArgs
  ) {
    return await _createMantra(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async createManyMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantrasCreationArgs
  ): Promise<Mantra[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Mantra)
  async updateMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraUpdateArgs
  ) {
    return await _updateMantra(args);
  }

  @TypeGraphQL.Mutation(() => Mantra)
  async upsertMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraUpsertionArgs
  ) {
    return await _upsertMantra(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async updateMantras(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyMantras
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async updateMantrasDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyMantras
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Mantra, { nullable: true })
  async deleteMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteMantraArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async deleteManyMantra(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyMantraArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
