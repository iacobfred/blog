/* Do not edit this file. It was generated programmatically. */

import {
  CalendarCreationArgs,
  CalendarUpdateArgs,
  CalendarUpsertionArgs,
  FindManyCalendarArgs,
  FindUniqueCalendarArgs,
} from "@web/generated/graphql/args/calendar.args";
import Calendar from "@web/generated/graphql/types/Calendar";
import CalendarModel from "@web/generated/models/Calendar";
import {
  createCalendar as _createCalendar,
  findCalendar as _findCalendar,
  updateCalendar as _updateCalendar,
  upsertCalendar as _upsertCalendar,
} from "@web/generated/shortcuts/calendar.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Calendar)
export class CalendarResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() calendar: Calendar) {
    return calendar._id;
  }

  @TypeGraphQL.Query(() => Calendar, { nullable: true })
  async calendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueCalendarArgs
  ) {
    return await _findCalendar(args);
  }

  @TypeGraphQL.Query(() => [Calendar], { nullable: false })
  async calendars(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyCalendarArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await CalendarModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Calendar)
  async createCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarCreationArgs
  ) {
    return await _createCalendar(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Calendar], { nullable: false })
  async createManyCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarsCreationArgs
  ): Promise<Calendar[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Calendar)
  async updateCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarUpdateArgs
  ) {
    return await _updateCalendar(args);
  }

  @TypeGraphQL.Mutation(() => Calendar)
  async upsertCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CalendarUpsertionArgs
  ) {
    return await _upsertCalendar(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Calendar], { nullable: false })
  async updateCalendars(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyCalendars
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Calendar], { nullable: false })
  async updateCalendarsDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyCalendars
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Calendar, { nullable: true })
  async deleteCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteCalendarArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Calendar], { nullable: false })
  async deleteManyCalendar(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyCalendarArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
