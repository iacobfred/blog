/* Do not edit this file. It was generated programmatically. */

import { gql, MutationHookOptions } from "@apollo/client";
import { ShelfCreationArgs } from "@web/generated/graphql/args/shelf.args";
import { shelfFragment, ShelfFragment } from "@web/generated/graphql/fragments/shelf.fragment";
import { ShelfCreationInput, ShelfUpdateInput } from "@web/generated/graphql/inputs/shelf.inputs";
import { ObjectID } from "bson";

export const CREATE_SHELF = gql`
  mutation CreateShelf($data: ShelfCreationInput!) {
    createShelf(data: $data) {
      ...ShelfFragment
    }
  }
  ${shelfFragment}
`;

export const getOptimisticResponseForShelfCreation = (
  data: ShelfCreationInput
): { createShelf: ShelfFragment } => {
  const now = new Date();
  return {
    createShelf: {
      __typename: "Shelf",
      id: new ObjectID().toHexString(),
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingShelf: MutationHookOptions<
  { createShelf: ShelfFragment },
  ShelfCreationArgs
> = {
  refetchQueries: ["GetUser"],
  update(cache, { data }) {
    const { createShelf } = data || {};
    if (createShelf) {
      const newShelfRef = cache.writeFragment({
        data: createShelf,
        fragment: gql`
          fragment NewShelf on Shelf {
            ...ShelfFragment
          }
          ${shelfFragment}
        `,
        fragmentName: "NewShelf",
      });
      cache.modify({
        fields: {
          shelves(existingShelves = []) {
            return [...existingShelves, newShelfRef];
          },
        },
      });
    }
  },
};

export const UPDATE_SHELF = gql`
  mutation UpdateShelf($where: ShelfWhereUniqueInput!, $data: ShelfUpdateInput!) {
    updateShelf(where: $where, data: $data) {
      ...ShelfFragment
    }
  }
  ${shelfFragment}
`;

export const getOptimisticResponseForShelfUpdate = (
  fragment: ShelfFragment,
  data: ShelfUpdateInput
) => {
  const now = new Date();
  return {
    updateShelf: {
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_SHELF = gql`
  mutation UpdateShelf($where: ShelfWhereUniqueInput!, $data: ShelfCreationInput!) {
    upsertShelf(where: $where, data: $data) {
      ...ShelfFragment
    }
  }
  ${shelfFragment}
`;

export const UPDATE_SHELVES = gql`
  mutation UpdateShelves($where: ShelfWhereInput!, $data: ShelfUpdateInput!) {
    updateShelves(where: $where, data: $data) {
      ...ShelfFragment
    }
  }
  ${shelfFragment}
`;

export const UPDATE_SHELVES_DISTINCTLY = gql`
  mutation UpdateShelvesDistinctly($data: [ShelfUpdateInput!]!) {
    updateShelvesDistinctly(data: $data) {
      ...ShelfFragment
    }
  }
  ${shelfFragment}
`;
