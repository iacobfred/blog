/* Do not edit this file. It was generated programmatically. */
import { AccountFragment } from "@web/generated/graphql/fragments/account.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { Account } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type AccountData = Data<Account>;

export function initializeAccountData(
  data: Partial<AccountData>,
  user?: UserFragment | null | undefined
): Partial<AccountData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    provider: "",
    remoteId: "",
    scopes: [],
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function accountReducer(state: AccountData, payload: Payload<AccountData>) {
  if (payload.field === "init") return initializeAccountData(payload.value as Partial<AccountData>);
  return { ...state, [payload.field]: payload.value };
}

export function accountsReducer(state: AccountFragment[], action: ArrayAction<AccountFragment>) {
  return arrayReducer<AccountFragment>(state, action);
}
