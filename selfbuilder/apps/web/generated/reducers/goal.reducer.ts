/* Do not edit this file. It was generated programmatically. */
import { GoalFragment } from "@web/generated/graphql/fragments/goal.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { Goal } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type GoalData = Data<Goal>;

export function initializeGoalData(
  data: Partial<GoalData>,
  user?: UserFragment | null | undefined
): Partial<GoalData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    description: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function goalReducer(state: GoalData, payload: Payload<GoalData>) {
  if (payload.field === "init") return initializeGoalData(payload.value as Partial<GoalData>);
  return { ...state, [payload.field]: payload.value };
}

export function goalsReducer(state: GoalFragment[], action: ArrayAction<GoalFragment>) {
  return arrayReducer<GoalFragment>(state, action);
}
