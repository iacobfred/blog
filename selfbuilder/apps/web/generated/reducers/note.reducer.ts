/* Do not edit this file. It was generated programmatically. */
import { NoteFragment } from "@web/generated/graphql/fragments/note.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { Note } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type NoteData = Data<Note>;

export function initializeNoteData(
  data: Partial<NoteData>,
  user?: UserFragment | null | undefined
): Partial<NoteData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    title: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function noteReducer(state: NoteData, payload: Payload<NoteData>) {
  if (payload.field === "init") return initializeNoteData(payload.value as Partial<NoteData>);
  return { ...state, [payload.field]: payload.value };
}

export function notesReducer(state: NoteFragment[], action: ArrayAction<NoteFragment>) {
  return arrayReducer<NoteFragment>(state, action);
}
