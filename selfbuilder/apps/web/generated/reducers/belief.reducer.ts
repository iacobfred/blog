/* Do not edit this file. It was generated programmatically. */
import { BeliefFragment } from "@web/generated/graphql/fragments/belief.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { Belief } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type BeliefData = Data<Belief>;

export function initializeBeliefData(
  data: Partial<BeliefData>,
  user?: UserFragment | null | undefined
): Partial<BeliefData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function beliefReducer(state: BeliefData, payload: Payload<BeliefData>) {
  if (payload.field === "init") return initializeBeliefData(payload.value as Partial<BeliefData>);
  return { ...state, [payload.field]: payload.value };
}

export function beliefsReducer(state: BeliefFragment[], action: ArrayAction<BeliefFragment>) {
  return arrayReducer<BeliefFragment>(state, action);
}
