/* Do not edit this file. It was generated programmatically. */
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { ValueFragment } from "@web/generated/graphql/fragments/value.fragment";
import { Value } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type ValueData = Data<Value>;

export function initializeValueData(
  data: Partial<ValueData>,
  user?: UserFragment | null | undefined
): Partial<ValueData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function valueReducer(state: ValueData, payload: Payload<ValueData>) {
  if (payload.field === "init") return initializeValueData(payload.value as Partial<ValueData>);
  return { ...state, [payload.field]: payload.value };
}

export function valuesReducer(state: ValueFragment[], action: ArrayAction<ValueFragment>) {
  return arrayReducer<ValueFragment>(state, action);
}
