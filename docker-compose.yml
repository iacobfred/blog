services:
  nextjs:
    image: ghcr.io/iacobfred/selfbuilder:latest
    depends_on:
      - mongo
    #   - postgres
    #   - graphql
    ports:
      - 3000:3000 # Next.js application
      - 9229:9229 # Node.js debug port
    env_file:
      - ./.env
    environment:
      NEXTAUTH_URL_INTERNAL: "http://nextjs:3000"
      NEXTAUTH_URL: "https://www.orega.org"
      NODE_ENV: production
    volumes:
      - ./.env:/root/.env

  # graphql:
  #   image: nextjs:latest
  #   depends_on:
  #     - postgres
  #   ports:
  #     - 4000:4000 # GraphQL application
  #   env_file:
  #     - ./.env

  mongo:
    image: mongo:latest
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    env_file: .env
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    expose:
      - "27017"
    volumes:
      - data:/data

  postgres:
    image: postgres:14
    expose:
      - "5432"
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data

  cypress:
    # https://github.com/cypress-io/cypress-docker-images
    image: "cypress/included:8.4.1"
    # depends_on:
    #   nextjs:
    #     condition: service_healthy
    environment:
      - CYPRESS_baseUrl=http://localhost:3000/
    working_dir: /e2e
    volumes:
      - ./cypress:/e2e/cypress
      - ./cypress.json:/e2e/cypress.json

# For more information on how volumes work, please see https://docs.docker.com/storage/volumes/
volumes:
  # Note: `data` is used by both redis and mongodb
  data: null
  postgres_data: null
