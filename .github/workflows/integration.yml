# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/integration.yml
# using the script from https://github.com/mithro/actions-includes@main

name: integration
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths-ignore:
      - .gitignore
      - .github/**
      - "!.github/integration.yml"
      - .idea/**
      - .vscode/**
      - "**.md"
      - "**.rst"
      - config/hooks/**
  schedule:
    - cron: 0 9 * * *
  workflow_dispatch:
    inputs:
      jobs:
        description: Comma-separated list of names of jobs to trigger
        required: false
        default: setup-script,build,pytest,e2e,test-deploy
env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  CR_PAT: ${{ secrets.CR_PAT }}
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
  POSTGRES_HOST: postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v11
  build:
    name: Build image
    needs: changed-files
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        image: [next]
    environment: test
    steps:
      - name: Check out main branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Specify Docker Compose version
        run: |
          echo ""
          echo "Installed version: $(docker compose version)"
          version=2.6.0
          docker compose version | grep --quiet "$version" || {
            echo "Installing Docker Compose version $version ..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "Installed version: $(docker compose version)"
          }
      - name: Configure Docker Compose
        shell: bash
        run: |
          echo "Configuring Docker Compose..."
          if [[ -f docker-compose.test.yml ]]; then
            echo "Using docker-compose.test.yml for default overrides..."
            cp docker-compose.test.yml docker-compose.override.yml
          fi
          echo "Done."
      - name: Add hosts to /etc/hosts
        shell: bash
        run: |
          hosts=("postgres" "redis" "elasticsearch")
          echo "Updating hosts file..."
          for host in "${hosts[@]}"; do
            sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
          done
          echo "Done."
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build image without cache
        uses: docker/build-push-action@v2
        with:
          build-args: |
            ENVIRONMENT=prod
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./build/Dockerfile.${{ matrix.image }}
          load: false
          push: true
          no-cache: true
          secret-files: ENV_FILE=./.env
          tags: ghcr.io/selfbuilder/${{ matrix.image }}:${{ github.sha }}
    # - name: Run Snyk to check image for vulnerabilities
    #   continue-on-error: true
    #   uses: snyk/actions/docker@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     image: ghcr.io/selfbuilder/${{ matrix.image }}:${{ github.sha }}
    #     args: --file=Dockerfile.${{ matrix.image }}
  # jest:
  #   name: Run frontend unit tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: ⏰ 🛂 📕 - Checking workflow expansion is up to date
  #       uses: mithro/actions-includes@main
  #       if: runner.os == 'Linux'
  #       continue-on-error: false
  #       with:
  #         workflow: .github/workflows/integration.yml
  #     - uses: actions/checkout@v2
  #     - name: Install modules
  #       run: npm install --prefix frontend/
  #     - name: Run jest
  #       run: npm run test --prefix frontend/
  e2e:
    name: Run e2e tests
    needs: [build]
    environment: test
    env:
      ENVIRONMENT: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome]
        container: [1, 2, 3]
    steps:
      - name: Check out main branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Specify Docker Compose version
        run: |
          echo ""
          echo "Installed version: $(docker compose version)"
          version=2.6.0
          docker compose version | grep --quiet "$version" || {
            echo "Installing Docker Compose version $version ..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "Installed version: $(docker compose version)"
          }
      - name: Configure Docker Compose
        shell: bash
        run: |
          echo "Configuring Docker Compose..."
          if [[ -f docker-compose.test.yml ]]; then
            echo "Using docker-compose.test.yml for default overrides..."
            cp docker-compose.test.yml docker-compose.override.yml
          fi
          echo "Done."
      - name: Add hosts to /etc/hosts
        shell: bash
        run: |
          hosts=("postgres" "redis" "elasticsearch")
          echo "Updating hosts file..."
          for host in "${hosts[@]}"; do
            sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
          done
          echo "Done."
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Create writable volume directories
        run: |
          dir_names=( "static" "media" "redirects" )
          for dir_name in "${dir_names[@]}"; do
            dir_path="_volumes/${dir_name}"
            mkdir -p "$dir_path"; {
              sudo chown -R www-data:www-data "$dir_path" && 
              sudo chmod a+w -R "$dir_path"
            } || exit 1
          done
      - uses: actions/cache@v2
        id: data-cache
        with:
          path: _volumes/db/init
          key: data
      - name: Start up containers
        run: bash config/scripts/deploy.sh
      - name: Run Cypress
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          docker compose -f docker-compose.yml -f docker-compose.test.yml run cypress
          --browser ${{ matrix.browser }} --group "${{ matrix.browser }}"
          --parallel --ci-build-id $GITHUB_TOKEN --record --key $CYPRESS_RECORD_KEY
  test-deploy:
    name: Test deploy
    needs: [changed-files, build]
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'deploy.sh') || github.event_name == 'workflow_dispatch' && contains(github.event.inputs.jobs, 'deploy') }}
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Check out main branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Specify Docker Compose version
        run: |
          echo ""
          echo "Installed version: $(docker compose version)"
          version=2.6.0
          docker compose version | grep --quiet "$version" || {
            echo "Installing Docker Compose version $version ..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "Installed version: $(docker compose version)"
          }
      - name: Configure Docker Compose
        shell: bash
        run: |
          echo "Configuring Docker Compose..."
          if [[ -f docker-compose.test.yml ]]; then
            echo "Using docker-compose.test.yml for default overrides..."
            cp docker-compose.test.yml docker-compose.override.yml
          fi
          echo "Done."
      - name: Add hosts to /etc/hosts
        shell: bash
        run: |
          hosts=("postgres" "redis" "elasticsearch")
          echo "Updating hosts file..."
          for host in "${hosts[@]}"; do
            sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
          done
          echo "Done."
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Create writable volume directories
        run: |
          dir_names=( "static" "media" "redirects" )
          for dir_name in "${dir_names[@]}"; do
            dir_path="_volumes/${dir_name}"
            mkdir -p "$dir_path"; {
              sudo chown -R www-data:www-data "$dir_path" && 
              sudo chmod a+w -R "$dir_path"
            } || exit 1
          done
      - uses: actions/cache@v2
        id: data-cache
        with:
          path: _volumes/db/init
          key: data
      - name: Start up containers
        run: bash config/scripts/deploy.sh
      - name: Run deploy script
        run: bash config/scripts/deploy.sh
      - name: Run deploy script x2
        run: bash config/scripts/deploy.sh
  # analyze:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   environment: test
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [javascript]
  #   continue-on-error: true
  #   steps:
  #     - name: Check out main branch
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Specify Docker Compose version
  #       run: |
  #         echo ""
  #         echo "Installed version: $(docker compose version)"
  #         version=2.6.0
  #         docker compose version | grep --quiet "$version" || {
  #           echo "Installing Docker Compose version $version ..."
  #           mkdir -p ~/.docker/cli-plugins/
  #           curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
  #           chmod +x ~/.docker/cli-plugins/docker-compose
  #           echo "Installed version: $(docker compose version)"
  #         }
  #     - name: Configure Docker Compose
  #       shell: bash
  #       run: |
  #         echo "Configuring Docker Compose..."
  #         if [[ -f docker-compose.test.yml ]]; then
  #           echo "Using docker-compose.test.yml for default overrides..."
  #           cp docker-compose.test.yml docker-compose.override.yml
  #         fi
  #         echo "Done."
  #     - name: Add hosts to /etc/hosts
  #       shell: bash
  #       run: |
  #         hosts=("postgres" "redis" "elasticsearch")
  #         echo "Updating hosts file..."
  #         for host in "${hosts[@]}"; do
  #           sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
  #         done
  #         echo "Done."
  # - name: Initialize CodeQL
  #   uses: github/codeql-action/init@v1
  #   with:
  #     languages: ${{ matrix.language }}
  #     setup-python-dependencies: false
  # - name: Autobuild
  #   uses: github/codeql-action/autobuild@v1
  # - name: Perform CodeQL Analysis
  #   uses: github/codeql-action/analyze@v1
