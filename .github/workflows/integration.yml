# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: integration
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths-ignore:
      - .gitignore
      - .github/**
      - "!.github/integration.yml"
      - .idea/**
      - .vscode/**
      - "**.md"
      - "**.rst"
      - config/hooks/**
  schedule:
    - cron: 0 9 * * *
  workflow_dispatch:
    inputs:
      jobs:
        description: Comma-separated list of names of jobs to trigger
        required: false
        default: build,test-deploy

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SHA: ${{ github.sha }}

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v27
  build:
    name: Build image
    needs: changed-files
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Specify Docker Compose version
        run: |
          echo ""
          echo "Installed version: $(docker compose version)"
          version=2.2.1
          docker compose version | grep --quiet "$version" || {
            echo "Installing Docker Compose version $version ..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "Installed version: $(docker compose version)"
          }
      - name: Configure Docker Compose
        shell: bash
        run: |
          echo "Configuring Docker Compose..."
          if [[ -f docker-compose.test.yml ]]; then
            echo "Using docker-compose.test.yml for default overrides..."
            cp docker-compose.test.yml docker-compose.override.yml
          fi
          echo "Done."
      - name: Add hosts to /etc/hosts
        shell: bash
        run: |
          hosts=("mongo")
          echo "Updating hosts file..."
          for host in "${hosts[@]}"; do
            sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
          done
          echo "Done."
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image without cache
        uses: docker/build-push-action@v3
        with:
          build-args: |
            NODE_ENV=production
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          load: false
          push: false
          no-cache: false
          secret-files: ENV_FILE=./.env
          tags: ghcr.io/iacobfred/selfbuilder:${{ github.sha }}
      - name: Run Snyk to check image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/iacobfred/selfbuilder:${{ github.sha }}
          args: --file=Dockerfile
  test-deploy:
    name: Test deploy
    needs: [changed-files, build]
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'deploy.sh') || github.event_name == 'workflow_dispatch' && contains(github.event.inputs.jobs, 'deploy') }}
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Specify Docker Compose version
        run: |
          echo ""
          echo "Installed version: $(docker compose version)"
          version=2.2.1
          docker compose version | grep --quiet "$version" || {
            echo "Installing Docker Compose version $version ..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "Installed version: $(docker compose version)"
          }
      - name: Configure Docker Compose
        shell: bash
        run: |
          echo "Configuring Docker Compose..."
          if [[ -f docker-compose.test.yml ]]; then
            echo "Using docker-compose.test.yml for default overrides..."
            cp docker-compose.test.yml docker-compose.override.yml
          fi
          echo "Done."
      - name: Add hosts to /etc/hosts
        shell: bash
        run: |
          hosts=("postgres" "redis" "elasticsearch" "selfbuilder.dev.net")
          echo "Updating hosts file..."
          for host in "${hosts[@]}"; do
            sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
          done
          echo "Done."
      - name: Cache Python virtual environment
        uses: actions/cache@v3
        id: venv-cache
        with:
          path: .venv
          key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Python dependencies
        if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
        run: bash scripts/setup.sh
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN}}
      - name: Create writable volume directories
        run: |
          dir_names=( "db/backups" "db/init" "static" "media" "redirects" )
          for dir_name in "${dir_names[@]}"; do
            dir_path="_volumes/${dir_name}"
            mkdir -p "$dir_path"; {
              sudo chown -R www-data:www-data "$dir_path" && 
              sudo chmod a+w -R "$dir_path"
            } || exit 1
          done
      - uses: actions/cache@v3
        id: data-cache
        with:
          path: _volumes/db/init
          key: data
      - name: Start up containers
        run: bash config/scripts/deploy.sh
      - name: Run deploy script
        run: bash config/scripts/deploy.sh
      - name: Run deploy script x2
        run: bash config/scripts/deploy.sh
