# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: delivery
on:
  push:
    branches: [main]
    paths-ignore:
      - .gitignore
      - .github/**
      - "!.github/delivery.yml"
      - .idea/**
      - .vscode/**
      - "**.md"
      - "**.rst"
      - "**.txt"
      - tests.py
      - setup.sh

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SHA: ${{ github.sha }}

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v29.0.3
  push-image:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache dotenv
        id: cache-dotenv
        uses: actions/cache@v3
        with:
          path: .env
          key: env-vars-${{ hashFiles('.env.*') }}
      - name: Write dotenv file
        if: steps.cache-dotenv.outputs.cache-hit != 'true'
        # https://github.com/iamsauravsharma/create-dotenv
        uses: iamsauravsharma/create-dotenv@v1.2.1
        with:
          env-prefix: "_" # Optional (default: '')
        # env: # env available for only this steps
        #   _SECRET_KEY: ${{ secrets.SECRET_KEY }}
      - name: Finalize dotenv file
        # Make sure to test: https://sed.js.org/
        run: |
          echo "Merging production env vars into dotenv file..."
          mv .env .env.tmp
          sort -u -t '=' -k 1,1 .env.production .env.tmp > .env
          echo "Removing leading underscores..."
          sed -i -r 's/^_//g' .env
          echo "Replacing hyphens with underscores in var names..."
          sed -i -r 's/(^[^=-]+)\-/\1_/g' .env
          echo "Making further fancy adjustments..."
          sed -i -r 's/(^[A-Z_]+?=)([^\n\"]+?[\ ][^\n\"]+)/\1"\2"/g' .env
          sed -i -r "s/(^[A-Z_]+?=)([\{][\"\ ]+?[^.]+[\}])/\1'\2'/g" .env
          echo "Finished preparing dotenv file."
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image with cache
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@v3
        with:
          build-args: |
            NODE_ENV=production
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          # no-cache: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secret-files: ENV_FILE=./.env
          tags: ghcr.io/iacobfred/portfolio:${{ github.sha }},ghcr.io/iacobfred/portfolio:latest
      - name: Build image without cache
        if: ${{ failure() }}
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@v3
        with:
          build-args: |
            NODE_ENV=production
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          no-cache: true
          secret-files: ENV_FILE=./.env
          tags: ghcr.io/iacobfred/portfolio:${{ github.sha }},ghcr.io/iacobfred/portfolio:latest
  deploy:
    needs: [changed-files, push-image]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Write dotenv file
        # https://github.com/iamsauravsharma/create-dotenv
        uses: iamsauravsharma/create-dotenv@v1.2.1
        with:
          env-prefix: "_" # Optional (default: '')
        # env: # env available for only this steps
        #   _SECRET_KEY: ${{ secrets.SECRET_KEY }}
      - name: Finalize dotenv file
        # Make sure to test: https://sed.js.org/
        run: |
          if [[ -f .env.production ]]; then echo "Merging production env vars into dotenv file..."; mv .env .env.tmp; sort -u -t '=' -k 1,1 .env.tmp .env.production > .env; fi
          echo "Removing leading underscores..."
          sed -i -r 's/^_//g' .env
          echo "Replacing hyphens with underscores in var names..."
          sed -i -r 's/(^[^=-]+)\-/\1_/g' .env
          echo "Making further fancy adjustments..."
          sed -i -r 's/(^[A-Z_]+?=)([^\n\"]+?[\ ][^\n\"]+)/\1"\2"/g' .env
          sed -i -r "s/(^[A-Z_]+?=)([\{][\"\ ]+?[^.]+[\}])/\1'\2'/g" .env
          grep -P -q '^[A-Z_]+?=$' .env && echo "Found empty var name: $(grep -P '^[A-Z_]+?=$' .env)" && exit 1
          mv .env .env.next
          echo "Finished preparing dotenv file."
      - name: Prepare files to deploy
        run: |
          files_to_transport=( ".env.next" "docker-compose.yml" ".config/nginx.conf" )
          for filepath in "${files_to_transport[@]}"; do
            mkdir -p dist/$(dirname "${filepath}")
            cp "$filepath" "dist/${filepath}"
          done
      # - name: Deploy to Staging server
      #   # https://github.com/marketplace/actions/ssh-deploy
      #   uses: easingthemes/ssh-deploy@main
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     # ARGS: "-rltgoDzvO"
      #     SOURCE: "dist/"
      #     REMOTE_HOST: ${{ secrets.SERVER_HOST }}
      #     REMOTE_USER: ${{ secrets.SERVER_USER }}
      #     TARGET: ${{ secrets.SERVER_TARGET }}
      #     # EXCLUDE: "/dist/, /node_modules/"
      - name: Deploy to server
        id: deploy-image
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          RELOAD_WEBSERVER: ${{ contains(needs.changed-files.outputs.modified-files, 'nginx.conf') }}
          SERVER_HOST: ${{ secrets.DOMAIN }}
          SERVER_TARGET: /var/www/${{ secrets.DOMAIN }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        shell: bash
        run: |
          echo "Adding GitHub to known hosts..."
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "Adding SSH private key..."
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "Added SSH private key."
          echo "Transferring files to server ..."
          rsync -rPv -e "ssh -p ${SSH_PORT:=22} -o 'StrictHostKeyChecking no'" dist/ jacob@${SERVER_HOST}:${SERVER_TARGET}
          echo "Starting SSH session with ${SERVER_HOST}:${SERVER_TARGET} ..."
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT jacob@$SERVER_HOST "
            cd /var/www/${DOMAIN} && 
            if test -f .env; then mv .env .env.tmp; sort -u -t '=' -k 1,1 .env.next .env.tmp > .env; fi;
            rm .env.next; rm .env.tmp;
            set -a && source .env && set +a && 
            docker compose pull && 
            docker compose up -d &&
            if [ $RELOAD_WEBSERVER = true ]; then echo 'Reloading webserver...'; nginx -s reload; fi;
            docker system prune -f
          "
