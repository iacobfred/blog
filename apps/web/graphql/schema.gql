# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

schema {
  query: Query
  mutation: Mutation
}

type Account {
  _id: ObjectId!
  accessToken: String
  accessTokenExpiry: DateTimeISO
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: ObjectId!
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]!
  syncToken: String
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input AccountCreationInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  archivedAt: DateTimeISO
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]!
  syncToken: String
  userId: ObjectId!
}

input AccountUpdateInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  archivedAt: DateTimeISO
  provider: String
  refreshToken: String
  remoteId: String
  scopes: [String!]
  syncToken: String
  userId: ObjectId
}

input AccountWhereInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  id: ObjectId
  provider: String
  refreshToken: String
  remoteId: String
  scopes: [String!]
  syncToken: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input AccountWhereUniqueInput {
  id: ObjectId
  remoteId: String
}

type Belief {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input BeliefCreationInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input BeliefUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input BeliefWhereInput {
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input BeliefWhereUniqueInput {
  id: ObjectId
}

type Book {
  _id: ObjectId!
  archivedAt: DateTimeISO
  authorNames: [String!]!
  authorNamesLf: [String!]!
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
  updatedAt: DateTimeISO!
}

input BookCreationInput {
  archivedAt: DateTimeISO
  authorNames: [String!]!
  authorNamesLf: [String!]!
  description: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
}

input BookUpdateInput {
  archivedAt: DateTimeISO
  authorNames: [String!]
  authorNamesLf: [String!]
  description: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
}

input BookWhereInput {
  authorNames: [String!]
  authorNamesLf: [String!]
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
  updatedAt: DateTimeISO
}

input BookWhereUniqueInput {
  id: ObjectId
}

type Calendar {
  _id: ObjectId!
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO!
  enabled: Boolean
  id: ObjectId!
  name: String!
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input CalendarCreationInput {
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  enabled: Boolean
  name: String!
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  userId: ObjectId!
}

type CalendarEvent {
  _id: ObjectId!
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: ObjectId!
  canceled: Boolean
  createdAt: DateTimeISO!
  end: DateTimeISO
  habitId: ObjectId
  id: ObjectId!
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO!
  taskId: ObjectId
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input CalendarEventCreationInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: ObjectId!
  canceled: Boolean
  end: DateTimeISO
  habitId: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO!
  taskId: ObjectId
  title: String!
  userId: ObjectId!
}

input CalendarEventUpdateInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: ObjectId
  canceled: Boolean
  end: DateTimeISO
  habitId: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO
  taskId: ObjectId
  title: String
  userId: ObjectId
}

input CalendarEventWhereInput {
  allDay: Boolean
  calendarId: ObjectId
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: ObjectId
  id: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO
  taskId: ObjectId
  title: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input CalendarEventWhereUniqueInput {
  id: ObjectId
  taskId: ObjectId
}

input CalendarUpdateInput {
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  enabled: Boolean
  name: String
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  userId: ObjectId
}

input CalendarWhereInput {
  accountId: ObjectId
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: ObjectId
  name: String
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input CalendarWhereUniqueInput {
  id: ObjectId
}

type Dashboard {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  isDefault: Boolean
  name: String!
  public: Boolean
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input DashboardCreationInput {
  archivedAt: DateTimeISO
  description: String
  isDefault: Boolean
  name: String!
  public: Boolean
  userId: ObjectId!
}

input DashboardUpdateInput {
  archivedAt: DateTimeISO
  description: String
  isDefault: Boolean
  name: String
  public: Boolean
  userId: ObjectId
}

input DashboardWhereInput {
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  isDefault: Boolean
  name: String
  public: Boolean
  updatedAt: DateTimeISO
  userId: ObjectId
}

input DashboardWhereUniqueInput {
  id: ObjectId
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTimeISO

type Goal {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String!
  habitId: ObjectId
  id: ObjectId!
  parentId: ObjectId
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input GoalCreationInput {
  archivedAt: DateTimeISO
  description: String!
  habitId: ObjectId
  parentId: ObjectId
  userId: ObjectId!
}

input GoalUpdateInput {
  archivedAt: DateTimeISO
  description: String
  habitId: ObjectId
  parentId: ObjectId
  userId: ObjectId
}

input GoalWhereInput {
  createdAt: DateTimeISO
  description: String
  habitId: ObjectId
  id: ObjectId
  parentId: ObjectId
  updatedAt: DateTimeISO
  userId: ObjectId
}

input GoalWhereUniqueInput {
  id: ObjectId
}

type Habit {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  cron: String
  defaultDurationInMinutes: Int
  description: String
  id: ObjectId!
  name: String!
  public: Boolean
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input HabitCreationInput {
  archivedAt: DateTimeISO
  cron: String
  defaultDurationInMinutes: Int
  description: String
  name: String!
  public: Boolean
  userId: ObjectId!
}

input HabitUpdateInput {
  archivedAt: DateTimeISO
  cron: String
  defaultDurationInMinutes: Int
  description: String
  name: String
  public: Boolean
  userId: ObjectId
}

input HabitWhereInput {
  createdAt: DateTimeISO
  cron: String
  defaultDurationInMinutes: Int
  description: String
  id: ObjectId
  name: String
  public: Boolean
  updatedAt: DateTimeISO
  userId: ObjectId
}

input HabitWhereUniqueInput {
  id: ObjectId
}

type Identity {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input IdentityCreationInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input IdentityUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input IdentityWhereInput {
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input IdentityWhereUniqueInput {
  id: ObjectId
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type List {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  fields: JSON!
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ListCreationInput {
  archivedAt: DateTimeISO
  description: String
  fields: JSON!
  name: String!
  userId: ObjectId!
}

type ListItem {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  data: JSON!
  id: ObjectId!
  listId: ObjectId!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ListItemCreationInput {
  archivedAt: DateTimeISO
  data: JSON!
  listId: ObjectId!
  userId: ObjectId!
}

input ListItemUpdateInput {
  archivedAt: DateTimeISO
  data: JSON
  listId: ObjectId
  userId: ObjectId
}

input ListItemWhereInput {
  createdAt: DateTimeISO
  data: JSON
  id: ObjectId
  listId: ObjectId
  updatedAt: DateTimeISO
  userId: ObjectId
}

input ListItemWhereUniqueInput {
  id: ObjectId
}

input ListUpdateInput {
  archivedAt: DateTimeISO
  description: String
  fields: JSON
  name: String
  userId: ObjectId
}

input ListWhereInput {
  createdAt: DateTimeISO
  description: String
  fields: JSON
  id: ObjectId
  name: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input ListWhereUniqueInput {
  id: ObjectId
}

type Mantra {
  _id: ObjectId!
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO!
  id: ObjectId!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input MantraCreationInput {
  archivedAt: DateTimeISO
  content: String!
  userId: ObjectId!
}

input MantraUpdateInput {
  archivedAt: DateTimeISO
  content: String
  userId: ObjectId
}

input MantraWhereInput {
  content: String
  createdAt: DateTimeISO
  id: ObjectId
  updatedAt: DateTimeISO
  userId: ObjectId
}

input MantraWhereUniqueInput {
  id: ObjectId
}

type Mutation {
  createAccount(data: AccountCreationInput!): Account!
  createBelief(data: BeliefCreationInput!): Belief!
  createBook(data: BookCreationInput!): Book!
  createCalendar(data: CalendarCreationInput!): Calendar!
  createCalendarEvent(data: CalendarEventCreationInput!): CalendarEvent!
  createDashboard(data: DashboardCreationInput!): Dashboard!
  createGoal(data: GoalCreationInput!): Goal!
  createHabit(data: HabitCreationInput!): Habit!
  createIdentity(data: IdentityCreationInput!): Identity!
  createList(data: ListCreationInput!): List!
  createListItem(data: ListItemCreationInput!): ListItem!
  createMantra(data: MantraCreationInput!): Mantra!
  createNote(data: NoteCreationInput!): Note!
  createNotebook(data: NotebookCreationInput!): Notebook!
  createShelving(data: ShelvingCreationInput!): Shelving!
  createTask(data: TaskCreationInput!): Task!
  createUser(data: UserCreationInput!): User!
  createValue(data: ValueCreationInput!): Value!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  updateBelief(data: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
  updateCalendar(data: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar!
  updateCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  updateDashboard(data: DashboardUpdateInput!, where: DashboardWhereUniqueInput!): Dashboard!
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity!
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List!
  updateListItem(data: ListItemUpdateInput!, where: ListItemWhereUniqueInput!): ListItem!
  updateMantra(data: MantraUpdateInput!, where: MantraWhereUniqueInput!): Mantra!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note!
  updateNotebook(data: NotebookUpdateInput!, where: NotebookWhereUniqueInput!): Notebook!
  updateShelving(data: ShelvingUpdateInput!, where: ShelvingWhereUniqueInput!): Shelving!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateValue(data: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value!
  upsertAccount(data: AccountCreationInput!, where: AccountWhereUniqueInput!): Account!
  upsertBelief(data: BeliefCreationInput!, where: BeliefWhereUniqueInput!): Belief!
  upsertBook(data: BookCreationInput!, where: BookWhereUniqueInput!): Book!
  upsertCalendar(data: CalendarCreationInput!, where: CalendarWhereUniqueInput!): Calendar!
  upsertCalendarEvent(data: CalendarEventCreationInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  upsertDashboard(data: DashboardCreationInput!, where: DashboardWhereUniqueInput!): Dashboard!
  upsertGoal(data: GoalCreationInput!, where: GoalWhereUniqueInput!): Goal!
  upsertHabit(data: HabitCreationInput!, where: HabitWhereUniqueInput!): Habit!
  upsertIdentity(data: IdentityCreationInput!, where: IdentityWhereUniqueInput!): Identity!
  upsertList(data: ListCreationInput!, where: ListWhereUniqueInput!): List!
  upsertListItem(data: ListItemCreationInput!, where: ListItemWhereUniqueInput!): ListItem!
  upsertMantra(data: MantraCreationInput!, where: MantraWhereUniqueInput!): Mantra!
  upsertNote(data: NoteCreationInput!, where: NoteWhereUniqueInput!): Note!
  upsertNotebook(data: NotebookCreationInput!, where: NotebookWhereUniqueInput!): Notebook!
  upsertShelving(data: ShelvingCreationInput!, where: ShelvingWhereUniqueInput!): Shelving!
  upsertTask(data: TaskCreationInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(data: UserCreationInput!, where: UserWhereUniqueInput!): User!
  upsertValue(data: ValueCreationInput!, where: ValueWhereUniqueInput!): Value!
}

type Note {
  _id: ObjectId!
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO!
  id: ObjectId!
  notebookId: ObjectId!
  public: Boolean
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input NoteCreationInput {
  archivedAt: DateTimeISO
  body: String
  notebookId: ObjectId!
  public: Boolean
  title: String!
  userId: ObjectId!
}

input NoteUpdateInput {
  archivedAt: DateTimeISO
  body: String
  notebookId: ObjectId
  public: Boolean
  title: String
  userId: ObjectId
}

input NoteWhereInput {
  body: String
  createdAt: DateTimeISO
  id: ObjectId
  notebookId: ObjectId
  public: Boolean
  title: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input NoteWhereUniqueInput {
  id: ObjectId
}

type Notebook {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  public: Boolean
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input NotebookCreationInput {
  archivedAt: DateTimeISO
  description: String
  public: Boolean
  title: String!
  userId: ObjectId!
}

input NotebookUpdateInput {
  archivedAt: DateTimeISO
  description: String
  public: Boolean
  title: String
  userId: ObjectId
}

input NotebookWhereInput {
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  public: Boolean
  title: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input NotebookWhereUniqueInput {
  id: ObjectId
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput): [Account!]!
  belief(where: BeliefWhereUniqueInput!): Belief
  beliefs(where: BeliefWhereInput): [Belief!]!
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput): [Book!]!
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEvents(where: CalendarEventWhereInput): [CalendarEvent!]!
  calendars(where: CalendarWhereInput): [Calendar!]!
  dashboard(where: DashboardWhereUniqueInput!): Dashboard
  dashboards(where: DashboardWhereInput): [Dashboard!]!
  goal(where: GoalWhereUniqueInput!): Goal
  goals(where: GoalWhereInput): [Goal!]!
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput): [Habit!]!
  identities(where: IdentityWhereInput): [Identity!]!
  identity(where: IdentityWhereUniqueInput!): Identity
  list(where: ListWhereUniqueInput!): List
  listItem(where: ListItemWhereUniqueInput!): ListItem
  listItems(where: ListItemWhereInput): [ListItem!]!
  lists(where: ListWhereInput): [List!]!
  mantra(where: MantraWhereUniqueInput!): Mantra
  mantras(where: MantraWhereInput): [Mantra!]!
  note(where: NoteWhereUniqueInput!): Note
  notebook(where: NotebookWhereUniqueInput!): Notebook
  notebooks(where: NotebookWhereInput): [Notebook!]!
  notes(where: NoteWhereInput): [Note!]!
  shelving(where: ShelvingWhereUniqueInput!): Shelving
  shelvings(where: ShelvingWhereInput): [Shelving!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput): [User!]!
  value(where: ValueWhereUniqueInput!): Value
  values(where: ValueWhereInput): [Value!]!
}

type Shelving {
  _id: ObjectId!
  archivedAt: DateTimeISO
  bookId: ObjectId!
  createdAt: DateTimeISO!
  id: ObjectId!
  position: Int!
  rationale: String
  shelfId: ObjectId!
  updatedAt: DateTimeISO!
}

input ShelvingCreationInput {
  archivedAt: DateTimeISO
  bookId: ObjectId!
  position: Int!
  rationale: String
  shelfId: ObjectId!
}

input ShelvingUpdateInput {
  archivedAt: DateTimeISO
  bookId: ObjectId
  position: Int
  rationale: String
  shelfId: ObjectId
}

input ShelvingWhereInput {
  bookId: ObjectId
  createdAt: DateTimeISO
  id: ObjectId
  position: Int
  rationale: String
  shelfId: ObjectId
  updatedAt: DateTimeISO
}

input ShelvingWhereUniqueInput {
  id: ObjectId
}

type Task {
  _id: ObjectId!
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  dueDate: DateTimeISO
  expectedDuration: Int
  habitId: ObjectId
  id: ObjectId!
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int!
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input TaskCreationInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  expectedDuration: Int
  habitId: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int!
  title: String!
  userId: ObjectId!
}

input TaskUpdateInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  expectedDuration: Int
  habitId: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  userId: ObjectId
}

input TaskWhereInput {
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  expectedDuration: Int
  habitId: ObjectId
  id: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input TaskWhereUniqueInput {
  id: ObjectId
}

type User {
  _id: ObjectId!
  accounts: [Account!]
  archivedAt: DateTimeISO
  calendarEvents: [CalendarEvent!]
  calendars: [Calendar!]
  createdAt: DateTimeISO!
  email: String!
  emailVerified: Boolean
  goals: [Goal!]
  habits: [Habit!]
  id: ObjectId!
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  mantras: [Mantra!]
  name: String
  notebooks: [Notebook!]
  password: String
  settings: JSON
  tasks: [Task!]
  updatedAt: DateTimeISO!
}

input UserCreationInput {
  archivedAt: DateTimeISO
  email: String!
  emailVerified: Boolean
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
}

input UserUpdateInput {
  archivedAt: DateTimeISO
  email: String
  emailVerified: Boolean
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
}

input UserWhereInput {
  createdAt: DateTimeISO
  email: String
  emailVerified: Boolean
  id: ObjectId
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
  updatedAt: DateTimeISO
}

input UserWhereUniqueInput {
  email: String
  id: ObjectId
}

type Value {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ValueCreationInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input ValueUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input ValueWhereInput {
  createdAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  updatedAt: DateTimeISO
  userId: ObjectId
}

input ValueWhereUniqueInput {
  id: ObjectId
}