/* Do not edit this file. It was generated programmatically. */

import AccountModel from "@web/generated/models/Account";
import UserModel from "@web/generated/models/User";
import {
  createAccount as _createAccount,
  findAccount as _findAccount,
  updateAccount as _updateAccount,
  upsertAccount as _upsertAccount,
} from "@web/generated/shortcuts/account.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import {
  AccountCreationArgs,
  AccountUpdateArgs,
  AccountUpsertionArgs,
  FindManyAccountArgs,
  FindUniqueAccountArgs,
} from "@web/graphql/generated/args/account.args";
import Account from "@web/graphql/generated/types/Account";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Account)
export class AccountResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() account: Account) {
    return account._id;
  }

  @TypeGraphQL.Query(() => Account, { nullable: true })
  async account(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueAccountArgs
  ) {
    return await _findAccount(args);
  }

  @TypeGraphQL.Query(() => [Account], { nullable: false })
  async accounts(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyAccountArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await AccountModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Account)
  async createAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: AccountCreationArgs
  ) {
    const account = await _createAccount(args);
    if (account) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: account.userId },
        { $push: { accounts: { ...account } } }
      );
    }
    return account;
  }

  /*
  @TypeGraphQL.Mutation(() => [Account], { nullable: false })
  async createManyAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: AccountsCreationArgs
  ): Promise<Account[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Account)
  async updateAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: AccountUpdateArgs
  ) {
    return await _updateAccount(args);
  }

  @TypeGraphQL.Mutation(() => Account)
  async upsertAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: AccountUpsertionArgs
  ) {
    return await _upsertAccount(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Account], { nullable: false })
  async updateAccounts(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyAccounts
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Account], { nullable: false })
  async updateAccountsDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyAccounts
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Account, { nullable: true })
  async deleteAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteAccountArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Account], { nullable: false })
  async deleteManyAccount(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyAccountArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
