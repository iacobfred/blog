/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import Belief from "@web/graphql/generated/types/Belief";
import BeliefModel from "@web/graphql/generated/models/BeliefModel";
import {
  BeliefCreationArgs,
  BeliefsCreationArgs,
  DeleteBeliefArgs,
  DeleteManyBeliefArgs,
  FindManyBeliefArgs,
  FindUniqueBeliefArgs,
  BeliefUpdateArgs,
  ArgsForUpdatingManyBeliefs,
  BeliefUpsertionArgs,
} from "@web/graphql/generated/args/belief.args";
import type { GqlContext } from "@web/graphql/context";
import type { GraphQLResolveInfo } from "graphql";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import {
  createBelief as _createBelief,
  upsertBelief as _upsertBelief,
} from "@web/graphql/generated/shortcuts/belief.shortcuts";
import UserModel from "@web/graphql/generated/models/UserModel";

@TypeGraphQL.Resolver(() => Belief)
export class BeliefResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() belief: Belief) {
    return belief._id;
  }

  @TypeGraphQL.Query(() => Belief, { nullable: true })
  async belief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueBeliefArgs
  ): Promise<Belief | null> {
    const filter = convertFilterForMongo(args.where);
    return BeliefModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [Belief], { nullable: false })
  async beliefs(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyBeliefArgs
  ): Promise<Belief[]> {
    const filter = convertFilterForMongo(args.where);
    return BeliefModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Belief)
  async createBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BeliefCreationArgs
  ) {
    const belief = await _createBelief(args);
    if (belief) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: belief.userId },
        { $push: { beliefs: { ...belief } } }
      );
    }
    return belief;
  }

  @TypeGraphQL.Mutation(() => [Belief], { nullable: false })
  async createManyBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BeliefsCreationArgs
  ): Promise<Belief[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Belief)
  async updateBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BeliefUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const belief = await BeliefModel.findOneAndUpdate(filter, args.data, {
      returnDocument: "after",
    });
    // NOTE: This update fails if it's not awaited.
    belief &&
      (await UserModel.findOneAndUpdate(
        { _id: belief.userId, "beliefs._id": belief._id },
        {
          $set: { "beliefs.$": { ...belief } },
        }
      ));
    return belief;
  }

  @TypeGraphQL.Mutation(() => Belief)
  async upsertBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BeliefUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return _upsertBelief({ where: filter, data: args.data });
  }

  @TypeGraphQL.Mutation(() => [Belief], { nullable: false })
  async updateBeliefs(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyBeliefs
  ): Promise<Belief[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Belief], { nullable: false })
  async updateBeliefsDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyBeliefs
  ): Promise<Belief[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Belief, { nullable: true })
  async deleteBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteBeliefArgs
  ): Promise<Belief | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Belief], { nullable: false })
  async deleteManyBelief(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyBeliefArgs
  ): Promise<Belief[]> {
    throw new Error("Not implemented");
  }
}
