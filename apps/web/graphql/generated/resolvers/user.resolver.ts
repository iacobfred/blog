/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import User from "@web/generated/types/User";
import UserModel from "@web/generated/models/UserModel";
import {
  UserCreationArgs,
  UsersCreationArgs,
  DeleteUserArgs,
  DeleteManyUserArgs,
  FindManyUserArgs,
  FindUniqueUserArgs,
  UserUpdateArgs,
  ArgsForUpdatingManyUsers,
  UserUpsertionArgs,
} from "@web/graphql/generated/args/user.args";
import type { GqlContext } from "@web/graphql/context";
import type { GraphQLResolveInfo } from "graphql";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import {
  createUser as _createUser,
  updateUser as _updateUser,
  upsertUser as _upsertUser,
  findUser as _findUser,
} from "@web/generated/shortcuts/user.shortcuts";

@TypeGraphQL.Resolver(() => User)
export class UserResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() user: User) {
    return user._id;
  }

  @TypeGraphQL.Query(() => User, { nullable: true })
  async user(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueUserArgs
  ): Promise<User | null> {
    return _findUser(args);
  }

  @TypeGraphQL.Query(() => [User], { nullable: false })
  async users(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyUserArgs
  ): Promise<User[]> {
    const filter = convertFilterForMongo(args.where);
    return UserModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => User)
  async createUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UserCreationArgs
  ) {
    const user = await _createUser(args);
    return user;
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async createManyUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UsersCreationArgs
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => User)
  async updateUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UserUpdateArgs
  ) {
    return _updateUser(args);
  }

  @TypeGraphQL.Mutation(() => User)
  async upsertUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UserUpsertionArgs
  ) {
    return _upsertUser(args);
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async updateUsers(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyUsers
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async updateUsersDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyUsers
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => User, { nullable: true })
  async deleteUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteUserArgs
  ): Promise<User | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async deleteManyUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyUserArgs
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }
}
