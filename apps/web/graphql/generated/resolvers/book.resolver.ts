/* Do not edit this file. It was generated programmatically. */

import BookModel from "@web/generated/models/Book";
import {
  createBook as _createBook,
  findBook as _findBook,
  updateBook as _updateBook,
  upsertBook as _upsertBook,
} from "@web/generated/shortcuts/book.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import {
  BookCreationArgs,
  BookUpdateArgs,
  BookUpsertionArgs,
  FindManyBookArgs,
  FindUniqueBookArgs,
} from "@web/graphql/generated/args/book.args";
import Book from "@web/graphql/generated/types/Book";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Book)
export class BookResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() book: Book) {
    return book._id;
  }

  @TypeGraphQL.Query(() => Book, { nullable: true })
  async book(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueBookArgs
  ) {
    return await _findBook(args);
  }

  @TypeGraphQL.Query(() => [Book], { nullable: false })
  async books(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyBookArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await BookModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Book)
  async createBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BookCreationArgs
  ) {
    const book = await _createBook(args);
    return book;
  }

  /*
  @TypeGraphQL.Mutation(() => [Book], { nullable: false })
  async createManyBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BooksCreationArgs
  ): Promise<Book[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Book)
  async updateBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BookUpdateArgs
  ) {
    return await _updateBook(args);
  }

  @TypeGraphQL.Mutation(() => Book)
  async upsertBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: BookUpsertionArgs
  ) {
    return await _upsertBook(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Book], { nullable: false })
  async updateBooks(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyBooks
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Book], { nullable: false })
  async updateBooksDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyBooks
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Book, { nullable: true })
  async deleteBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteBookArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Book], { nullable: false })
  async deleteManyBook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyBookArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
