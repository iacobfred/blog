/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import ListItem from "@web/generated/types/ListItem";
import ListItemModel from "@web/generated/models/ListItemModel";
import {
  ListItemCreationArgs,
  ListItemsCreationArgs,
  DeleteListItemArgs,
  DeleteManyListItemArgs,
  FindManyListItemArgs,
  FindUniqueListItemArgs,
  ListItemUpdateArgs,
  ArgsForUpdatingManyListItems,
  ListItemUpsertionArgs,
} from "@web/graphql/generated/args/listItem.args";
import type { GqlContext } from "@web/graphql/context";
import type { GraphQLResolveInfo } from "graphql";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import {
  createListItem as _createListItem,
  updateListItem as _updateListItem,
  upsertListItem as _upsertListItem,
  findListItem as _findListItem,
} from "@web/generated/shortcuts/listItem.shortcuts";
import UserModel from "@web/generated/models/UserModel";

@TypeGraphQL.Resolver(() => ListItem)
export class ListItemResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() listItem: ListItem) {
    return listItem._id;
  }

  @TypeGraphQL.Query(() => ListItem, { nullable: true })
  async listItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueListItemArgs
  ): Promise<ListItem | null> {
    return _findListItem(args);
  }

  @TypeGraphQL.Query(() => [ListItem], { nullable: false })
  async listItems(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyListItemArgs
  ): Promise<ListItem[]> {
    const filter = convertFilterForMongo(args.where);
    return ListItemModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => ListItem)
  async createListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ListItemCreationArgs
  ) {
    const listItem = await _createListItem(args);
    if (listItem) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: listItem.userId },
        { $push: { listItems: { ...listItem } } }
      );
    }
    return listItem;
  }

  @TypeGraphQL.Mutation(() => [ListItem], { nullable: false })
  async createManyListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ListItemsCreationArgs
  ): Promise<ListItem[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => ListItem)
  async updateListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ListItemUpdateArgs
  ) {
    return _updateListItem(args);
  }

  @TypeGraphQL.Mutation(() => ListItem)
  async upsertListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ListItemUpsertionArgs
  ) {
    return _upsertListItem(args);
  }

  @TypeGraphQL.Mutation(() => [ListItem], { nullable: false })
  async updateListItems(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyListItems
  ): Promise<ListItem[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [ListItem], { nullable: false })
  async updateListItemsDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyListItems
  ): Promise<ListItem[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => ListItem, { nullable: true })
  async deleteListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteListItemArgs
  ): Promise<ListItem | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [ListItem], { nullable: false })
  async deleteManyListItem(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyListItemArgs
  ): Promise<ListItem[]> {
    throw new Error("Not implemented");
  }
}
