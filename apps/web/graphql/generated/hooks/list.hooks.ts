/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import { ListCreationArgs, ListUpdateArgs } from "@web/graphql/generated/args/list.args";
import { ListFragment } from "@web/graphql/generated/fragments/list.fragment";
import {
  CREATE_LIST,
  getOptimisticResponseForListCreation,
  updateCacheAfterCreatingList,
  UPDATE_LIST,
} from "@web/graphql/generated/mutations/list.mutations";
import {
  initializeListData,
  ListData,
  listReducer,
  listsReducer,
} from "@web/graphql/generated/reducers/list.reducer";
import {
  listCreationInputSchema,
  listUpdateInputSchema,
} from "@web/graphql/generated/schemas/list.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type ListCreationMutationHookOptions = MutationHookOptions<
  { createList: ListFragment },
  ListCreationArgs
>;

export const useCreateList = (options?: ListCreationMutationHookOptions) => {
  return useHandleMutation<{ createList: ListFragment }, ListCreationArgs>(
    CREATE_LIST,
    { ...updateCacheAfterCreatingList, ...(options ?? {}) },
    listCreationInputSchema,
    getOptimisticResponseForListCreation
  );
};

type ListUpdateMutationHookOptions = MutationHookOptions<
  { updateList: ListFragment },
  ListUpdateArgs
>;

export const useUpdateList = (options?: ListUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateList: ListFragment }, ListUpdateArgs>(
    UPDATE_LIST,
    options,
    listUpdateInputSchema
  );
};

export const useListReducer = (data?: ListData): [ListData, Dispatch<Payload<ListData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeListData(starterData, user);
  const [listData, dispatchListData] = useReducer(listReducer, initializedData, initializeListData);
  useEffect(() => {
    if (user?.id && !listData?.userId) {
      dispatchListData({
        field: "init",
        value: initializeListData(listData, user),
      });
    }
  }, [user, listData]);
  return [listData, dispatchListData];
};

export const useListsReducer = (
  data: ListFragment[]
): [ListFragment[], Dispatch<ArrayAction<ListFragment>>] => {
  return useReducer(listsReducer, data);
};
