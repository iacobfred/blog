/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import {
  ListItemCreationArgs,
  ListItemUpdateArgs,
} from "@web/graphql/generated/args/listItem.args";
import { ListItemFragment } from "@web/graphql/generated/fragments/listItem.fragment";
import {
  CREATE_LIST_ITEM,
  getOptimisticResponseForListItemCreation,
  updateCacheAfterCreatingListItem,
  UPDATE_LIST_ITEM,
} from "@web/graphql/generated/mutations/listItem.mutations";
import {
  initializeListItemData,
  ListItemData,
  listItemReducer,
  listItemsReducer,
} from "@web/graphql/generated/reducers/listItem.reducer";
import {
  listItemCreationInputSchema,
  listItemUpdateInputSchema,
} from "@web/graphql/generated/schemas/listItem.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type ListItemCreationMutationHookOptions = MutationHookOptions<
  { createListItem: ListItemFragment },
  ListItemCreationArgs
>;

export const useCreateListItem = (options?: ListItemCreationMutationHookOptions) => {
  return useHandleMutation<{ createListItem: ListItemFragment }, ListItemCreationArgs>(
    CREATE_LIST_ITEM,
    { ...updateCacheAfterCreatingListItem, ...(options ?? {}) },
    listItemCreationInputSchema,
    getOptimisticResponseForListItemCreation
  );
};

type ListItemUpdateMutationHookOptions = MutationHookOptions<
  { updateListItem: ListItemFragment },
  ListItemUpdateArgs
>;

export const useUpdateListItem = (options?: ListItemUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateListItem: ListItemFragment }, ListItemUpdateArgs>(
    UPDATE_LIST_ITEM,
    options,
    listItemUpdateInputSchema
  );
};

export const useListItemReducer = (
  data?: ListItemData
): [ListItemData, Dispatch<Payload<ListItemData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeListItemData(starterData, user);
  const [listItemData, dispatchListItemData] = useReducer(
    listItemReducer,
    initializedData,
    initializeListItemData
  );
  useEffect(() => {
    if (user?.id && !listItemData?.userId) {
      dispatchListItemData({
        field: "init",
        value: initializeListItemData(listItemData, user),
      });
    }
  }, [user, listItemData]);
  return [listItemData, dispatchListItemData];
};

export const useListItemsReducer = (
  data: ListItemFragment[]
): [ListItemFragment[], Dispatch<ArrayAction<ListItemFragment>>] => {
  return useReducer(listItemsReducer, data);
};
