/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import {
  NotebookCreationArgs,
  NotebookUpdateArgs,
} from "@web/graphql/generated/args/notebook.args";
import { NotebookFragment } from "@web/graphql/generated/fragments/notebook.fragment";
import {
  CREATE_NOTEBOOK,
  getOptimisticResponseForNotebookCreation,
  updateCacheAfterCreatingNotebook,
  UPDATE_NOTEBOOK,
} from "@web/graphql/generated/mutations/notebook.mutations";
import {
  initializeNotebookData,
  NotebookData,
  notebookReducer,
  notebooksReducer,
} from "@web/graphql/generated/reducers/notebook.reducer";
import {
  notebookCreationInputSchema,
  notebookUpdateInputSchema,
} from "@web/graphql/generated/schemas/notebook.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type NotebookCreationMutationHookOptions = MutationHookOptions<
  { createNotebook: NotebookFragment },
  NotebookCreationArgs
>;

export const useCreateNotebook = (options?: NotebookCreationMutationHookOptions) => {
  return useHandleMutation<{ createNotebook: NotebookFragment }, NotebookCreationArgs>(
    CREATE_NOTEBOOK,
    { ...updateCacheAfterCreatingNotebook, ...(options ?? {}) },
    notebookCreationInputSchema,
    getOptimisticResponseForNotebookCreation
  );
};

type NotebookUpdateMutationHookOptions = MutationHookOptions<
  { updateNotebook: NotebookFragment },
  NotebookUpdateArgs
>;

export const useUpdateNotebook = (options?: NotebookUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateNotebook: NotebookFragment }, NotebookUpdateArgs>(
    UPDATE_NOTEBOOK,
    options,
    notebookUpdateInputSchema
  );
};

export const useNotebookReducer = (
  data?: NotebookData
): [NotebookData, Dispatch<Payload<NotebookData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeNotebookData(starterData, user);
  const [notebookData, dispatchNotebookData] = useReducer(
    notebookReducer,
    initializedData,
    initializeNotebookData
  );
  useEffect(() => {
    if (user?.id && !notebookData?.userId) {
      dispatchNotebookData({
        field: "init",
        value: initializeNotebookData(notebookData, user),
      });
    }
  }, [user, notebookData]);
  return [notebookData, dispatchNotebookData];
};

export const useNotebooksReducer = (
  data: NotebookFragment[]
): [NotebookFragment[], Dispatch<ArrayAction<NotebookFragment>>] => {
  return useReducer(notebooksReducer, data);
};
