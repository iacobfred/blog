/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import { HabitCreationArgs, HabitUpdateArgs } from "@web/graphql/generated/args/habit.args";
import { HabitFragment } from "@web/graphql/generated/fragments/habit.fragment";
import {
  CREATE_HABIT,
  getOptimisticResponseForHabitCreation,
  updateCacheAfterCreatingHabit,
  UPDATE_HABIT,
} from "@web/graphql/generated/mutations/habit.mutations";
import {
  HabitData,
  habitReducer,
  habitsReducer,
  initializeHabitData,
} from "@web/graphql/generated/reducers/habit.reducer";
import {
  habitCreationInputSchema,
  habitUpdateInputSchema,
} from "@web/graphql/generated/schemas/habit.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type HabitCreationMutationHookOptions = MutationHookOptions<
  { createHabit: HabitFragment },
  HabitCreationArgs
>;

export const useCreateHabit = (options?: HabitCreationMutationHookOptions) => {
  return useHandleMutation<{ createHabit: HabitFragment }, HabitCreationArgs>(
    CREATE_HABIT,
    { ...updateCacheAfterCreatingHabit, ...(options ?? {}) },
    habitCreationInputSchema,
    getOptimisticResponseForHabitCreation
  );
};

type HabitUpdateMutationHookOptions = MutationHookOptions<
  { updateHabit: HabitFragment },
  HabitUpdateArgs
>;

export const useUpdateHabit = (options?: HabitUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateHabit: HabitFragment }, HabitUpdateArgs>(
    UPDATE_HABIT,
    options,
    habitUpdateInputSchema
  );
};

export const useHabitReducer = (data?: HabitData): [HabitData, Dispatch<Payload<HabitData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeHabitData(starterData, user);
  const [habitData, dispatchHabitData] = useReducer(
    habitReducer,
    initializedData,
    initializeHabitData
  );
  useEffect(() => {
    if (user?.id && !habitData?.userId) {
      dispatchHabitData({
        field: "init",
        value: initializeHabitData(habitData, user),
      });
    }
  }, [user, habitData]);
  return [habitData, dispatchHabitData];
};

export const useHabitsReducer = (
  data: HabitFragment[]
): [HabitFragment[], Dispatch<ArrayAction<HabitFragment>>] => {
  return useReducer(habitsReducer, data);
};
