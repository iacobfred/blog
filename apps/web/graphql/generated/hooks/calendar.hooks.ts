/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import {
  CalendarCreationArgs,
  CalendarUpdateArgs,
} from "@web/graphql/generated/args/calendar.args";
import { CalendarFragment } from "@web/graphql/generated/fragments/calendar.fragment";
import {
  CREATE_CALENDAR,
  getOptimisticResponseForCalendarCreation,
  updateCacheAfterCreatingCalendar,
  UPDATE_CALENDAR,
} from "@web/graphql/generated/mutations/calendar.mutations";
import {
  CalendarData,
  calendarReducer,
  calendarsReducer,
  initializeCalendarData,
} from "@web/graphql/generated/reducers/calendar.reducer";
import {
  calendarCreationInputSchema,
  calendarUpdateInputSchema,
} from "@web/graphql/generated/schemas/calendar.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type CalendarCreationMutationHookOptions = MutationHookOptions<
  { createCalendar: CalendarFragment },
  CalendarCreationArgs
>;

export const useCreateCalendar = (options?: CalendarCreationMutationHookOptions) => {
  return useHandleMutation<{ createCalendar: CalendarFragment }, CalendarCreationArgs>(
    CREATE_CALENDAR,
    { ...updateCacheAfterCreatingCalendar, ...(options ?? {}) },
    calendarCreationInputSchema,
    getOptimisticResponseForCalendarCreation
  );
};

type CalendarUpdateMutationHookOptions = MutationHookOptions<
  { updateCalendar: CalendarFragment },
  CalendarUpdateArgs
>;

export const useUpdateCalendar = (options?: CalendarUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateCalendar: CalendarFragment }, CalendarUpdateArgs>(
    UPDATE_CALENDAR,
    options,
    calendarUpdateInputSchema
  );
};

export const useCalendarReducer = (
  data?: CalendarData
): [CalendarData, Dispatch<Payload<CalendarData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeCalendarData(starterData, user);
  const [calendarData, dispatchCalendarData] = useReducer(
    calendarReducer,
    initializedData,
    initializeCalendarData
  );
  useEffect(() => {
    if (user?.id && !calendarData?.userId) {
      dispatchCalendarData({
        field: "init",
        value: initializeCalendarData(calendarData, user),
      });
    }
  }, [user, calendarData]);
  return [calendarData, dispatchCalendarData];
};

export const useCalendarsReducer = (
  data: CalendarFragment[]
): [CalendarFragment[], Dispatch<ArrayAction<CalendarFragment>>] => {
  return useReducer(calendarsReducer, data);
};
