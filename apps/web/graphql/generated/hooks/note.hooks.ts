/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import {
  CREATE_NOTE,
  UPDATE_NOTE,
  updateCacheAfterCreatingNote,
} from "@web/graphql/generated/mutations/note.mutations";
import { NoteFragment } from "@web/graphql/generated/fragments/note.fragment";
import { NoteCreationArgs, NoteUpdateArgs } from "@web/graphql/generated/args/note.args";
import { useHandleMutation } from "@web/utils/data/mutation";
import { Payload, ArrayAction } from "@web/utils/data/reduction";
import { useEffect, useReducer, Dispatch } from "react";
import {
  noteReducer,
  notesReducer,
  NoteData,
  initializeNoteData,
} from "@web/graphql/generated/reducers/note.reducer";
import { useUser } from "@web/components/contexts/UserContext";
import {
  noteCreationInputSchema,
  noteUpdateInputSchema,
} from "@web/graphql/generated/schemas/note.schemas";
import { getOptimisticResponseForNoteCreation } from "@web/graphql/generated/mutations/note.mutations";

type NoteCreationMutationHookOptions = MutationHookOptions<
  { createNote: NoteFragment },
  NoteCreationArgs
>;

export const useCreateNote = (options?: NoteCreationMutationHookOptions) => {
  return useHandleMutation<{ createNote: NoteFragment }, NoteCreationArgs>(
    CREATE_NOTE,
    { ...updateCacheAfterCreatingNote, ...(options ?? {}) },
    noteCreationInputSchema,
    getOptimisticResponseForNoteCreation
  );
};

type NoteUpdateMutationHookOptions = MutationHookOptions<
  { updateNote: NoteFragment },
  NoteUpdateArgs
>;

export const useUpdateNote = (options?: NoteUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateNote: NoteFragment }, NoteUpdateArgs>(
    UPDATE_NOTE,
    options,
    noteUpdateInputSchema
  );
};

export const useNoteReducer = (data?: NoteData): [NoteData, Dispatch<Payload<NoteData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeNoteData(starterData, user);
  const [noteData, dispatchNoteData] = useReducer(noteReducer, initializedData, initializeNoteData);
  useEffect(() => {
    if (user?.id && !noteData?.userId) {
      dispatchNoteData({
        field: "init",
        value: initializeNoteData(noteData, user),
      });
    }
  }, [user, noteData]);
  return [noteData, dispatchNoteData];
};

export const useNotesReducer = (
  data: NoteFragment[]
): [NoteFragment[], Dispatch<ArrayAction<NoteFragment>>] => {
  return useReducer(notesReducer, data);
};
