/* Do not edit this file. It was generated programmatically. */

import { DateTimeScalar, Int, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.InputType()
export class ShelvingCreationInput {
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  bookId!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  shelfId!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => Int, { nullable: false })
  position!: number;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => String, { nullable: true })
  rationale?: string | null | undefined;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@TypeGraphQL.InputType()
export class ShelvingUpdateInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  bookId?: string | undefined;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  shelfId?: string | undefined;

  @TypeGraphQL.Field(() => Int, { nullable: true })
  position?: number | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  rationale?: string | null | undefined;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@TypeGraphQL.InputType()
export class ShelvingWhereInput extends WhereInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  bookId?: string | null | undefined;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  shelfId?: string | null | undefined;

  @TypeGraphQL.Field(() => Int, { nullable: true })
  position?: number | null | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  rationale?: string | undefined;
}

@TypeGraphQL.InputType()
export class ShelvingWhereUniqueInput extends WhereUniqueInput {
  // @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  // id!: ID;
}
