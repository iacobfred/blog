/* Do not edit this file. It was generated programmatically. */
// import Book from "@web/graphql/generated/types/Book";
import { BookCreationInput } from "@web/graphql/generated/inputs/book.inputs";
import { ID } from "@web/graphql/schema/types";
import { Payload, ArrayAction, arrayReducer } from "@web/utils/data/reduction";
import { BookFragment } from "@web/graphql/generated/fragments/book.fragment";
import { UserFragment } from "@web/graphql/generated/fragments/user.fragment";

export type BookData = Partial<BookCreationInput> & { id?: ID };
// export type BookData = InputData<Book>;
// export type InitialBookData = InitialData<Book, "rank" | "userId">;

export function initializeBookData(
  data: Partial<BookData>,
  user?: UserFragment | null | undefined
): Partial<BookData> {
  return {
    title: "",
    slug: "",
    authorNames: [],
    authorNamesLf: [],
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function bookReducer(state: BookData, payload: Payload<BookData>) {
  if (payload.field === "init") return initializeBookData(payload.value as Partial<BookData>);
  return { ...state, [payload.field]: payload.value };
}

export function booksReducer(state: BookFragment[], action: ArrayAction<BookFragment>) {
  return arrayReducer<BookFragment>(state, action);
}
