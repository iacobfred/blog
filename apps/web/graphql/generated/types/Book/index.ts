/* Do not edit this file. It was generated programmatically. */

import { ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import { Int } from "@web/graphql/schema/scalars";
import { DEFAULT_MODEL_OPTIONS, Model } from "@web/graphql/schema/types";
import * as TypeGraphQL from "type-graphql-v2-fork";
import { postSave, postUpdate, preSave } from "./hooks";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Book>("save", preSave)
@post<Book>("save", postSave)
@post<Book>("findOneAndUpdate", postUpdate)
export default class Book extends Model {
  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  isbn?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  isbn13?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  title!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  slug!: string;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  description?: string | null;

  @TypeGraphQL.Field(() => [String], { nullable: false })
  @Property({ required: true })
  authorNames!: string[];

  @TypeGraphQL.Field(() => [String], { nullable: false })
  @Property({ required: true })
  authorNamesLf!: string[];

  @TypeGraphQL.Field(() => Int, { nullable: true })
  @Property({ required: false, default: null })
  publicationYear?: number | null;

  @TypeGraphQL.Field(() => Int, { nullable: true })
  @Property({ required: false, default: null })
  originalPublicationYear?: number | null;
}
