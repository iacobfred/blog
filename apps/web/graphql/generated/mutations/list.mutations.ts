/* Do not edit this file. It was generated programmatically. */

import { gql, MutationHookOptions } from "@apollo/client";
import { listFragment, ListFragment } from "@web/graphql/generated/fragments/list.fragment";
import { ListCreationArgs } from "@web/graphql/generated/args/list.args";
import { ListCreationInput, ListUpdateInput } from "@web/graphql/generated/inputs/list.inputs";

export const CREATE_LIST = gql`
  mutation CreateList($data: ListCreationInput!) {
    createList(data: $data) {
      ...ListFragment
    }
  }
  ${listFragment}
`;

export const getOptimisticResponseForListCreation = (
  data: ListCreationInput
): { createList: ListFragment } => {
  const now = new Date();
  return {
    createList: {
      __typename: "List",
      id: "tmp-id",
      description: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingList: MutationHookOptions<
  { createList: ListFragment },
  ListCreationArgs
> = {
  update(cache, { data }) {
    const { createList } = data || {};
    if (createList) {
      const newListRef = cache.writeFragment({
        data: createList,
        fragment: gql`
          fragment NewList on List {
            ...ListFragment
          }
          ${listFragment}
        `,
        fragmentName: "NewList",
      });
      cache.modify({
        id: `User:${createList.userId}`,
        fields: {
          lists(existingListRefs = []) {
            return [...existingListRefs, newListRef];
          },
        },
      });
      cache.modify({
        fields: {
          lists(existingLists = []) {
            return [...existingLists, newListRef];
          },
        },
      });
    }
  },
};

export const UPDATE_LIST = gql`
  mutation UpdateList($where: ListWhereUniqueInput!, $data: ListUpdateInput!) {
    updateList(where: $where, data: $data) {
      ...ListFragment
    }
  }
  ${listFragment}
`;

export const getOptimisticResponseForListUpdate = (
  fragment: ListFragment,
  data: ListUpdateInput
) => {
  const now = new Date();
  return {
    updateList: {
      __typename: "List",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_LIST = gql`
  mutation UpdateList($where: ListWhereUniqueInput!, $data: ListCreationInput!) {
    upsertList(where: $where, data: $data) {
      ...ListFragment
    }
  }
  ${listFragment}
`;

export const UPDATE_LISTS = gql`
  mutation UpdateLists($where: ListWhereInput!, $data: ListUpdateInput!) {
    updateLists(where: $where, data: $data) {
      ...ListFragment
    }
  }
  ${listFragment}
`;

export const UPDATE_LISTS_DISTINCTLY = gql`
  mutation UpdateListsDistinctly($data: [ListUpdateInput!]!) {
    updateListsDistinctly(data: $data) {
      ...ListFragment
    }
  }
  ${listFragment}
`;
