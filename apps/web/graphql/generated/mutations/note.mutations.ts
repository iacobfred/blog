/* Do not edit this file. It was generated programmatically. */

import { gql, MutationHookOptions } from "@apollo/client";
import { NoteCreationArgs } from "@web/graphql/generated/args/note.args";
import { noteFragment, NoteFragment } from "@web/graphql/generated/fragments/note.fragment";
import { NoteCreationInput, NoteUpdateInput } from "@web/graphql/generated/inputs/note.inputs";
import { ObjectID } from "bson";

export const CREATE_NOTE = gql`
  mutation CreateNote($data: NoteCreationInput!) {
    createNote(data: $data) {
      ...NoteFragment
    }
  }
  ${noteFragment}
`;

export const getOptimisticResponseForNoteCreation = (
  data: NoteCreationInput
): { createNote: NoteFragment } => {
  const now = new Date();
  return {
    createNote: {
      __typename: "Note",
      id: new ObjectID().toHexString(),
      body: "",
      public: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingNote: MutationHookOptions<
  { createNote: NoteFragment },
  NoteCreationArgs
> = {
  update(cache, { data }) {
    const { createNote } = data || {};
    if (createNote) {
      const newNoteRef = cache.writeFragment({
        data: createNote,
        fragment: gql`
          fragment NewNote on Note {
            ...NoteFragment
          }
          ${noteFragment}
        `,
        fragmentName: "NewNote",
      });
      cache.modify({
        id: `User:${createNote.userId}`,
        fields: {
          notes(existingNoteRefs = []) {
            return [...existingNoteRefs, newNoteRef];
          },
        },
      });
      cache.modify({
        fields: {
          notes(existingNotes = []) {
            return [...existingNotes, newNoteRef];
          },
        },
      });
    }
  },
};

export const UPDATE_NOTE = gql`
  mutation UpdateNote($where: NoteWhereUniqueInput!, $data: NoteUpdateInput!) {
    updateNote(where: $where, data: $data) {
      ...NoteFragment
    }
  }
  ${noteFragment}
`;

export const getOptimisticResponseForNoteUpdate = (
  fragment: NoteFragment,
  data: NoteUpdateInput
) => {
  const now = new Date();
  return {
    updateNote: {
      __typename: "Note",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_NOTE = gql`
  mutation UpdateNote($where: NoteWhereUniqueInput!, $data: NoteCreationInput!) {
    upsertNote(where: $where, data: $data) {
      ...NoteFragment
    }
  }
  ${noteFragment}
`;

export const UPDATE_NOTES = gql`
  mutation UpdateNotes($where: NoteWhereInput!, $data: NoteUpdateInput!) {
    updateNotes(where: $where, data: $data) {
      ...NoteFragment
    }
  }
  ${noteFragment}
`;

export const UPDATE_NOTES_DISTINCTLY = gql`
  mutation UpdateNotesDistinctly($data: [NoteUpdateInput!]!) {
    updateNotesDistinctly(data: $data) {
      ...NoteFragment
    }
  }
  ${noteFragment}
`;
