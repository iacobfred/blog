/* Do not edit this file. It was generated programmatically. */

import { Note } from "@web/generated/interfaces/Note";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Note/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const noteSchema = new mongoose.Schema<Note>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    notebookId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Notebook",
      required: true,
    },
    title: {
      type: String,
      trim: true,
      required: true,
    },
    body: {
      type: String,
      trim: true,
      required: false,
      default: "",
    },
    public: {
      type: Boolean,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

noteSchema.plugin(mongooseLeanVirtuals);

noteSchema.pre<Note>("save", async function () {
  return Promise.resolve(preSave(this));
});

noteSchema.post<Note>("save", async function (document) {
  await postCreate(document);
});

noteSchema.post<Note>("findOneAndUpdate", async function (_result: Note | ModifyResult<Note>) {
  // eslint-disable-next-line @typescript-eslint/no-this-alias
  const query = this as unknown as UpdateQuery<Note>;
  const updatedFields = query.getUpdate().$set;
  if ((_result as ModifyResult<Note>).value) {
    const result = _result as ModifyResult<Note>;
    const note = result.value;
    if (note) {
      if (!result.lastErrorObject?.updatedExisting) {
        await postCreate(note);
      } else {
        await postUpdate(note, updatedFields);
      }
    }
  } else {
    const result = _result as Note;
    await postUpdate(result, updatedFields);
  }
});

export { noteSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const NoteModel: mongoose.Model<Note> =
  mongoose.models.Note || mongoose.model<Note>("Note", noteSchema);

export default NoteModel;
