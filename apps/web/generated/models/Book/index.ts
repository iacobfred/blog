/* Do not edit this file. It was generated programmatically. */

import { Book } from "@web/generated/interfaces/Book";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Book/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const bookSchema = new mongoose.Schema<Book>(
  {
    isbn: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    isbn13: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    title: {
      type: String,
      trim: true,
      required: true,
    },
    slug: {
      type: String,
      trim: true,
      required: true,
    },
    description: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    authorNames: {
      type: [String],
      required: true,
    },
    authorNamesLf: {
      type: [String],
      required: true,
    },
    publicationYear: {
      type: Number,
      required: false,
      default: null,
    },
    originalPublicationYear: {
      type: Number,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

bookSchema.plugin(mongooseLeanVirtuals);

bookSchema.pre<HydratedDocument<Book>>("save", async function () {
  return Promise.resolve(preSave(this));
});

bookSchema.post<Book>("save", async function (document) {
  await postCreate(document);
});

bookSchema.post<Book>("findOneAndUpdate", async function (_result: Book | ModifyResult<Book>) {
  // eslint-disable-next-line @typescript-eslint/no-this-alias
  const query = this as unknown as UpdateQuery<Book>;
  const updatedFields = query.getUpdate().$set;
  if ((_result as ModifyResult<Book>).value) {
    const result = _result as ModifyResult<Book>;
    const book = result.value;
    if (book) {
      if (!result.lastErrorObject?.updatedExisting) {
        await postCreate(book);
      } else {
        await postUpdate(book, updatedFields);
      }
    }
  } else {
    const result = _result as Book;
    await postUpdate(result, updatedFields);
  }
});

export { bookSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const BookModel: mongoose.Model<Book> =
  mongoose.models.Book || mongoose.model<Book>("Book", bookSchema);

export default BookModel;
