/* Do not edit this file. It was generated programmatically. */

import { Mantra } from "@web/generated/interfaces/Mantra";
import { MantraDocument } from "@web/generated/models/Mantra/document";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Mantra/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const mantraSchema = new mongoose.Schema<Mantra>(
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    content: { type: String, required: true },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

mantraSchema.plugin(mongooseLeanVirtuals);

mantraSchema.pre<MantraDocument>("save", async function () {
  console.log("Saving Mantra", this);
  await preSave(this);
});

mantraSchema.post<MantraDocument>("save", async function (document) {
  console.log("Saved Mantra", document);
  await postCreate(document);
});

mantraSchema.post<MantraDocument>(
  "findOneAndUpdate",
  async function (_result: MantraDocument | ModifyResult<MantraDocument>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<MantraDocument>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<MantraDocument>).value) {
      const result = _result as ModifyResult<MantraDocument>;
      const mantra = result.value;
      if (mantra) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(mantra);
        } else {
          await postUpdate(mantra, updatedFields);
        }
      }
    } else {
      const result = _result as MantraDocument;
      await postUpdate(result, updatedFields);
    }
  }
);

export { mantraSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const MantraModel = mongoose.models.Mantra || mongoose.model<Mantra>("Mantra", mantraSchema);

export default MantraModel;
