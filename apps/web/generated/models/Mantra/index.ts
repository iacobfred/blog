/* Do not edit this file. It was generated programmatically. */

import { Mantra } from "@web/generated/interfaces/Mantra";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Mantra/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const mantraSchema = new mongoose.Schema<Mantra>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    content: {
      type: String,
      trim: true,
      required: true,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

mantraSchema.plugin(mongooseLeanVirtuals);

mantraSchema.pre<HydratedDocument<Mantra>>("save", async function () {
  return Promise.resolve(preSave(this));
});

mantraSchema.post<Mantra>("save", async function (document) {
  await postCreate(document);
});

mantraSchema.post<Mantra>(
  "findOneAndUpdate",
  async function (_result: Mantra | ModifyResult<Mantra>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<Mantra>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<Mantra>).value) {
      const result = _result as ModifyResult<Mantra>;
      const mantra = result.value;
      if (mantra) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(mantra);
        } else {
          await postUpdate(mantra, updatedFields);
        }
      }
    } else {
      const result = _result as Mantra;
      await postUpdate(result, updatedFields);
    }
  }
);

export { mantraSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const MantraModel: mongoose.Model<Mantra> =
  mongoose.models.Mantra || mongoose.model<Mantra>("Mantra", mantraSchema);

export default MantraModel;
