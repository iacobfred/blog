/* Do not edit this file. It was generated programmatically. */

import { User } from "@web/generated/interfaces/User";
import { accountSchema as Account } from "@web/generated/models/Account";
import { calendarSchema as Calendar } from "@web/generated/models/Calendar";
import { calendarEventSchema as CalendarEvent } from "@web/generated/models/CalendarEvent";
import { goalSchema as Goal } from "@web/generated/models/Goal";
import { habitSchema as Habit } from "@web/generated/models/Habit";
import { mantraSchema as Mantra } from "@web/generated/models/Mantra";
import { notebookSchema as Notebook } from "@web/generated/models/Notebook";
import { taskSchema as Task } from "@web/generated/models/Task";
import { postCreate, postUpdate, preSave } from "@web/generated/models/User/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const userSchema = new mongoose.Schema<User>(
  {
    name: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    email: {
      type: String,
      trim: true,
      required: true,
      unique: true,
    },
    emailVerified: {
      type: Boolean,
      required: false,
      default: null,
    },
    image: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    isAdmin: {
      type: Boolean,
      required: false,
      default: false,
    },
    settings: {
      type: Object,
      required: false,
      default: {},
    },
    lastLogin: {
      type: Date,
      required: false,
      default: null,
    },
    password: {
      type: String,
      trim: true,
      required: false,
      select: false,
      default: null,
    },
    accounts: {
      type: [Account],
      ref: "Account",
      required: false,
      default: [],
    },
    calendars: {
      type: [Calendar],
      ref: "Calendar",
      required: false,
      default: [],
    },
    calendarEvents: {
      type: [CalendarEvent],
      ref: "CalendarEvent",
      required: false,
      default: [],
    },
    goals: {
      type: [Goal],
      ref: "Goal",
      required: false,
      default: [],
    },
    habits: {
      type: [Habit],
      ref: "Habit",
      required: false,
      default: [],
    },
    mantras: {
      type: [Mantra],
      ref: "Mantra",
      required: false,
      default: [],
    },
    notebooks: {
      type: [Notebook],
      ref: "Notebook",
      required: false,
      default: [],
    },
    tasks: {
      type: [Task],
      ref: "Task",
      required: false,
      default: [],
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

userSchema.plugin(mongooseLeanVirtuals);

userSchema.pre<HydratedDocument<User>>("save", async function () {
  return Promise.resolve(preSave(this));
});

userSchema.post<User>("save", async function (document) {
  await postCreate(document);
});

userSchema.post<User>("findOneAndUpdate", async function (_result: User | ModifyResult<User>) {
  // eslint-disable-next-line @typescript-eslint/no-this-alias
  const query = this as unknown as UpdateQuery<User>;
  const updatedFields = query.getUpdate().$set;
  if ((_result as ModifyResult<User>).value) {
    const result = _result as ModifyResult<User>;
    const user = result.value;
    if (user) {
      if (!result.lastErrorObject?.updatedExisting) {
        await postCreate(user);
      } else {
        await postUpdate(user, updatedFields);
      }
    }
  } else {
    const result = _result as User;
    await postUpdate(result, updatedFields);
  }
});

export { userSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const UserModel: mongoose.Model<User> =
  mongoose.models.User || mongoose.model<User>("User", userSchema);

export default UserModel;
