/* Do not edit this file. It was generated programmatically. */

import { List } from "@web/generated/interfaces/List";
import { postCreate, postUpdate, preSave } from "@web/generated/models/List/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { HydratedDocument, ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const listSchema = new mongoose.Schema<List>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    name: {
      type: String,
      trim: true,
      required: true,
    },
    description: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    fields: {
      type: Object,
      required: true,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

listSchema.plugin(mongooseLeanVirtuals);

listSchema.pre<HydratedDocument<List>>("save", async function () {
  return Promise.resolve(preSave(this));
});

listSchema.post<List>("save", async function (document) {
  await postCreate(document);
});

listSchema.post<List>("findOneAndUpdate", async function (_result: List | ModifyResult<List>) {
  // eslint-disable-next-line @typescript-eslint/no-this-alias
  const query = this as unknown as UpdateQuery<List>;
  const updatedFields = query.getUpdate().$set;
  if ((_result as ModifyResult<List>).value) {
    const result = _result as ModifyResult<List>;
    const list = result.value;
    if (list) {
      if (!result.lastErrorObject?.updatedExisting) {
        await postCreate(list);
      } else {
        await postUpdate(list, updatedFields);
      }
    }
  } else {
    const result = _result as List;
    await postUpdate(result, updatedFields);
  }
});

export { listSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const ListModel: mongoose.Model<List> =
  mongoose.models.List || mongoose.model<List>("List", listSchema);

export default ListModel;
