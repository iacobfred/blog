/* Do not edit this file. It was generated programmatically. */

import { Notebook } from "@web/generated/interfaces/Notebook";
import { NotebookDocument } from "@web/generated/models/Notebook/document";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Notebook/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const notebookSchema = new mongoose.Schema<Notebook>(
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    title: { type: String, required: true },
    description: { type: String, required: false, default: null },
    public: { type: Boolean, required: false, default: null },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

notebookSchema.plugin(mongooseLeanVirtuals);

notebookSchema.pre<NotebookDocument>("save", async function () {
  console.log("Saving Notebook", this);
  await preSave(this);
});

notebookSchema.post<NotebookDocument>("save", async function (document) {
  console.log("Saved Notebook", document);
  await postCreate(document);
});

notebookSchema.post<NotebookDocument>(
  "findOneAndUpdate",
  async function (_result: NotebookDocument | ModifyResult<NotebookDocument>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<NotebookDocument>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<NotebookDocument>).value) {
      const result = _result as ModifyResult<NotebookDocument>;
      const notebook = result.value;
      if (notebook) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(notebook);
        } else {
          await postUpdate(notebook, updatedFields);
        }
      }
    } else {
      const result = _result as NotebookDocument;
      await postUpdate(result, updatedFields);
    }
  }
);

export { notebookSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const NotebookModel =
  mongoose.models.Notebook || mongoose.model<Notebook>("Notebook", notebookSchema);

export default NotebookModel;
