/* Do not edit this file. It was generated programmatically. */

import { Shelving } from "@web/generated/interfaces/Shelving";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Shelving/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const shelvingSchema = new mongoose.Schema<Shelving>(
  {
    bookId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Book",
      required: true,
    },
    shelfId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Shelf",
      required: true,
    },
    position: {
      type: Number,
      required: true,
    },
    rationale: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

shelvingSchema.plugin(mongooseLeanVirtuals);

shelvingSchema.pre<Shelving>("save", async function () {
  return Promise.resolve(preSave(this));
});

shelvingSchema.post<Shelving>("save", async function (document) {
  await postCreate(document);
});

shelvingSchema.post<Shelving>(
  "findOneAndUpdate",
  async function (_result: Shelving | ModifyResult<Shelving>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<Shelving>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<Shelving>).value) {
      const result = _result as ModifyResult<Shelving>;
      const shelving = result.value;
      if (shelving) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(shelving);
        } else {
          await postUpdate(shelving, updatedFields);
        }
      }
    } else {
      const result = _result as Shelving;
      await postUpdate(result, updatedFields);
    }
  }
);

export { shelvingSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const ShelvingModel: mongoose.Model<Shelving> =
  mongoose.models.Shelving || mongoose.model<Shelving>("Shelving", shelvingSchema);

export default ShelvingModel;
