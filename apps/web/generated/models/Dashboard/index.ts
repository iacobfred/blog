/* Do not edit this file. It was generated programmatically. */

import { Dashboard } from "@web/generated/interfaces/Dashboard";
import { DashboardDocument } from "@web/generated/models/Dashboard/document";
import { postCreate, postUpdate, preSave } from "@web/generated/models/Dashboard/hooks";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
import mongoose, { ModifyResult, UpdateQuery } from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";

const dashboardSchema = new mongoose.Schema<Dashboard>(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    name: {
      type: String,
      trim: true,
      required: true,
    },
    description: {
      type: String,
      trim: true,
      required: false,
      default: null,
    },
    isDefault: {
      type: Boolean,
      required: false,
      default: null,
    },
    public: {
      type: Boolean,
      required: false,
      default: null,
    },
    archivedAt: { type: Date, required: false, default: null },
  },
  DEFAULT_SCHEMA_OPTIONS
);

dashboardSchema.plugin(mongooseLeanVirtuals);

dashboardSchema.pre<DashboardDocument>("save", async function () {
  console.log("Saving Dashboard", this);
  await preSave(this);
});

dashboardSchema.post<DashboardDocument>("save", async function (document) {
  console.log("Saved Dashboard", document);
  await postCreate(document);
});

dashboardSchema.post<DashboardDocument>(
  "findOneAndUpdate",
  async function (_result: DashboardDocument | ModifyResult<DashboardDocument>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<DashboardDocument>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<DashboardDocument>).value) {
      const result = _result as ModifyResult<DashboardDocument>;
      const dashboard = result.value;
      if (dashboard) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(dashboard);
        } else {
          await postUpdate(dashboard, updatedFields);
        }
      }
    } else {
      const result = _result as DashboardDocument;
      await postUpdate(result, updatedFields);
    }
  }
);

export { dashboardSchema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const DashboardModel =
  mongoose.models.Dashboard || mongoose.model<Dashboard>("Dashboard", dashboardSchema);

export default DashboardModel;
