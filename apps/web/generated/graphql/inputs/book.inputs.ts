/* Do not edit this file. It was generated programmatically. */

import { DateTimeScalar, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
import { Field, InputType, Int } from "type-graphql-v2-fork";

@InputType()
export class BookCreationInput {
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  isbn?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  isbn13?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  title!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  slug!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  description?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => [String], { nullable: false })
  authorNames!: string[];

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => [String], { nullable: false })
  authorNamesLf!: string[];

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Int, { nullable: true })
  publicationYear?: number | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Int, { nullable: true })
  originalPublicationYear?: number | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class BookUpdateInput {
  @Field(() => String, { nullable: true })
  isbn?: string | null | undefined;

  @Field(() => String, { nullable: true })
  isbn13?: string | null | undefined;

  @Field(() => String, { nullable: true })
  title?: string | undefined;

  @Field(() => String, { nullable: true })
  slug?: string | undefined;

  @Field(() => String, { nullable: true })
  description?: string | null | undefined;

  @Field(() => [String], { nullable: true })
  authorNames?: string[] | undefined;

  @Field(() => [String], { nullable: true })
  authorNamesLf?: string[] | undefined;

  @Field(() => Int, { nullable: true })
  publicationYear?: number | null | undefined;

  @Field(() => Int, { nullable: true })
  originalPublicationYear?: number | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class BookWhereInput extends WhereInput {
  @Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @Field(() => String, { nullable: true })
  isbn?: string | undefined;

  @Field(() => String, { nullable: true })
  isbn13?: string | undefined;

  @Field(() => String, { nullable: true })
  title?: string | null | undefined;

  @Field(() => String, { nullable: true })
  slug?: string | null | undefined;

  @Field(() => String, { nullable: true })
  description?: string | undefined;

  @Field(() => [String], { nullable: true })
  authorNames?: string[] | null | undefined;

  @Field(() => [String], { nullable: true })
  authorNamesLf?: string[] | null | undefined;

  @Field(() => Int, { nullable: true })
  publicationYear?: number | undefined;

  @Field(() => Int, { nullable: true })
  originalPublicationYear?: number | undefined;
}

@InputType()
export class BookWhereUniqueInput extends WhereUniqueInput {
  // @Field(() => ObjectIdScalar, { nullable: false })
  // id!: ID;
}
