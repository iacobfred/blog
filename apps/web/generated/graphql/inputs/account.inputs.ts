/* Do not edit this file. It was generated programmatically. */

import { DateTimeScalar, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
import { Field, InputType } from "type-graphql-v2-fork";

@InputType()
export class AccountCreationInput {
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => ObjectIdScalar, { nullable: false })
  userId!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  provider!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  remoteId!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => [String], { nullable: false })
  scopes!: string[];

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  accessToken?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  refreshToken?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => DateTimeScalar, { nullable: true })
  accessTokenExpiry?: Date | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  syncToken?: string | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class AccountUpdateInput {
  @Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | undefined;

  @Field(() => String, { nullable: true })
  provider?: string | undefined;

  @Field(() => String, { nullable: true })
  remoteId?: string | undefined;

  @Field(() => [String], { nullable: true })
  scopes?: string[] | undefined;

  @Field(() => String, { nullable: true })
  accessToken?: string | null | undefined;

  @Field(() => String, { nullable: true })
  refreshToken?: string | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  accessTokenExpiry?: Date | null | undefined;

  @Field(() => String, { nullable: true })
  syncToken?: string | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class AccountWhereInput extends WhereInput {
  @Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | null | undefined;

  @Field(() => String, { nullable: true })
  provider?: string | null | undefined;

  @Field(() => String, { nullable: true })
  remoteId?: string | null | undefined;

  @Field(() => [String], { nullable: true })
  scopes?: string[] | null | undefined;

  @Field(() => String, { nullable: true })
  accessToken?: string | undefined;

  @Field(() => String, { nullable: true })
  refreshToken?: string | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  accessTokenExpiry?: Date | undefined;

  @Field(() => String, { nullable: true })
  syncToken?: string | undefined;
}

@InputType()
export class AccountWhereUniqueInput extends WhereUniqueInput {
  @Field(() => String, { nullable: true })
  remoteId?: string | null | undefined;
}
