/* Do not edit this file. It was generated programmatically. */

import { DateTimeScalar, Int, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
import { Field, InputType } from "type-graphql-v2-fork";

@InputType()
export class TaskCreationInput {
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  title!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  description?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => DateTimeScalar, { nullable: true })
  plannedStartDate?: Date | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => DateTimeScalar, { nullable: true })
  dueDate?: Date | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => ObjectIdScalar, { nullable: false })
  userId!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => ObjectIdScalar, { nullable: true })
  parentId?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => ObjectIdScalar, { nullable: true })
  habitId?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Int, { nullable: true })
  expectedDuration?: number | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Int, { nullable: false })
  rank!: number;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => DateTimeScalar, { nullable: true })
  completedAt?: Date | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class TaskUpdateInput {
  @Field(() => String, { nullable: true })
  title?: string | undefined;

  @Field(() => String, { nullable: true })
  description?: string | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  plannedStartDate?: Date | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  dueDate?: Date | null | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  parentId?: string | null | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  habitId?: string | null | undefined;

  @Field(() => Int, { nullable: true })
  expectedDuration?: number | null | undefined;

  @Field(() => Int, { nullable: true })
  rank?: number | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  completedAt?: Date | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class TaskWhereInput extends WhereInput {
  @Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @Field(() => String, { nullable: true })
  title?: string | null | undefined;

  @Field(() => String, { nullable: true })
  description?: string | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  plannedStartDate?: Date | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  dueDate?: Date | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | null | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  parentId?: string | undefined;

  @Field(() => ObjectIdScalar, { nullable: true })
  habitId?: string | undefined;

  @Field(() => Int, { nullable: true })
  expectedDuration?: number | undefined;

  @Field(() => Int, { nullable: true })
  rank?: number | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  completedAt?: Date | undefined;
}

@InputType()
export class TaskWhereUniqueInput extends WhereUniqueInput {
  // @Field(() => ObjectIdScalar, { nullable: false })
  // id!: ID;
}
