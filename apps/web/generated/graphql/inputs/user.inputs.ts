/* Do not edit this file. It was generated programmatically. */

import { Settings } from "@web/generated/models/User/types";
import { DateTimeScalar, JSONResolver, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
import { Field, InputType } from "type-graphql-v2-fork";

@InputType()
export class UserCreationInput {
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  name?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: false })
  email!: string;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Boolean, { nullable: true })
  emailVerified?: boolean | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => String, { nullable: true })
  image?: string | null | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => Boolean, { nullable: true })
  isAdmin?: boolean | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => JSONResolver, { nullable: true })
  settings?: Settings | undefined;

  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @Field(() => DateTimeScalar, { nullable: true })
  lastLogin?: Date | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class UserUpdateInput {
  @Field(() => String, { nullable: true })
  name?: string | null | undefined;

  @Field(() => String, { nullable: true })
  email?: string | undefined;

  @Field(() => Boolean, { nullable: true })
  emailVerified?: boolean | null | undefined;

  @Field(() => String, { nullable: true })
  image?: string | null | undefined;

  @Field(() => Boolean, { nullable: true })
  isAdmin?: boolean | undefined;

  @Field(() => JSONResolver, { nullable: true })
  settings?: Settings | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  lastLogin?: Date | null | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@InputType()
export class UserWhereInput extends WhereInput {
  @Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @Field(() => String, { nullable: true })
  name?: string | undefined;

  @Field(() => String, { nullable: true })
  email?: string | null | undefined;

  @Field(() => Boolean, { nullable: true })
  emailVerified?: boolean | undefined;

  @Field(() => String, { nullable: true })
  image?: string | undefined;

  @Field(() => Boolean, { nullable: true })
  isAdmin?: boolean | undefined;

  @Field(() => JSONResolver, { nullable: true })
  settings?: Record<string, unknown> | undefined;

  @Field(() => DateTimeScalar, { nullable: true })
  lastLogin?: Date | undefined;
}

@InputType()
export class UserWhereUniqueInput extends WhereUniqueInput {
  @Field(() => String, { nullable: true })
  email?: string | null | undefined;
}
