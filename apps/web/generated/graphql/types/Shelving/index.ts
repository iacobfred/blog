/* Do not edit this file. It was generated programmatically. */

import { Int, ObjectIdScalar } from "@web/graphql/schema/scalars";
import { Model } from "@web/graphql/schema/types";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.ObjectType()
export class Shelving extends Model {
  // `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  bookId!: string;

  // `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  shelfId!: string;

  // `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => Int, { nullable: false })
  position!: number;

  // `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => String, { nullable: true })
  rationale?: string | null;
}

export default Shelving;
