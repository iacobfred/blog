/* Do not edit this file. It was generated programmatically. */

import {
  FindManyNotebookArgs,
  FindUniqueNotebookArgs,
  NotebookCreationArgs,
  NotebookUpdateArgs,
  NotebookUpsertionArgs,
} from "@web/generated/graphql/args/notebook.args";
import Notebook from "@web/generated/graphql/types/Notebook";
import NotebookModel from "@web/generated/models/Notebook";
import UserModel from "@web/generated/models/User";
import {
  createNotebook as _createNotebook,
  findNotebook as _findNotebook,
  updateNotebook as _updateNotebook,
  upsertNotebook as _upsertNotebook,
} from "@web/generated/shortcuts/notebook.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Notebook)
export class NotebookResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() notebook: Notebook) {
    return notebook._id;
  }

  @TypeGraphQL.Query(() => Notebook, { nullable: true })
  async notebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueNotebookArgs
  ) {
    return await _findNotebook(args);
  }

  @TypeGraphQL.Query(() => [Notebook], { nullable: false })
  async notebooks(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyNotebookArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await NotebookModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Notebook)
  async createNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookCreationArgs
  ) {
    const notebook = await _createNotebook(args);
    if (notebook) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: notebook.userId },
        { $push: { notebooks: { ...notebook } } }
      );
    }
    return notebook;
  }

  /*
  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async createManyNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebooksCreationArgs
  ): Promise<Notebook[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Notebook)
  async updateNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookUpdateArgs
  ) {
    return await _updateNotebook(args);
  }

  @TypeGraphQL.Mutation(() => Notebook)
  async upsertNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookUpsertionArgs
  ) {
    return await _upsertNotebook(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async updateNotebooks(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotebooks
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async updateNotebooksDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotebooks
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Notebook, { nullable: true })
  async deleteNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteNotebookArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async deleteManyNotebook(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyNotebookArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
