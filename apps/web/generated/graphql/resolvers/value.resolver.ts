/* Do not edit this file. It was generated programmatically. */

import {
  FindManyValueArgs,
  FindUniqueValueArgs,
  ValueCreationArgs,
  ValueUpdateArgs,
  ValueUpsertionArgs,
} from "@web/generated/graphql/args/value.args";
import Value from "@web/generated/graphql/types/Value";
import UserModel from "@web/generated/models/User";
import ValueModel from "@web/generated/models/Value";
import {
  createValue as _createValue,
  findValue as _findValue,
  updateValue as _updateValue,
  upsertValue as _upsertValue,
} from "@web/generated/shortcuts/value.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Value)
export class ValueResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() value: Value) {
    return value._id;
  }

  @TypeGraphQL.Query(() => Value, { nullable: true })
  async value(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueValueArgs
  ) {
    return await _findValue(args);
  }

  @TypeGraphQL.Query(() => [Value], { nullable: false })
  async values(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyValueArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await ValueModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Value)
  async createValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ValueCreationArgs
  ) {
    const value = await _createValue(args);
    if (value) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate({ _id: value.userId }, { $push: { values: { ...value } } });
    }
    return value;
  }

  /*
  @TypeGraphQL.Mutation(() => [Value], { nullable: false })
  async createManyValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ValuesCreationArgs
  ): Promise<Value[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Value)
  async updateValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ValueUpdateArgs
  ) {
    return await _updateValue(args);
  }

  @TypeGraphQL.Mutation(() => Value)
  async upsertValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ValueUpsertionArgs
  ) {
    return await _upsertValue(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Value], { nullable: false })
  async updateValues(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyValues
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Value], { nullable: false })
  async updateValuesDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyValues
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Value, { nullable: true })
  async deleteValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteValueArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Value], { nullable: false })
  async deleteManyValue(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyValueArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
