/* Do not edit this file. It was generated programmatically. */

import {
  FindManyIdentityArgs,
  FindUniqueIdentityArgs,
  IdentityCreationArgs,
  IdentityUpdateArgs,
  IdentityUpsertionArgs,
} from "@web/generated/graphql/args/identity.args";
import Identity from "@web/generated/graphql/types/Identity";
import IdentityModel from "@web/generated/models/Identity";
import {
  createIdentity as _createIdentity,
  findIdentity as _findIdentity,
  updateIdentity as _updateIdentity,
  upsertIdentity as _upsertIdentity,
} from "@web/generated/shortcuts/identity.shortcuts";
import type { GqlContext } from "@web/graphql/context";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import type { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Identity)
export class IdentityResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() identity: Identity) {
    return identity._id;
  }

  @TypeGraphQL.Query(() => Identity, { nullable: true })
  async identity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueIdentityArgs
  ) {
    return await _findIdentity(args);
  }

  @TypeGraphQL.Query(() => [Identity], { nullable: false })
  async identities(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyIdentityArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    return await IdentityModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Identity)
  async createIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityCreationArgs
  ) {
    return await _createIdentity(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async createManyIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentitiesCreationArgs
  ): Promise<Identity[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => Identity)
  async updateIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityUpdateArgs
  ) {
    return await _updateIdentity(args);
  }

  @TypeGraphQL.Mutation(() => Identity)
  async upsertIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityUpsertionArgs
  ) {
    return await _upsertIdentity(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async updateIdentities(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyIdentities
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async updateIdentitiesDistinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyIdentities
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Identity, { nullable: true })
  async deleteIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteIdentityArgs
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async deleteManyIdentity(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyIdentityArgs
  ) {
    throw new Error("Not implemented");
  }
  */
}
