/* Do not edit this file. It was generated programmatically. */

import { gql, MutationHookOptions } from "@apollo/client";
import { NotebookCreationArgs } from "@web/generated/graphql/args/notebook.args";
import {
  notebookFragment,
  NotebookFragment,
} from "@web/generated/graphql/fragments/notebook.fragment";
import {
  NotebookCreationInput,
  NotebookUpdateInput,
} from "@web/generated/graphql/inputs/notebook.inputs";
import { ObjectID } from "bson";

export const CREATE_NOTEBOOK = gql`
  mutation CreateNotebook($data: NotebookCreationInput!) {
    createNotebook(data: $data) {
      ...NotebookFragment
    }
  }
  ${notebookFragment}
`;

export const getOptimisticResponseForNotebookCreation = (
  data: NotebookCreationInput
): { createNotebook: NotebookFragment } => {
  const now = new Date();
  return {
    createNotebook: {
      __typename: "Notebook",
      id: new ObjectID().toHexString(),
      description: null,
      public: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingNotebook: MutationHookOptions<
  { createNotebook: NotebookFragment },
  NotebookCreationArgs
> = {
  update(cache, { data }) {
    const { createNotebook } = data || {};
    if (createNotebook) {
      const newNotebookRef = cache.writeFragment({
        data: createNotebook,
        fragment: gql`
          fragment NewNotebook on Notebook {
            ...NotebookFragment
          }
          ${notebookFragment}
        `,
        fragmentName: "NewNotebook",
      });
      cache.modify({
        id: `User:${createNotebook.userId}`,
        fields: {
          notebooks(existingNotebookRefs = []) {
            return [...existingNotebookRefs, newNotebookRef];
          },
        },
      });
      cache.modify({
        fields: {
          notebooks(existingNotebooks = []) {
            return [...existingNotebooks, newNotebookRef];
          },
        },
      });
    }
  },
};

export const UPDATE_NOTEBOOK = gql`
  mutation UpdateNotebook($where: NotebookWhereUniqueInput!, $data: NotebookUpdateInput!) {
    updateNotebook(where: $where, data: $data) {
      ...NotebookFragment
    }
  }
  ${notebookFragment}
`;

export const getOptimisticResponseForNotebookUpdate = (
  fragment: NotebookFragment,
  data: NotebookUpdateInput
) => {
  const now = new Date();
  return {
    updateNotebook: {
      __typename: "Notebook",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_NOTEBOOK = gql`
  mutation UpdateNotebook($where: NotebookWhereUniqueInput!, $data: NotebookCreationInput!) {
    upsertNotebook(where: $where, data: $data) {
      ...NotebookFragment
    }
  }
  ${notebookFragment}
`;

export const UPDATE_NOTEBOOKS = gql`
  mutation UpdateNotebooks($where: NotebookWhereInput!, $data: NotebookUpdateInput!) {
    updateNotebooks(where: $where, data: $data) {
      ...NotebookFragment
    }
  }
  ${notebookFragment}
`;

export const UPDATE_NOTEBOOKS_DISTINCTLY = gql`
  mutation UpdateNotebooksDistinctly($data: [NotebookUpdateInput!]!) {
    updateNotebooksDistinctly(data: $data) {
      ...NotebookFragment
    }
  }
  ${notebookFragment}
`;
