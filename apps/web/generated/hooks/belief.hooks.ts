/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import {
  CREATE_BELIEF,
  UPDATE_BELIEF,
  updateCacheAfterCreatingBelief,
} from "@web/graphql/generated/mutations/belief.mutations";
import { BeliefFragment } from "@web/graphql/generated/fragments/belief.fragment";
import { BeliefCreationArgs, BeliefUpdateArgs } from "@web/graphql/generated/args/belief.args";
import { useHandleMutation } from "@web/utils/data/mutation";
import { Payload, ArrayAction } from "@web/utils/data/reduction";
import { useEffect, useReducer, Dispatch } from "react";
import {
  beliefReducer,
  beliefsReducer,
  BeliefData,
  initializeBeliefData,
} from "@web/generated/reducers/belief.reducer";
import { useUser } from "@web/components/contexts/UserContext";
import {
  beliefCreationInputSchema,
  beliefUpdateInputSchema,
} from "@web/graphql/generated/schemas/belief.schemas";
import { getOptimisticResponseForBeliefCreation } from "@web/graphql/generated/mutations/belief.mutations";

type BeliefCreationMutationHookOptions = MutationHookOptions<
  { createBelief: BeliefFragment },
  BeliefCreationArgs
>;

export const useCreateBelief = (options?: BeliefCreationMutationHookOptions) => {
  return useHandleMutation<{ createBelief: BeliefFragment }, BeliefCreationArgs>(
    CREATE_BELIEF,
    { ...updateCacheAfterCreatingBelief, ...(options ?? {}) },
    beliefCreationInputSchema,
    getOptimisticResponseForBeliefCreation
  );
};

type BeliefUpdateMutationHookOptions = MutationHookOptions<
  { updateBelief: BeliefFragment },
  BeliefUpdateArgs
>;

export const useUpdateBelief = (options?: BeliefUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateBelief: BeliefFragment }, BeliefUpdateArgs>(
    UPDATE_BELIEF,
    options,
    beliefUpdateInputSchema
  );
};

export const useBeliefReducer = (
  data?: BeliefData
): [BeliefData, Dispatch<Payload<BeliefData>>] => {
  const { user } = useUser();
  const [beliefData, dispatchBeliefData] = useReducer(
    beliefReducer,
    data ?? {},
    initializeBeliefData
  );
  useEffect(() => {
    if (!user) return;
    if (!beliefData?.userId) {
      dispatchBeliefData({
        field: "init",
        value: initializeBeliefData(beliefData, user),
      });
    }
  }, [user, beliefData]);
  return [beliefData, dispatchBeliefData];
};

export const useBeliefsReducer = (
  data: BeliefFragment[]
): [BeliefFragment[], Dispatch<ArrayAction<BeliefFragment>>] => {
  return useReducer(beliefsReducer, data);
};
