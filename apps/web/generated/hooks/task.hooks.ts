/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import { TaskCreationArgs, TaskUpdateArgs } from "@web/generated/graphql/args/task.args";
import { TaskFragment } from "@web/generated/graphql/fragments/task.fragment";
import {
  CREATE_TASK,
  getOptimisticResponseForTaskCreation,
  updateCacheAfterCreatingTask,
  UPDATE_TASK,
} from "@web/generated/graphql/mutations/task.mutations";
import {
  taskCreationInputSchema,
  taskUpdateInputSchema,
} from "@web/generated/graphql/schemas/task.schemas";
import {
  initializeTaskData,
  TaskData,
  taskReducer,
  tasksReducer,
} from "@web/generated/reducers/task.reducer";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type TaskCreationMutationHookOptions = MutationHookOptions<
  { createTask: TaskFragment },
  TaskCreationArgs
>;

export const useCreateTask = (options?: TaskCreationMutationHookOptions) => {
  return useHandleMutation<{ createTask: TaskFragment }, TaskCreationArgs>(
    CREATE_TASK,
    { ...updateCacheAfterCreatingTask, ...(options ?? {}) },
    taskCreationInputSchema,
    getOptimisticResponseForTaskCreation
  );
};

type TaskUpdateMutationHookOptions = MutationHookOptions<
  { updateTask: TaskFragment },
  TaskUpdateArgs
>;

export const useUpdateTask = (options?: TaskUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateTask: TaskFragment }, TaskUpdateArgs>(
    UPDATE_TASK,
    { refetchQueries: ["GetUser"], ...(options ?? {}) },
    taskUpdateInputSchema
  );
};

export const useTaskReducer = (data?: TaskData): [TaskData, Dispatch<Payload<TaskData>>] => {
  const { user } = useUser();
  const [taskData, dispatchTaskData] = useReducer(taskReducer, data ?? {}, initializeTaskData);
  useEffect(() => {
    if (!user) return;
    if (!taskData?.userId) {
      dispatchTaskData({
        field: "init",
        value: initializeTaskData(taskData, user),
      });
    }
  }, [user, taskData]);
  return [taskData, dispatchTaskData];
};

export const useTasksReducer = (
  data: TaskFragment[]
): [TaskFragment[], Dispatch<ArrayAction<TaskFragment>>] => {
  return useReducer(tasksReducer, data);
};
