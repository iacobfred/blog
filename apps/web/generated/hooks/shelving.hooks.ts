/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import {
  initializeShelvingData,
  ShelvingData,
  shelvingReducer,
  shelvingsReducer,
} from "@web/generated/reducers/shelving.reducer";
import {
  ShelvingCreationArgs,
  ShelvingUpdateArgs,
} from "@web/graphql/generated/args/shelving.args";
import { ShelvingFragment } from "@web/graphql/generated/fragments/shelving.fragment";
import {
  CREATE_SHELVING,
  getOptimisticResponseForShelvingCreation,
  updateCacheAfterCreatingShelving,
  UPDATE_SHELVING,
} from "@web/graphql/generated/mutations/shelving.mutations";
import {
  shelvingCreationInputSchema,
  shelvingUpdateInputSchema,
} from "@web/graphql/generated/schemas/shelving.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useReducer } from "react";

type ShelvingCreationMutationHookOptions = MutationHookOptions<
  { createShelving: ShelvingFragment },
  ShelvingCreationArgs
>;

export const useCreateShelving = (options?: ShelvingCreationMutationHookOptions) => {
  return useHandleMutation<{ createShelving: ShelvingFragment }, ShelvingCreationArgs>(
    CREATE_SHELVING,
    { ...updateCacheAfterCreatingShelving, ...(options ?? {}) },
    shelvingCreationInputSchema,
    getOptimisticResponseForShelvingCreation
  );
};

type ShelvingUpdateMutationHookOptions = MutationHookOptions<
  { updateShelving: ShelvingFragment },
  ShelvingUpdateArgs
>;

export const useUpdateShelving = (options?: ShelvingUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateShelving: ShelvingFragment }, ShelvingUpdateArgs>(
    UPDATE_SHELVING,
    { refetchQueries: ["GetUser"], ...(options ?? {}) },
    shelvingUpdateInputSchema
  );
};

export const useShelvingReducer = (
  data?: ShelvingData
): [ShelvingData, Dispatch<Payload<ShelvingData>>] => {
  const [shelvingData, dispatchShelvingData] = useReducer(
    shelvingReducer,
    data ?? {},
    initializeShelvingData
  );
  return [shelvingData, dispatchShelvingData];
};

export const useShelvingsReducer = (
  data: ShelvingFragment[]
): [ShelvingFragment[], Dispatch<ArrayAction<ShelvingFragment>>] => {
  return useReducer(shelvingsReducer, data);
};
