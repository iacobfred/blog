/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { useUser } from "@web/components/contexts/UserContext";
import {
  CalendarEventData,
  calendarEventReducer,
  calendarEventsReducer,
  initializeCalendarEventData,
} from "@web/generated/reducers/calendarEvent.reducer";
import {
  CalendarEventCreationArgs,
  CalendarEventUpdateArgs,
} from "@web/graphql/generated/args/calendarEvent.args";
import { CalendarEventFragment } from "@web/graphql/generated/fragments/calendarEvent.fragment";
import {
  CREATE_CALENDAR_EVENT,
  getOptimisticResponseForCalendarEventCreation,
  updateCacheAfterCreatingCalendarEvent,
  UPDATE_CALENDAR_EVENT,
} from "@web/graphql/generated/mutations/calendarEvent.mutations";
import {
  calendarEventCreationInputSchema,
  calendarEventUpdateInputSchema,
} from "@web/graphql/generated/schemas/calendarEvent.schemas";
import { useHandleMutation } from "@web/utils/data/mutation";
import { ArrayAction, Payload } from "@web/utils/data/reduction";
import { Dispatch, useEffect, useReducer } from "react";

type CalendarEventCreationMutationHookOptions = MutationHookOptions<
  { createCalendarEvent: CalendarEventFragment },
  CalendarEventCreationArgs
>;

export const useCreateCalendarEvent = (options?: CalendarEventCreationMutationHookOptions) => {
  return useHandleMutation<
    { createCalendarEvent: CalendarEventFragment },
    CalendarEventCreationArgs
  >(
    CREATE_CALENDAR_EVENT,
    { ...updateCacheAfterCreatingCalendarEvent, ...(options ?? {}) },
    calendarEventCreationInputSchema,
    getOptimisticResponseForCalendarEventCreation
  );
};

type CalendarEventUpdateMutationHookOptions = MutationHookOptions<
  { updateCalendarEvent: CalendarEventFragment },
  CalendarEventUpdateArgs
>;

export const useUpdateCalendarEvent = (options?: CalendarEventUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateCalendarEvent: CalendarEventFragment }, CalendarEventUpdateArgs>(
    UPDATE_CALENDAR_EVENT,
    { refetchQueries: ["GetUser"], ...(options ?? {}) },
    calendarEventUpdateInputSchema
  );
};

export const useCalendarEventReducer = (
  data?: CalendarEventData
): [CalendarEventData, Dispatch<Payload<CalendarEventData>>] => {
  const { user } = useUser();
  const [calendarEventData, dispatchCalendarEventData] = useReducer(
    calendarEventReducer,
    data ?? {},
    initializeCalendarEventData
  );
  useEffect(() => {
    if (!user) return;
    if (!calendarEventData?.userId) {
      dispatchCalendarEventData({
        field: "init",
        value: initializeCalendarEventData(calendarEventData, user),
      });
    }
  }, [user, calendarEventData]);
  return [calendarEventData, dispatchCalendarEventData];
};

export const useCalendarEventsReducer = (
  data: CalendarEventFragment[]
): [CalendarEventFragment[], Dispatch<ArrayAction<CalendarEventFragment>>] => {
  return useReducer(calendarEventsReducer, data);
};
