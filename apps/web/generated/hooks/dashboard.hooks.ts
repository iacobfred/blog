/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import {
  CREATE_DASHBOARD,
  UPDATE_DASHBOARD,
  updateCacheAfterCreatingDashboard,
} from "@web/graphql/generated/mutations/dashboard.mutations";
import { DashboardFragment } from "@web/graphql/generated/fragments/dashboard.fragment";
import {
  DashboardCreationArgs,
  DashboardUpdateArgs,
} from "@web/graphql/generated/args/dashboard.args";
import { useHandleMutation } from "@web/utils/data/mutation";
import { Payload, ArrayAction } from "@web/utils/data/reduction";
import { useEffect, useReducer, Dispatch } from "react";
import {
  dashboardReducer,
  dashboardsReducer,
  DashboardData,
  initializeDashboardData,
} from "@web/generated/reducers/dashboard.reducer";
import { useUser } from "@web/components/contexts/UserContext";
import {
  dashboardCreationInputSchema,
  dashboardUpdateInputSchema,
} from "@web/graphql/generated/schemas/dashboard.schemas";
import { getOptimisticResponseForDashboardCreation } from "@web/graphql/generated/mutations/dashboard.mutations";

type DashboardCreationMutationHookOptions = MutationHookOptions<
  { createDashboard: DashboardFragment },
  DashboardCreationArgs
>;

export const useCreateDashboard = (options?: DashboardCreationMutationHookOptions) => {
  return useHandleMutation<{ createDashboard: DashboardFragment }, DashboardCreationArgs>(
    CREATE_DASHBOARD,
    { ...updateCacheAfterCreatingDashboard, ...(options ?? {}) },
    dashboardCreationInputSchema,
    getOptimisticResponseForDashboardCreation
  );
};

type DashboardUpdateMutationHookOptions = MutationHookOptions<
  { updateDashboard: DashboardFragment },
  DashboardUpdateArgs
>;

export const useUpdateDashboard = (options?: DashboardUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateDashboard: DashboardFragment }, DashboardUpdateArgs>(
    UPDATE_DASHBOARD,
    options,
    dashboardUpdateInputSchema
  );
};

export const useDashboardReducer = (
  data?: DashboardData
): [DashboardData, Dispatch<Payload<DashboardData>>] => {
  const { user } = useUser();
  const [dashboardData, dispatchDashboardData] = useReducer(
    dashboardReducer,
    data ?? {},
    initializeDashboardData
  );
  useEffect(() => {
    if (!user) return;
    if (!dashboardData?.userId) {
      dispatchDashboardData({
        field: "init",
        value: initializeDashboardData(dashboardData, user),
      });
    }
  }, [user, dashboardData]);
  return [dashboardData, dispatchDashboardData];
};

export const useDashboardsReducer = (
  data: DashboardFragment[]
): [DashboardFragment[], Dispatch<ArrayAction<DashboardFragment>>] => {
  return useReducer(dashboardsReducer, data);
};
