/* Do not edit this file. It was generated programmatically. */
// import Task from "@web/generated/graphql/types/Task";
import { TaskFragment } from "@web/generated/graphql/fragments/task.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { TaskCreationInput } from "@web/generated/graphql/inputs/task.inputs";
import { initializeTaskRank } from "@web/graphql/schema/initializers";
import { ID } from "@web/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@web/utils/data/reduction";

export interface TaskData extends Partial<TaskCreationInput> {
  id?: ID;
}
// export type TaskData = InputData<Task>;
// export type InitialTaskData = InitialData<Task, "rank" | "userId">;

export function initializeTaskData(
  data: Partial<TaskData>,
  user?: UserFragment | null | undefined
): Partial<TaskData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    title: "",
    rank: initializeTaskRank(user),
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function taskReducer(state: TaskData, payload: Payload<TaskData>) {
  if (payload.field === "init") return initializeTaskData(payload.value as Partial<TaskData>);
  return { ...state, [payload.field]: payload.value };
}

export function tasksReducer(state: TaskFragment[], action: ArrayAction<TaskFragment>) {
  return arrayReducer<TaskFragment>(state, action);
}
