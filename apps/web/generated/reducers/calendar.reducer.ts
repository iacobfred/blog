/* Do not edit this file. It was generated programmatically. */
// import Calendar from "@web/generated/graphql/types/Calendar";
import { CalendarFragment } from "@web/generated/graphql/fragments/calendar.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { CalendarCreationInput } from "@web/generated/graphql/inputs/calendar.inputs";
import { ID } from "@web/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@web/utils/data/reduction";

export interface CalendarData extends Partial<CalendarCreationInput> {
  id?: ID;
}
// export type CalendarData = InputData<Calendar>;
// export type InitialCalendarData = InitialData<Calendar, "rank" | "userId">;

export function initializeCalendarData(
  data: Partial<CalendarData>,
  user?: UserFragment | null | undefined
): Partial<CalendarData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function calendarReducer(state: CalendarData, payload: Payload<CalendarData>) {
  if (payload.field === "init")
    return initializeCalendarData(payload.value as Partial<CalendarData>);
  return { ...state, [payload.field]: payload.value };
}

export function calendarsReducer(state: CalendarFragment[], action: ArrayAction<CalendarFragment>) {
  return arrayReducer<CalendarFragment>(state, action);
}
