/* Do not edit this file. It was generated programmatically. */
// import Goal from "@web/generated/graphql/types/Goal";
import { GoalFragment } from "@web/generated/graphql/fragments/goal.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { GoalCreationInput } from "@web/generated/graphql/inputs/goal.inputs";
import { ID } from "@web/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@web/utils/data/reduction";

export interface GoalData extends Partial<GoalCreationInput> {
  id?: ID;
}
// export type GoalData = InputData<Goal>;
// export type InitialGoalData = InitialData<Goal, "rank" | "userId">;

export function initializeGoalData(
  data: Partial<GoalData>,
  user?: UserFragment | null | undefined
): Partial<GoalData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    description: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function goalReducer(state: GoalData, payload: Payload<GoalData>) {
  if (payload.field === "init") return initializeGoalData(payload.value as Partial<GoalData>);
  return { ...state, [payload.field]: payload.value };
}

export function goalsReducer(state: GoalFragment[], action: ArrayAction<GoalFragment>) {
  return arrayReducer<GoalFragment>(state, action);
}
