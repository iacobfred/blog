/* Do not edit this file. It was generated programmatically. */
import { IdentityFragment } from "@web/generated/graphql/fragments/identity.fragment";
import { UserFragment } from "@web/generated/graphql/fragments/user.fragment";
import { Identity } from "@web/generated/graphql/types";
import { ArrayAction, arrayReducer, Payload } from "@web/hooks/reduction";
import { Data } from "@web/types/data";

export type IdentityData = Data<Identity>;

export function initializeIdentityData(
  data: Partial<IdentityData>,
  user?: UserFragment | null | undefined
): Partial<IdentityData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function identityReducer(state: IdentityData, payload: Payload<IdentityData>) {
  if (payload.field === "init")
    return initializeIdentityData(payload.value as Partial<IdentityData>);
  return { ...state, [payload.field]: payload.value };
}

export function identitiesReducer(
  state: IdentityFragment[],
  action: ArrayAction<IdentityFragment>
) {
  return arrayReducer<IdentityFragment>(state, action);
}
