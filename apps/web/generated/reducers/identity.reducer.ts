/* Do not edit this file. It was generated programmatically. */
// import Identity from "@web/graphql/generated/types/Identity";
import { IdentityFragment } from "@web/graphql/generated/fragments/identity.fragment";
import { UserFragment } from "@web/graphql/generated/fragments/user.fragment";
import { IdentityCreationInput } from "@web/graphql/generated/inputs/identity.inputs";
import { ID } from "@web/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@web/utils/data/reduction";

export interface IdentityData extends Partial<IdentityCreationInput> {
  id?: ID;
}
// export type IdentityData = InputData<Identity>;
// export type InitialIdentityData = InitialData<Identity, "rank" | "userId">;

export function initializeIdentityData(
  data: Partial<IdentityData>,
  user?: UserFragment | null | undefined
): Partial<IdentityData> {
  const userId = user?.id;
  if (!userId) return data;
  return {
    userId,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function identityReducer(state: IdentityData, payload: Payload<IdentityData>) {
  if (payload.field === "init")
    return initializeIdentityData(payload.value as Partial<IdentityData>);
  return { ...state, [payload.field]: payload.value };
}

export function identitiesReducer(
  state: IdentityFragment[],
  action: ArrayAction<IdentityFragment>
) {
  return arrayReducer<IdentityFragment>(state, action);
}
