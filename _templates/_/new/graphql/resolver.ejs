---
to: apps/web/generated/graphql/resolvers/<%= name %>.resolver.ts
force: true
---
<% names = h.inflection.pluralize(name); -%>
<% Names = h.inflection.pluralize(Name); -%>
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import <%= Name %> from "@web/generated/graphql/types/<%= Name %>";
import <%= Name %>Model from "@web/generated/models/<%= Name %>";
import {
  <%= Name %>CreationArgs,
  <%= Names %>CreationArgs,
  Delete<%= Name %>Args,
  DeleteMany<%= Name %>Args,
  FindMany<%= Name %>Args,
  FindUnique<%= Name %>Args,
  <%= Name %>UpdateArgs,
  ArgsForUpdatingMany<%= Names %>,
  <%= Name %>UpsertionArgs,
} from "@web/generated/graphql/args/<%= name %>.args";
import type { GqlContext } from "@web/graphql/context";
import type { GraphQLResolveInfo } from "graphql";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { ObjectIdScalar } from "@web/graphql/schema/scalars";
import {
  create<%= Name %> as _create<%= Name %>,
  update<%= Name %> as _update<%= Name %>,
  upsert<%= Name %> as _upsert<%= Name %>,
  find<%= Name %> as _find<%= Name %>,
} from "@web/generated/shortcuts/<%= name %>.shortcuts";
<% if (Object.keys(fields).includes("userId")) { -%>
import UserModel from "@web/generated/models/User";
<% } -%>

@TypeGraphQL.Resolver(() => <%= Name %>, )
export class <%= Name %>Resolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() <%= name %>: <%= Name %>) {
    return <%= name %>._id;
  }

  @TypeGraphQL.Query(() => <%= Name %>, { nullable: true })
  async <%= name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUnique<%= Name %>Args
  ) {
    return await _find<%= Name %>(args);
  }

  @TypeGraphQL.Query(() => [<%= Name %>], { nullable: false })
  async <%= names %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindMany<%= Name %>Args
  ) {
    const filter = convertFilterForMongo(args.where);
    return await <%= Name %>Model.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async create<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: <%= Name %>CreationArgs
  ) {
    return await _create<%= Name %>(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async createMany<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: <%= Names %>CreationArgs
  ): Promise<<%= Name %>[]> {
    throw new Error("Not implemented");
  }
  */

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async update<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: <%= Name %>UpdateArgs
  ) {
    return await _update<%= Name %>(args);
  }

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async upsert<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: <%= Name %>UpsertionArgs
  ) {
    return await _upsert<%= Name %>(args);
  }

  /*
  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async update<%= Names %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingMany<%= Names %>
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async update<%= Names %>Distinctly(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingMany<%= Names %>
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => <%= Name %>, { nullable: true })
  async delete<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: Delete<%= Name %>Args
  ) {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async deleteMany<%= Name %>(
    @TypeGraphQL.Ctx() _ctx: GqlContext,
    @TypeGraphQL.Info() _info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteMany<%= Name %>Args
  ) {
    throw new Error("Not implemented");
  }
  */
}
