---
to: apps/web/generated/graphql/inputs/<%= name %>.inputs.ts
force: true
---
<% var filteredFields = Object.fromEntries(Object.entries(selectableFields).filter(([fieldName, field]) => !modelImports.includes(h.changeCase.pascal(h.inflection.singularize(fieldName))))); -%>
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import { DateTimeScalar, ObjectIdScalar, Int, JSONResolver } from "@web/graphql/schema/scalars";
import { ID, WhereInput, WhereUniqueInput } from "@web/graphql/schema/types";
<% for (var [fieldName, field] of Object.entries(fields).filter(([,field]) => (field.type === "Map" && field.shape))) { -%>
import { <%= h.changeCase.pascal(fieldName) %> } from "@web/generated/models/<%= Name %>/types";
<% } -%>

@TypeGraphQL.InputType()
export class <%= Name %>CreationInput {
<% for (var [fieldName, field] of Object.entries(filteredFields)) { -%>
  // Note: `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => <%- getConstructor(field, { ctx: "gql" }) %>, { nullable: <%- field.required ? "false" : "true" %> })
  <%= fieldName %><%- field.required ? "!" : "?" %>: <%- (field.type === "Map" && field.shape) ? h.changeCase.pascal(fieldName) : getType(field) %><%- (field.nullable === false || field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %><%- !field.required ? " | undefined" : "" %>;

<% } -%>
  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@TypeGraphQL.InputType()
export class <%= Name %>UpdateInput {
<% for (var [fieldName, field] of Object.entries(filteredFields)) { -%>
  @TypeGraphQL.Field(() => <%- getConstructor(field, { ctx: "gql" }) %>, { nullable: true })
  <%- fieldName %>?: <%- (field.type === "Map" && field.shape) ? h.changeCase.pascal(fieldName) : getType(field) %><%- (field.nullable === false || field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %> | undefined;

<% } -%>
  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: Date | null | undefined;
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereInput extends WhereInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;
<% for (var [fieldName, field] of Object.entries(filteredFields)) { %>
  @TypeGraphQL.Field(() => <%- getConstructor(field, { ctx: "gql" }) %>, { nullable: true })
  <%- fieldName %>?: <%- getType(field) %><%- !field.required ? "" : " | null" %> | undefined;
<% } -%>
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereUniqueInput extends WhereUniqueInput {
<% if (Object.entries(filteredFields).filter(([, field]) => !!field.unique).length) { -%>
<% for (var [fieldName, field] of Object.entries(filteredFields).filter(([, field]) => !!field.unique)) { -%>
  @TypeGraphQL.Field(() => <%- getConstructor(field, { ctx: "gql" }) %>, { nullable: true })
  <%- fieldName %>?: <%- getType(field) %><%- !field.required ? "" : " | null" %> | undefined;
<% } -%>
<% } else { -%>
  // @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  // id!: ID;
<% } -%>
}
