---
to: apps/web/generated/graphql/fragments/<%= name %>.fragment.ts
force: true
---
<% var [refFieldEntries, nonRefFieldEntries] = partition(Object.entries(selectableFields), ([fieldName, field]) => (!!field.ref && field.type === "Array")); %>
/* Do not edit this file. It was generated programmatically. */

import { gql } from "@apollo/client";
import { Fragment } from "@web/graphql/schema/types";
import <%= Name %> from "@web/generated/graphql/types/<%= Name %>";
<% for (var [,field] of refFieldEntries) { -%>
import { <%= h.changeCase.camel(field.ref) %>Fragment, <%= h.changeCase.pascal(field.ref) %>Fragment } from "@web/generated/graphql/fragments/<%= h.changeCase.camel(field.ref) %>.fragment";
<% } -%>

export const <%= name %>Fragment = gql`
  fragment <%= Name %>Fragment on <%= Name %> {
    __typename
    id
<% for (var fieldName of Object.keys(selectableFields)) { -%>
    <%= fieldName %><%= modelImports.includes(h.changeCase.pascal(h.inflection.singularize(fieldName))) ? ` { ...${h.changeCase.pascal(h.inflection.singularize(fieldName))}Fragment }` : "" %>
<% } -%>
    createdAt
    updatedAt
    archivedAt
  }
<% for (var modelImport of modelImports) { -%>
  ${<%= h.changeCase.camel(modelImport) %>Fragment}
<% } -%>
`;

export type <%= Name %>Fragment = NoUndefinedField<
  Pick<
    Fragment<<%= Name %>>,
    | "__typename"
    | "id"
    | "createdAt"
    | "updatedAt"
    | "archivedAt"
<% for (var [fieldName,] of nonRefFieldEntries) { -%>
    | "<%= fieldName %>"
<% } -%>
  >
><% if (refFieldEntries.length) { %> & {
<% for (var [fieldName, field] of refFieldEntries) { -%>
  <%= fieldName %>: <%= h.changeCase.pascal(field.ref) %>Fragment<% if (field.type === "Array") { %>[]<% } %>;
<% } -%>
}<% } %>;
