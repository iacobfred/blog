---
to: graphql/schema/generated/mutations/<%= name %>.mutations.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import { gql, MutationHookOptions } from "@apollo/client";
import { <%= name %>Fragment, <%= Name %>Fragment } from "@/graphql/schema/generated/fragments/<%= name %>.fragment";
import { <%= Name %>CreationArgs } from "@/graphql/schema/generated/args/<%= name %>.args";
import { <%= Name %>CreationInput, <%= Name %>UpdateInput } from "@/graphql/schema/generated/inputs/<%= name %>.inputs";

export const CREATE_<%= h.changeCase.constantCase(name) %> = gql`
  mutation Create<%= Name %>($data: <%= Name %>CreationInput!) {
    create<%= Name %>(data: $data) {
      ...<%= Name %>Fragment
    }
  }
  ${<%= name %>Fragment}
`;

export const getOptimisticResponseFor<%= Name %>Creation = (data: <%= Name %>CreationInput): { create<%= Name %>: <%= Name %>Fragment } => {
  const now = new Date();
  return {
    create<%= Name %>: {
      __typename: "<%= Name %>",
      id: "tmp-id",
<% for (var [fieldName,] of Object.entries(selectableFields).filter(([,field]) => !field.required)) { -%>
      <%= fieldName %>: null,
<% } -%>
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    }
  };
};

export const updateCacheAfterCreating<%= Name %>: MutationHookOptions<{ create<%= Name %>: <%= Name %>Fragment }, <%= Name %>CreationArgs> = {
  update(cache, { data }) {
    const { create<%= Name %> } = data || {};
    if (create<%= Name %>) {
      const new<%= Name %>Ref = cache.writeFragment({
        data: create<%= Name %>,
        fragment: gql`
          fragment New<%= Name %> on <%= Name %> {
            ...<%= Name %>Fragment
          }
          ${<%= name %>Fragment}
        `,
        fragmentName: "New<%= Name %>",
      });
<% if (Object.keys(fields).includes("userId")) { -%>
      cache.modify({
        id: `User:${create<%= Name %>.userId}`,
        fields: {
          <%= name %>s(existing<%= Name %>Refs = []) {
            return [...existing<%= Name %>Refs, new<%= Name %>Ref];
          },
        },
      });
<% } -%>
      cache.modify({
        fields: {
          <%= h.inflection.pluralize(name) %>(existing<%= h.inflection.pluralize(Name) %> = []) {
            return [...existing<%= h.inflection.pluralize(Name) %>, new<%= Name %>Ref];
          },
        },
      });
    }
  },
}

export const UPDATE_<%= h.changeCase.constantCase(name) %> = gql`
  mutation Update<%= Name %>($where: <%= Name %>WhereUniqueInput!, $data: <%= Name %>UpdateInput!) {
    update<%= Name %>(where: $where, data: $data) {
      ...<%= Name %>Fragment
    }
  }
  ${<%= name %>Fragment}
`;

export const getOptimisticResponseFor<%= Name %>Update = (fragment: <%= Name %>Fragment, data: <%= Name %>UpdateInput) => {
  const now = new Date();
  return {
    update<%= Name %>: {
      __typename: "<%= Name %>",
      ...fragment,
      ...data,
      updatedAt: now,
    }
  };
};

export const UPSERT_<%= h.changeCase.constantCase(name) %> = gql`
  mutation Update<%= Name %>($where: <%= Name %>WhereUniqueInput!, $data: <%= Name %>CreationInput!) {
    upsert<%= Name %>(where: $where, data: $data) {
      ...<%= Name %>Fragment
    }
  }
  ${<%= name %>Fragment}
`;

export const UPDATE_<%= h.changeCase.constantCase(h.inflection.pluralize(name)) %> = gql`
  mutation Update<%= h.inflection.pluralize(Name) %>($where: <%= Name %>WhereInput!, $data: <%= Name %>UpdateInput!) {
    update<%= h.inflection.pluralize(Name) %>(where: $where, data: $data) {
      ...<%= Name %>Fragment
    }
  }
  ${<%= name %>Fragment}
`;

export const UPDATE_<%= h.changeCase.constantCase(h.inflection.pluralize(name)) %>_DISTINCTLY = gql`
  mutation Update<%= h.inflection.pluralize(Name) %>Distinctly($data: [<%= Name %>UpdateInput!]!) {
    update<%= h.inflection.pluralize(Name) %>Distinctly(data: $data) {
      ...<%= Name %>Fragment
    }
  }
  ${<%= name %>Fragment}
`;
