---
to: graphql/generated/reducers/<%= name %>.reducer.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */
// import { <%= Name %> } from "@/graphql/generated/models/<%= name %>.model";
import { <%= Name %>CreationInput } from "@/graphql/generated/inputs/<%= name %>.inputs";
import { ID } from "@/graphql/schema/types";
import { Payload } from "@/utils/data";
<% requiredFields = Object.fromEntries(Object.entries(selectableFields).filter(([fieldName, field]) => field.required)); -%>
<% requireUserId = Object.entries(requiredFields).some(([fieldName, field]) => fieldName === "userId"); -%>

export type <%= Name %>Data = <%= Name %>CreationInput & { id?: ID };
// export type <%= Name %>Data = InputData<<%= Name %>>;
// export type Initial<%= Name %>Data = InitialData<<%= Name %>, "rank" | "userId">;
export type Partial<%= Name %>Data = <%- requireUserId ? "{ userId: ID } & " : "" %>Partial<<%= Name %>Data>

export function initialize<%= Name %>Data(data: Partial<%= Name %>Data): <%= Name %>Data {
  return {
<% for (var [fieldName, field] of Object.entries(requiredFields).filter(([, field]) => field.type === "String")) { -%>
    <%- fieldName %>: "",
<% } -%>
<% for (var [fieldName, field] of Object.entries(requiredFields).filter(([, field]) => field.type.includes("["))) { -%>
    <%- fieldName %>: [],
<% } -%>
    ...data,
  };
}

export function <%= name %>DataReducer(state: <%= Name %>Data, payload: Payload<<%= Name %>Data>) {
  if (payload.field === "init") return initialize<%= Name %>Data(payload.value as Partial<%= Name %>Data);
  return { ...state, [payload.field]: payload.value };
}
