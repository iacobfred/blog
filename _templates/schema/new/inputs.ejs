---
to: graphql/generated/inputs/<%= name %>.inputs.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import * as Scalars from "@/graphql/schema/scalars";
import * as Types from "@/graphql/schema/types";
import { ID, WhereInput, WhereUniqueInput } from "@/graphql/schema/types";
<% var filteredFields = Object.fromEntries(Object.entries(selectableFields).filter(([fieldName, field]) => !modelImports.includes(h.changeCase.pascal(h.inflection.singularize(fieldName))))); -%>

@TypeGraphQL.InputType()
export class <%= Name %>CreationInput {
<% for (var [fieldName, field] of Object.entries(filteredFields)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%- field.typeCast %>, { nullable: <%- field.required ? "false" : "true" %> })
  <%= fieldName %><%- field.required ? "!" : "?" %>: Types.<%- field.type %><%- (field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %><%- !field.required ? " | undefined" : "" %>;

<% } -%>
  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  archivedAt?: Types.DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class <%= Name %>UpdateInput {
<% for (var [fieldName, field] of Object.entries(filteredFields)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%- field.typeCast %>, { nullable: true })
  <%- fieldName %>?: Types.<%- field.type %><%- (field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %> | undefined;
  
<% } -%>
  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  archivedAt?: Types.DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereInput extends WhereInput {
  @TypeGraphQL.Field(() => Scalars.ObjectIdScalar, { nullable: true })
  id?: ID | undefined;
<% for (var [fieldName, field] of Object.entries(filteredFields)) { %>
  @TypeGraphQL.Field(() => Scalars.<%- field.typeCast %>, { nullable: true })
  <%- fieldName %>?: Types.<%- field.type %><%- !field.required ? "" : " | null" %> | undefined;
<% } -%>
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereUniqueInput extends WhereUniqueInput {
<% if (Object.entries(filteredFields).filter(([, field]) => !!field.unique).length) { -%>
<% for (var [fieldName, field] of Object.entries(filteredFields).filter(([, field]) => !!field.unique)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%- field.typeCast %>, { nullable: true })
  <%- fieldName %>?: Types.<%- field.type %><%- !field.required ? "" : " | null" %> | undefined;
<% } -%>
<% } else { -%>
  // @TypeGraphQL.Field(() => Scalars.ObjectIdScalar, { nullable: false })
  // id!: ID;
<% } -%>
}
