---
to: graphql/schema/generated/inputs/<%= name %>.inputs.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import * as Scalars from "@/graphql/schema/scalars";
import * as Types from "@/graphql/schema/types";
import { ID } from "@/graphql/schema/types";
<% var filteredFields = Object.fromEntries(Object.entries(selectableFields).filter(([fieldName, field]) => !modelImports.includes(h.changeCase.pascal(h.inflection.singularize(fieldName))))); %>

@TypeGraphQL.InputType()
export class <%= Name %>CreateInput {
<% for (var fieldName of Object.keys(filteredFields)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%= fields[fieldName].typeCast %>, { nullable: <%= fields[fieldName].required ? "false" : "true" %> })
  <%= fieldName %><%= fields[fieldName].required ? "!" : "?" %>: Types.<%= fields[fieldName].type %><%= fields[fieldName].required ? "" : " | null" %><%= !fields[fieldName].required ? " | undefined" : "" %>;

<% } -%>
}

@TypeGraphQL.InputType()
export class <%= Name %>UpdateInput {
<% for (var fieldName of Object.keys(filteredFields)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%= fields[fieldName].typeCast %>, { nullable: true })
  <%= fieldName %>?: Types.<%= fields[fieldName].type %><%= fields[fieldName].required ? "" : " | null" %> | undefined;
  
<% } -%>
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereInput {
  @TypeGraphQL.Field(() => Scalars.ObjectIdScalar, { nullable: true })
  id?: ID | undefined;
<% for (var [fieldName, field] of Object.entries(filteredFields)) { %>
  @TypeGraphQL.Field(() => Scalars.<%= fields[fieldName].typeCast %>, { nullable: true })
  <%= fieldName %>?: Types.<%= fields[fieldName].type %><%= !fields[fieldName].required ? "" : " | null" %> | undefined;
<% } -%>
}

@TypeGraphQL.InputType()
export class <%= Name %>WhereUniqueInput {
  @TypeGraphQL.Field(() => Scalars.ObjectIdScalar, { nullable: true })
  id?: ID | undefined;<% if (Object.entries(filteredFields).filter(([, field]) => !!field.unique).length) { %>

<% for (var [fieldName, field] of Object.entries(filteredFields).filter(([, field]) => !!field.unique)) { -%>
  @TypeGraphQL.Field(() => Scalars.<%= fields[fieldName].typeCast %>, { nullable: true })
  <%= fieldName %>?: Types.<%= fields[fieldName].type %><%= !fields[fieldName].required ? "" : " | null" %> | undefined;
  <% } %>
<% } %>%>
}
