---
to: graphql/generated/types/<%= Name %>/index.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import { ObjectIdScalar, DateTimeScalar, Int, JSONResolver } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { prop as Property, pre, post, ModelOptions } from "@typegoose/typegoose";
import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
<% for (var model of modelImports) { -%>
import <%= h.changeCase.pascal(model) %> from "@/graphql/generated/types/<%= h.changeCase.pascal(model) %>";
<% } -%>
import { preSave, postSave } from "./hooks";
<% for (var [fieldName, field] of Object.entries(fields).filter(([,field]) => (field.type === "Map" && field.shape))) { -%>

export type <%= h.changeCase.pascal(fieldName) %> = {
<% for (var [key, value] of Object.entries(field.shape)) { -%>
  <%= key %><%- value.required ? "" : "?" %>: <%- typeMap[value.type]?.type %><%- field.required ? "" : " | null" %>;
<% } -%>
};
<% } -%>

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<<%= Name %>>("save", preSave)
@post<<%= Name %>>("save", postSave)
@post<<%= Name %>>(
  "findOneAndUpdate",
  async function (result) {
    const rawResult = result as unknown as {
      value: typeof result;
      lastErrorObject: {
        updatedExisting: boolean;
      }
    };
    if (!rawResult.lastErrorObject || rawResult.lastErrorObject?.updatedExisting) return;
    return postSave(rawResult.value);
  }
)
export default class <%= Name %> extends Model {
<% for (var [fieldName, field] of Object.entries(fields)) { -%>
<% var useModelType = modelImports.includes(`${field.type}`) || modelImports.includes(`${field.typeArg}`); -%>
  @TypeGraphQL.Field(() => <%- getConstructor(field) %>, { nullable: <%- field.required ? "false" : "true" %>})
  @Property({ <%- (field.type === "String" || field.type === "Boolean") ? `type: () => ${getConstructor(field)}, ` : "" %>required: <%- field.required %><%- field.unique ? ", unique: true" : "" %><%- field.select === false ? ", select: false" : "" %><%- typeof field.default !== "undefined" ? `, default: ${typeof field.default === "string" ? field.default : JSON5.stringify(field.default)}` : field.required ? "" : `, default: null` %> })
  <%= fieldName %><%- field.required ? "!" : "?" %>: <%- field.shape ? h.changeCase.pascal(fieldName) : getType(field) %><%- (field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %>;

<% } -%>}
