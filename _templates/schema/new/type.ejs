---
to: apps/web/generated/graphql/types/<%= Name %>/index.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import { ObjectIdScalar, DateTimeScalar, Int, JSONResolver } from "@web/graphql/schema/scalars";
import { Model } from "@web/graphql/schema/types";
<% for (var model of modelImports) { -%>
import <%= h.changeCase.pascal(model) %> from "@web/generated/graphql/types/<%= h.changeCase.pascal(model) %>";
<% } -%>
<% for (var [fieldName, field] of Object.entries(fields).filter(([,field]) => (field.type === "Map" && field.shape))) { -%>
import { <%= h.changeCase.pascal(fieldName) %> } from "@web/generated/models/<%= Name %>/types";
<% } -%>

@TypeGraphQL.ObjectType()
export class <%= Name %> extends Model {
<% for (var [fieldName, field] of Object.entries(fields)) { -%>
<% var useModelType = modelImports.includes(`${field.type}`) || modelImports.includes(`${field.typeArg}`); -%>
<% var nonNullable = field.required || (typeof field.default !== "undefined" && field.nullable === false); -%>
  // `nullable` in TypeGraphQL actually refers to whether the input is optional.
  // https://typegraphql.com/docs/0.17.2/types-and-fields.html
  @TypeGraphQL.Field(() => <%- getConstructor(field, { ctx: "gql" }) %>, { nullable: <%- field.required ? "false" : "true" %>})
  <%= fieldName %><%- nonNullable ? "!" : "?" %>: <%- field.shape ? h.changeCase.pascal(fieldName) : getType(field) %><%- (nonNullable || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %>;

<% } -%>}

export default <%= Name %>;
