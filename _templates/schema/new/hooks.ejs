---
to: graphql/generated/hooks/<%= name %>.hooks.ts
force: true
---
<% NAME = h.changeCase.constantCase(name); -%>
/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { 
  CREATE_<%= NAME %>,
  UPDATE_<%= NAME %>,
  updateCacheAfterCreating<%= Name %>,
} from "@/graphql/generated/mutations/<%= name %>.mutations";
import { <%= Name %>Fragment } from "@/graphql/generated/fragments/<%= name %>.fragment";
import { <%= Name %>CreationArgs, <%= Name %>UpdateArgs } from "@/graphql/generated/args/<%= name %>.args";
import { useHandleMutation } from "@/utils/data/mutation";
import { Payload } from "@/utils/data/reduction";
import { useEffect, useReducer, Dispatch } from "react";
import { 
  <%= name %>Reducer,
  <%= Name %>Data,
  initialize<%= Name %>Data,
} from "@/graphql/generated/reducers/<%= name %>.reducer";
<% useDefinition = Object.entries(fields).some(([, field]) => !!field.initialize); -%>
<% useUser = Object.keys(fields).includes("userId") || Object.entries(fields).some(([, field]) => field.initialize); -%>
import { useUser } from "@/components/contexts/UserContext";
import { <%= name %>CreationInputSchema, <%= name %>UpdateInputSchema } from "@/graphql/generated/schemas/<%= name %>.schemas";
import {
  getOptimisticResponseFor<%= Name %>Creation,
  getOptimisticResponseFor<%= Name %>Update,
} from "@/graphql/generated/mutations/<%= name %>.mutations";

type <%= Name %>CreationMutationHookOptions = MutationHookOptions<
  { create<%= Name %>: <%= Name %>Fragment },
  <%= Name %>CreationArgs
>;

export const useCreate<%= Name %> = (options?: <%= Name %>CreationMutationHookOptions) => {
  return useHandleMutation<
    { create<%= Name %>: <%= Name %>Fragment },
    <%= Name %>CreationArgs
  >(
    CREATE_<%= NAME %>,
    { ...updateCacheAfterCreating<%= Name %>, ...(options ?? {}) },
    <%= name %>CreationInputSchema,
    getOptimisticResponseFor<%= Name %>Creation,
  );
}

type <%= Name %>UpdateMutationHookOptions = MutationHookOptions<
  { update<%= Name %>: <%= Name %>Fragment },
  <%= Name %>UpdateArgs
>;

export const useUpdate<%= Name %> = (options?: <%= Name %>UpdateMutationHookOptions) => {
  return useHandleMutation<
    { update<%= Name %>: <%= Name %>Fragment },
    <%= Name %>UpdateArgs
  >(
    UPDATE_<%= NAME %>, 
    options,
    <%= name %>UpdateInputSchema,
  );
}

export const use<%= Name %>Reducer = (data?: <%= Name %>Data): [<%= Name %>Data, Dispatch<Payload<<%= Name %>Data>>] => {
<% if (useUser) { -%>
  const { user } = useUser();
<% } -%>
  const starterData = data ?? {};
  const initializedData = initialize<%= Name %>Data(
    starterData,
<% if (useUser) { -%>
    user
<% } -%>
  );
  const [<%= name %>Data, dispatch<%= Name %>Data] = useReducer(
    <%= name %>Reducer,
    initializedData,
    initialize<%= Name %>Data,
  );
<% if (useUser) { -%>
  useEffect(() => {
    if (user?.id && !<%= name %>Data?.userId) {
      dispatch<%= Name %>Data({
        field: "init",
        value: initialize<%= Name %>Data(<%= name %>Data, user),
      });
    }
  }, [user, <%= name %>Data]);
<% } -%>
  return [<%= name %>Data, dispatch<%= Name %>Data];
}
