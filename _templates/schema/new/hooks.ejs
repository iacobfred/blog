---
to: graphql/generated/hooks/<%= name %>.hooks.ts
force: true
---
<% NAME = h.changeCase.constantCase(name); -%>
/* Do not edit this file. It was generated programmatically. */

import { MutationHookOptions } from "@apollo/client";
import { 
  CREATE_<%= NAME %>,
  UPDATE_<%= NAME %>,
  updateCacheAfterCreating<%= Name %>,
} from "@/graphql/generated/mutations/<%= name %>.mutations";
import { <%= Name %>Fragment } from "@/graphql/generated/fragments/<%= name %>.fragment";
import { <%= Name %>CreationArgs, <%= Name %>UpdateArgs } from "@/graphql/generated/args/<%= name %>.args";
import { useHandleMutation, Payload } from "@/utils/data";
import { useEffect, useReducer, Dispatch } from "react";
import { 
  <%= name %>DataReducer,
  <%= Name %>Data,
  initialize<%= Name %>Data,
} from "@/graphql/generated/reducers/<%= name %>.reducer";
<% useDefinition = Object.entries(fields).some(([, field]) => !!field.initialize); -%>
<% useUser = Object.keys(fields).includes("userId") || Object.entries(fields).some(([, field]) => field.initializer); -%>
<% if (useUser) { -%>
import { useUser } from "@/components/contexts/UserContext";
<% } -%>
<% Object.entries(fields).filter(([, field]) => !!field.initialize).forEach(([fieldName,]) => { -%>
import { initialize<%= Name %><%= h.inflection.titleize(fieldName) %> } from "@/graphql/schema/initializers";
<% }); -%>

type <%= Name %>CreationMutationHookOptions = MutationHookOptions<
  { create<%= Name %>: <%= Name %>Fragment },
  <%= Name %>CreationArgs
>;

export const useCreate<%= Name %> = (options?: <%= Name %>CreationMutationHookOptions) => {
  return useHandleMutation<
    { create<%= Name %>: <%= Name %>Fragment },
    <%= Name %>CreationArgs
  >(CREATE_<%= NAME %>, {
    ...updateCacheAfterCreating<%= Name %>,
    ...(options ?? {}),
  });
}

type <%= Name %>UpdateMutationHookOptions = MutationHookOptions<
  { update<%= Name %>: <%= Name %>Fragment },
  <%= Name %>UpdateArgs
>;

export const useUpdate<%= Name %> = (options?: <%= Name %>UpdateMutationHookOptions) => {
  return useHandleMutation<
    { update<%= Name %>: <%= Name %>Fragment },
    <%= Name %>UpdateArgs
  >(UPDATE_<%= NAME %>, options);
}

export const use<%= Name %>DataReducer = (data?: <%= Name %>Data): [<%= Name %>Data, Dispatch<Payload<<%= Name %>Data>>] => {
<% if (useUser) { -%>
  const user = useUser();
<% } -%>
  const initializedData = initialize<%= Name %>Data(data ?? <%- useUser ? "{ userId: user?.id as string }" : "{}" %>);
  const [<%= name %>Data, dispatch<%= Name %>Data] = useReducer(
    <%= name %>DataReducer,
    initializedData,
    initialize<%= Name %>Data,
  );
<% if (useUser) { -%>
  useEffect(() => {
    if (user?.id && !<%= name %>Data?.userId) {
      console.log("Dispatching <%= name %> data!");
      dispatch<%= Name %>Data({ field: "userId", value: user.id });
<% Object.entries(fields).filter(([, field]) => !!field.initialize).forEach(([fieldName, field]) => { -%>
      dispatch<%= Name %>Data({ field: "<%- fieldName %>", value: initialize<%= Name %><%= h.inflection.titleize(fieldName) %>(user) });
<% }); -%>
    }
  }, [user, <%= name %>Data]);
<% } -%>
  return [<%= name %>Data, dispatch<%= Name %>Data];
}
