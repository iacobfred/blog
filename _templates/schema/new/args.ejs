---
to: graphql/schema/generated/args/<%= name %>.args.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import {
  <%= Name %>WhereInput,
  <%= Name %>WhereUniqueInput,
  <%= Name %>CreateInput,
  <%= Name %>UpdateInput,
} from "@/graphql/schema/generated/inputs/<%= name %>.inputs";

@TypeGraphQL.ArgsType()
export class Create<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>CreateInput, { nullable: false })
  data!: <%= Name %>CreateInput;
}

@TypeGraphQL.ArgsType()
export class CreateMany<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>CreateInput, { nullable: false })
  data!: <%= Name %>CreateInput;
}

@TypeGraphQL.ArgsType()
export class Delete<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereUniqueInput, { nullable: false })
  where!: <%= Name %>WhereUniqueInput;
}

@TypeGraphQL.ArgsType()
export class DeleteMany<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereInput, { nullable: false })
  where!: <%= Name %>WhereInput;
}

@TypeGraphQL.ArgsType()
export class FindUnique<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereUniqueInput, { nullable: false })
  where!: <%= Name %>WhereUniqueInput;
}

@TypeGraphQL.ArgsType()
export class FindMany<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereInput, { nullable: true })
  where?: <%= Name %>WhereInput;
}

@TypeGraphQL.ArgsType()
export class Update<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereUniqueInput, { nullable: false })
  where!: <%= Name %>WhereUniqueInput;

  @TypeGraphQL.Field(() => <%= Name %>UpdateInput, { nullable: false })
  data!: <%= Name %>UpdateInput;
}

@TypeGraphQL.ArgsType()
export class UpdateMany<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereInput, { nullable: false })
  where!: <%= Name %>WhereUniqueInput;

  @TypeGraphQL.Field(() => <%= Name %>UpdateInput, { nullable: false })
  data!: <%= Name %>UpdateInput;
}

@TypeGraphQL.ArgsType()
export class Upsert<%= Name %>Args {
  @TypeGraphQL.Field(() => <%= Name %>WhereUniqueInput, { nullable: false })
  where!: <%= Name %>WhereUniqueInput;

  @TypeGraphQL.Field(() => <%= Name %>CreateInput, { nullable: false })
  data!: <%= Name %>CreateInput;

  // @TypeGraphQL.Field(() => <%= Name %>UpdateInput, { nullable: false })
  // update!: <%= Name %>UpdateInput;
}
