---
to: apps/web/generated/shortcuts/<%= name %>.shortcuts.ts
force: true
---

import <%= Name %>Model from "@web/generated/models/<%= Name %>";
<% if (Object.keys(fields).includes("userId")) { -%>
import UserModel from "@web/generated/models/User";
<% } -%>
import { <%= Name %>CreationArgs, <%= Name %>UpdateArgs, <%= Name %>UpsertionArgs, FindUnique<%= Name %>Args } from "@web/graphql/generated/args/<%= name %>.args";
import { convertFilterForMongo } from "@web/graphql/schema/helpers";
import { <%= Name %> } from "@web/generated/interfaces/<%= Name %>";
import { ModifyResult } from "mongoose";

export const find<%= Name %> = async ({ where }: FindUnique<%= Name %>Args) => {
  const filter = convertFilterForMongo(where);
  return <%= Name %>Model.findOne(filter).lean({ virtuals: true });
}

export const create<%= Name %> = async ({ data }: <%= Name %>CreationArgs) => {
  return <%= Name %>Model.create([ data ]).then((results) => results[0]);
}

export const update<%= Name %> = async ({ where, data }: <%= Name %>UpdateArgs) => {
  const filter = convertFilterForMongo(where);
  return await <%= Name %>Model.findOneAndUpdate(
    filter,
    data,
    { returnDocument: "after" }
  ).lean({ virtuals: true });
}

export const upsert<%= Name %> = async ({ where, data }: <%= Name %>UpsertionArgs) => {
  const result: ModifyResult<<%= Name %>> = await <%= Name %>Model.findOneAndUpdate(
    convertFilterForMongo(where),
    data,
    {
      upsert: true,
      new: true,
      returnDocument: "after",
      runValidators: true,
      setDefaultsOnInsert: true,
      rawResult: true,
    }
  ).lean({ virtuals: true });
  return result.value;
}
