---
to: apps/web/generated/models/<%= Name %>/index.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import mongoose from "mongoose";
import mongooseLeanVirtuals from "mongoose-lean-virtuals";
import { <%= Name %> } from "@web/generated/interfaces/<%= Name %>";
import { <%= Name %>Document } from "@web/generated/models/<%= Name %>/document";
import { DEFAULT_SCHEMA_OPTIONS } from "@web/graphql/schema/types";
<% for (var model of modelImports) { -%>
import { <%= h.changeCase.camel(model) %>Schema as <%= h.changeCase.pascal(model) %> } from "@web/generated/models/<%= h.changeCase.pascal(model) %>";
<% } -%>
<% for (var [fieldName, field] of Object.entries(fields).filter(([,field]) => (field.type === "Map" && field.shape))) { -%>
import { <%= h.changeCase.pascal(fieldName) %> } from './types';
<% } -%>
import { preSave, postCreate, postUpdate, postUpsert } from "@web/generated/models/<%= Name %>/hooks";
import { ModifyResult, UpdateQuery } from "mongoose";

const <%= name %>Schema = new mongoose.Schema<<%= Name %>>({
<% for (var [fieldName, field] of Object.entries(fields)) { -%>
  <%= fieldName %>: { type: <%- getConstructor(field, { ctx: "schema" }) %><%- field.ref ? `, ref: "${field.ref}"` : ""%>, required: <%- field.required %><%- field.unique ? ", unique: true" : "" %><%- field.select === false ? ", select: false" : "" %><%- typeof field.default !== "undefined" ? `, default: ${JSON5.stringify(field.default)}` : field.required ? "" : `, default: null` %> },
<% } -%>
  archivedAt: { type: Date, required: false, default: null },
}, DEFAULT_SCHEMA_OPTIONS);

<%- name %>Schema.plugin(mongooseLeanVirtuals);

<%= name %>Schema.pre<<%= Name %>Document>("save", async function () {
  console.log("Saving <%= Name %>", this);
  await preSave(this);
});

<%= name %>Schema.post<<%= Name %>Document>("save", async function (document) {
  console.log("Saved <%= Name %>", document);
  await postCreate(document);
});

<%= name %>Schema.post<<%= Name %>Document>(
  "findOneAndUpdate",
  async function (_result: <%= Name %>Document | ModifyResult<<%= Name %>Document>) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const query = this as unknown as UpdateQuery<<%= Name %>Document>;
    const updatedFields = query.getUpdate().$set;
    if ((_result as ModifyResult<<%= Name %>Document>).value) {
      const result = _result as ModifyResult<<%= Name %>Document>;
      const <%= name %> = result.value;
      if (<%= name %>) {
        if (!result.lastErrorObject?.updatedExisting) {
          await postCreate(<%= name %>);
        } else {
          await postUpdate(<%= name %>, updatedFields);
        }
      }
    } else {
      const result = _result as <%= Name %>Document;
      await postUpdate(result, updatedFields);
    }
  }
);

export { <%= name %>Schema };

// https://stackoverflow.com/questions/19051041/cannot-overwrite-model-once-compiled-mongoose
export const <%= Name %>Model = mongoose.models.<%= Name %> || mongoose.model<<%= Name %>>("<%= Name %>", <%= name %>Schema);

export default <%= Name %>Model;
