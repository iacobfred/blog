---
to: graphql/generated/models/<%= name %>.model.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import * as Scalars from "@/graphql/schema/scalars";
import * as Types from "@/graphql/schema/types";
import definition from "@/graphql/schema/definitions/<%= Name %>";
import { Model } from "@/graphql/schema/types";
import { getModelForClass, prop as Property, pre, post, ModelOptions } from "@typegoose/typegoose";
import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import { <%= Name %>Fragment } from "@/graphql/generated/fragments/<%= name %>.fragment";

<% for (var model of modelImports) { -%>
import { <%= h.changeCase.pascal(model) %> } from "@/graphql/generated/models/<%= h.changeCase.camel(model) %>.model";
<% } -%>

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<<%= Name %>>("save", (definition?.hooks?.save?.pre as any) ?? (async function (next) { return next() }))
@post<<%= Name %>>("save", definition?.hooks?.save?.post ?? (async (_instance) => { return; }))
export class <%= Name %> extends Model {
  // declare readonly __types__: {
  //   fragment: <%= Name %>Fragment;
  //   mutationResponses: {
  //     create: { create<%= Name %>: <%= Name %>Fragment };
  //     update: { update<%= Name %>: <%= Name %>Fragment };
  //     upsert: { upsert<%= Name %>: <%= Name %>Fragment };
  //     delete: { delete<%= Name %>: <%= Name %>Fragment };
  //   };
  // }
<% for (var [fieldName, field] of Object.entries(fields)) { -%>
<% var useModelType = modelImports.includes(`${field.type}`.replace(/[\[\]]/g, "")); -%>
  @TypeGraphQL.Field(() => <%- useModelType ? field.typeCast : field.typeCast.replace(/(\w)/, "Scalars.$1") %>, { nullable: <%- field.required ? "false" : "true" %>})
  @Property({ <%- (field.typeCast === "String" || field.typeCast === "Boolean") ? `type: () => ${field.typeCast}, ` : "" %>required: <%- field.required %><%- field.unique ? ", unique: true" : "" %><%- field.select === false ? ", select: false" : "" %><%- typeof field.default !== "undefined" ? `, default: ${JSON.stringify(field.default)}` : field.required ? "" : `, default: null` %> })
  <%= fieldName %><%- field.required ? "!" : "?" %>: <%- useModelType ? "" : "Types." %><%- field.type %><%- (field.required || (field.type === "Boolean" && typeof field.default !== "undefined")) ? "" : " | null" %>;

<% } -%>}

const <%= Name %>Model = getModelForClass<typeof <%= Name %>>(<%= Name %>);
export default <%= Name %>Model;
