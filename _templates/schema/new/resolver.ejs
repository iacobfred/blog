---
to: graphql/schema/generated/resolvers/<%= name %>.resolver.ts
force: true
---
/* Do not edit this file. It was generated programmatically. */

import * as TypeGraphQL from "type-graphql-v2-fork";
import <%= Name %>Model, { <%= Name %> } from "@/graphql/schema/generated/models/<%= name %>.model";
import {
  Create<%= Name %>Args,
  CreateMany<%= Name %>Args,
  Delete<%= Name %>Args,
  DeleteMany<%= Name %>Args,
  FindMany<%= Name %>Args,
  FindUnique<%= Name %>Args,
  Update<%= Name %>Args,
  UpdateMany<%= Name %>Args,
  Upsert<%= Name %>Args,
} from "@/graphql/schema/generated/args/<%= name %>.args";
import { GqlContext } from "@/graphql/context";
import { GraphQLResolveInfo } from "graphql";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
<% if (Object.keys(fields).includes("userId")) { -%>
import UserModel from "@/graphql/schema/generated/models/user.model";
<% } -%>

@TypeGraphQL.Resolver(() => <%= Name %>)
export class <%= Name %>Resolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() <%= name %>: <%= Name %>) {
    return <%= name %>._id;
  }

  @TypeGraphQL.Query(() => <%= Name %>, { nullable: true })
  async <%= name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUnique<%= Name %>Args
  ): Promise<<%= Name %> | null> {
    const filter = convertFilterForMongo(args.where);
    return <%= Name %>Model.findOne(filter);
  }

  @TypeGraphQL.Query(() => [<%= Name %>], { nullable: false })
  async <%= h.inflection.pluralize(name) %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindMany<%= Name %>Args
  ): Promise<<%= Name %>[]> {
    const filter = convertFilterForMongo(args.where);
    return <%= Name %>Model.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async create<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: Create<%= Name %>Args
  ) {
    const <%= name %> = await <%= Name %>Model.create(args.data);
<% if (Object.keys(fields).includes("userId")) { -%>
    if (<%= name %>) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: <%= name %>.userId },
        { $push: { <%= h.inflection.pluralize(name) %>: { ...<%= name %> } } },
      );
    }
<% } -%>
    return <%= name %>;
  }

  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async createMany<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CreateMany<%= Name %>Args
  ): Promise<<%= Name %>[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async update<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: Update<%= Name %>Args
  ) {
    const filter = convertFilterForMongo(args.where);
    const <%= name %> = await <%= Name %>Model.findOneAndUpdate(filter, args.data, { returnDocument: "after" });
<% if (Object.keys(fields).includes("userId")) { -%>
    <%= name %> && UserModel.findOneAndUpdate({ _id: <%= name %>.userId, "<%= h.inflection.pluralize(name) %>._id": <%= name %>._id }, {
      $set: { "<%= h.inflection.pluralize(name) %>.$": { ...<%= name %> } }
    });
<% } -%>
    return <%= name %>;
  }

  @TypeGraphQL.Mutation(() => <%= Name %>)
  async upsert<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: Upsert<%= Name %>Args
  ) {
    const filter = convertFilterForMongo(args.where);
    const <%= name %> = await <%= Name %>Model.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return <%= name %>;
  }

  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async updateMany<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UpdateMany<%= Name %>Args
  ): Promise<<%= Name %>[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => <%= Name %>, { nullable: true })
  async delete<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: Delete<%= Name %>Args
  ): Promise<<%= Name %> | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [<%= Name %>], { nullable: false })
  async deleteMany<%= Name %>(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteMany<%= Name %>Args
  ): Promise<<%= Name %>[]> {
    throw new Error("Not implemented");
  }
}
