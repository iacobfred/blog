# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: String!
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  user: User!
  userId: String!
}

type AccountCountAggregate {
  _all: Int!
  id: Int!
  provider: Int!
  providerAccountId: Int!
  type: Int!
  uid: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  userId: String!
}

input AccountCreateManyUserInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
}

type AccountGroupBy {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  id: String!
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  id: String
  provider: String
  providerAccountId: String
  type: String
  uid: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  id: String
  provider: String
  providerAccountId: String
  type: String
  uid: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  id
  provider
  providerAccountId
  type
  uid
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  id: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  type: StringFilter
  uid: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  type: StringWithAggregatesFilter
  uid: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AccountUpdateInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  id: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  type: StringFilter
  uid: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type Action {
  _count: ActionCount!
  completions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  description: String
  id: Int!
  identityRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  name: String!
  scheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  slug: String!
  userActions(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
}

type ActionAvgAggregate {
  id: Float
}

input ActionAvgOrderByAggregateInput {
  id: SortOrder
}

type ActionCompletion {
  action: Action!
  actionId: Int!
  date: DateTime!
  id: Int!
  user: User!
  userId: String!
}

type ActionCompletionAvgAggregate {
  actionId: Float
  id: Float
}

input ActionCompletionAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

type ActionCompletionCountAggregate {
  _all: Int!
  actionId: Int!
  date: Int!
  id: Int!
  userId: Int!
}

input ActionCompletionCountOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionCreateInput {
  action: ActionCreateNestedOneWithoutCompletionsInput!
  date: DateTime
  user: UserCreateNestedOneWithoutActionCompletionsInput!
}

input ActionCompletionCreateManyActionInput {
  date: DateTime
  id: Int
  userId: String!
}

input ActionCompletionCreateManyActionInputEnvelope {
  data: [ActionCompletionCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input ActionCompletionCreateManyInput {
  actionId: Int!
  date: DateTime
  id: Int
  userId: String!
}

input ActionCompletionCreateManyUserInput {
  actionId: Int!
  date: DateTime
  id: Int
}

input ActionCompletionCreateManyUserInputEnvelope {
  data: [ActionCompletionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ActionCompletionCreateNestedManyWithoutActionInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutActionInput!]
  create: [ActionCompletionCreateWithoutActionInput!]
  createMany: ActionCompletionCreateManyActionInputEnvelope
}

input ActionCompletionCreateNestedManyWithoutUserInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutUserInput!]
  create: [ActionCompletionCreateWithoutUserInput!]
  createMany: ActionCompletionCreateManyUserInputEnvelope
}

input ActionCompletionCreateOrConnectWithoutActionInput {
  create: ActionCompletionCreateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionCreateOrConnectWithoutUserInput {
  create: ActionCompletionCreateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionCreateWithoutActionInput {
  date: DateTime
  user: UserCreateNestedOneWithoutActionCompletionsInput!
}

input ActionCompletionCreateWithoutUserInput {
  action: ActionCreateNestedOneWithoutCompletionsInput!
  date: DateTime
}

type ActionCompletionGroupBy {
  _avg: ActionCompletionAvgAggregate
  _count: ActionCompletionCountAggregate
  _max: ActionCompletionMaxAggregate
  _min: ActionCompletionMinAggregate
  _sum: ActionCompletionSumAggregate
  actionId: Int!
  date: DateTime!
  id: Int!
  userId: String!
}

input ActionCompletionListRelationFilter {
  every: ActionCompletionWhereInput
  none: ActionCompletionWhereInput
  some: ActionCompletionWhereInput
}

type ActionCompletionMaxAggregate {
  actionId: Int
  date: DateTime
  id: Int
  userId: String
}

input ActionCompletionMaxOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ActionCompletionMinAggregate {
  actionId: Int
  date: DateTime
  id: Int
  userId: String
}

input ActionCompletionMinOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionCompletionOrderByWithAggregationInput {
  _avg: ActionCompletionAvgOrderByAggregateInput
  _count: ActionCompletionCountOrderByAggregateInput
  _max: ActionCompletionMaxOrderByAggregateInput
  _min: ActionCompletionMinOrderByAggregateInput
  _sum: ActionCompletionSumOrderByAggregateInput
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ActionCompletionScalarFieldEnum {
  actionId
  date
  id
  userId
}

input ActionCompletionScalarWhereInput {
  AND: [ActionCompletionScalarWhereInput!]
  NOT: [ActionCompletionScalarWhereInput!]
  OR: [ActionCompletionScalarWhereInput!]
  actionId: IntFilter
  date: DateTimeFilter
  id: IntFilter
  userId: StringFilter
}

input ActionCompletionScalarWhereWithAggregatesInput {
  AND: [ActionCompletionScalarWhereWithAggregatesInput!]
  NOT: [ActionCompletionScalarWhereWithAggregatesInput!]
  OR: [ActionCompletionScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type ActionCompletionSumAggregate {
  actionId: Int
  id: Int
}

input ActionCompletionSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

input ActionCompletionUpdateInput {
  action: ActionUpdateOneRequiredWithoutCompletionsInput
  date: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionCompletionsInput
}

input ActionCompletionUpdateManyMutationInput {
  date: DateTimeFieldUpdateOperationsInput
}

input ActionCompletionUpdateManyWithWhereWithoutActionInput {
  data: ActionCompletionUpdateManyMutationInput!
  where: ActionCompletionScalarWhereInput!
}

input ActionCompletionUpdateManyWithWhereWithoutUserInput {
  data: ActionCompletionUpdateManyMutationInput!
  where: ActionCompletionScalarWhereInput!
}

input ActionCompletionUpdateManyWithoutActionInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutActionInput!]
  create: [ActionCompletionCreateWithoutActionInput!]
  createMany: ActionCompletionCreateManyActionInputEnvelope
  delete: [ActionCompletionWhereUniqueInput!]
  deleteMany: [ActionCompletionScalarWhereInput!]
  disconnect: [ActionCompletionWhereUniqueInput!]
  set: [ActionCompletionWhereUniqueInput!]
  update: [ActionCompletionUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [ActionCompletionUpdateManyWithWhereWithoutActionInput!]
  upsert: [ActionCompletionUpsertWithWhereUniqueWithoutActionInput!]
}

input ActionCompletionUpdateManyWithoutUserInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutUserInput!]
  create: [ActionCompletionCreateWithoutUserInput!]
  createMany: ActionCompletionCreateManyUserInputEnvelope
  delete: [ActionCompletionWhereUniqueInput!]
  deleteMany: [ActionCompletionScalarWhereInput!]
  disconnect: [ActionCompletionWhereUniqueInput!]
  set: [ActionCompletionWhereUniqueInput!]
  update: [ActionCompletionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ActionCompletionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ActionCompletionUpsertWithWhereUniqueWithoutUserInput!]
}

input ActionCompletionUpdateWithWhereUniqueWithoutActionInput {
  data: ActionCompletionUpdateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpdateWithWhereUniqueWithoutUserInput {
  data: ActionCompletionUpdateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpdateWithoutActionInput {
  date: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionCompletionsInput
}

input ActionCompletionUpdateWithoutUserInput {
  action: ActionUpdateOneRequiredWithoutCompletionsInput
  date: DateTimeFieldUpdateOperationsInput
}

input ActionCompletionUpsertWithWhereUniqueWithoutActionInput {
  create: ActionCompletionCreateWithoutActionInput!
  update: ActionCompletionUpdateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpsertWithWhereUniqueWithoutUserInput {
  create: ActionCompletionCreateWithoutUserInput!
  update: ActionCompletionUpdateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionWhereInput {
  AND: [ActionCompletionWhereInput!]
  NOT: [ActionCompletionWhereInput!]
  OR: [ActionCompletionWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  date: DateTimeFilter
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ActionCompletionWhereUniqueInput {
  id: Int
}

type ActionCount {
  completions: Int!
  identityRelations: Int!
  scheduleTemplates: Int!
  userActions: Int!
}

type ActionCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input ActionCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionCreateInput {
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActionInput
  slug: String!
  userActions: UserActionCreateNestedManyWithoutActionInput
}

input ActionCreateManyInput {
  description: String
  id: Int
  name: String!
  slug: String!
}

input ActionCreateNestedOneWithoutCompletionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutCompletionsInput
  create: ActionCreateWithoutCompletionsInput
}

input ActionCreateNestedOneWithoutIdentityRelationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutIdentityRelationsInput
  create: ActionCreateWithoutIdentityRelationsInput
}

input ActionCreateNestedOneWithoutScheduleTemplatesInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutScheduleTemplatesInput
  create: ActionCreateWithoutScheduleTemplatesInput
}

input ActionCreateNestedOneWithoutUserActionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutUserActionsInput
  create: ActionCreateWithoutUserActionsInput
}

input ActionCreateOrConnectWithoutCompletionsInput {
  create: ActionCreateWithoutCompletionsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutIdentityRelationsInput {
  create: ActionCreateWithoutIdentityRelationsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutScheduleTemplatesInput {
  create: ActionCreateWithoutScheduleTemplatesInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutUserActionsInput {
  create: ActionCreateWithoutUserActionsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutCompletionsInput {
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActionInput
  slug: String!
  userActions: UserActionCreateNestedManyWithoutActionInput
}

input ActionCreateWithoutIdentityRelationsInput {
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  name: String!
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActionInput
  slug: String!
  userActions: UserActionCreateNestedManyWithoutActionInput
}

input ActionCreateWithoutScheduleTemplatesInput {
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  slug: String!
  userActions: UserActionCreateNestedManyWithoutActionInput
}

input ActionCreateWithoutUserActionsInput {
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActionInput
  slug: String!
}

type ActionGroupBy {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
  description: String
  id: Int!
  name: String!
  slug: String!
}

type ActionMaxAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input ActionMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type ActionMinAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input ActionMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionOrderByWithAggregationInput {
  _avg: ActionAvgOrderByAggregateInput
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  _sum: ActionSumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionOrderByWithRelationInput {
  completions: ActionCompletionOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  identityRelations: IdentityActionRelationOrderByRelationAggregateInput
  name: SortOrder
  scheduleTemplates: ActionScheduleTemplateOrderByRelationAggregateInput
  slug: SortOrder
  userActions: UserActionOrderByRelationAggregateInput
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  description
  id
  name
  slug
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type ActionScheduleTemplate {
  _count: ActionScheduleTemplateCount!
  action: Action!
  actionId: Int!
  chron: String
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
  quantity: Int!
  scheduleTemplate: ScheduleTemplate!
  scheduleTemplateId: Int!
  userActionSchedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
}

input ActionScheduleTemplateActionIdFrequencyMultiplierCompoundUniqueInput {
  actionId: Int!
  frequency: FREQUENCY!
  multiplier: Int!
}

type ActionScheduleTemplateAvgAggregate {
  actionId: Float
  id: Float
  multiplier: Float
  quantity: Float
  scheduleTemplateId: Float
}

input ActionScheduleTemplateAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

type ActionScheduleTemplateCount {
  userActionSchedules: Int!
}

type ActionScheduleTemplateCountAggregate {
  _all: Int!
  actionId: Int!
  chron: Int!
  frequency: Int!
  id: Int!
  multiplier: Int!
  quantity: Int!
  scheduleTemplateId: Int!
}

input ActionScheduleTemplateCountOrderByAggregateInput {
  actionId: SortOrder
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateCreateInput {
  action: ActionCreateNestedOneWithoutScheduleTemplatesInput!
  chron: String
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateCreateManyActionInput {
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  scheduleTemplateId: Int!
}

input ActionScheduleTemplateCreateManyActionInputEnvelope {
  data: [ActionScheduleTemplateCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleTemplateCreateManyInput {
  actionId: Int!
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  scheduleTemplateId: Int!
}

input ActionScheduleTemplateCreateManyScheduleTemplateInput {
  actionId: Int!
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
}

input ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope {
  data: [ActionScheduleTemplateCreateManyScheduleTemplateInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleTemplateCreateNestedManyWithoutActionInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutActionInput!]
  create: [ActionScheduleTemplateCreateWithoutActionInput!]
  createMany: ActionScheduleTemplateCreateManyActionInputEnvelope
}

input ActionScheduleTemplateCreateNestedManyWithoutScheduleTemplateInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput!]
  create: [ActionScheduleTemplateCreateWithoutScheduleTemplateInput!]
  createMany: ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope
}

input ActionScheduleTemplateCreateNestedOneWithoutUserActionSchedulesInput {
  connect: ActionScheduleTemplateWhereUniqueInput
  connectOrCreate: ActionScheduleTemplateCreateOrConnectWithoutUserActionSchedulesInput
  create: ActionScheduleTemplateCreateWithoutUserActionSchedulesInput
}

input ActionScheduleTemplateCreateOrConnectWithoutActionInput {
  create: ActionScheduleTemplateCreateWithoutActionInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput {
  create: ActionScheduleTemplateCreateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateOrConnectWithoutUserActionSchedulesInput {
  create: ActionScheduleTemplateCreateWithoutUserActionSchedulesInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateWithoutActionInput {
  chron: String
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateCreateWithoutScheduleTemplateInput {
  action: ActionCreateNestedOneWithoutScheduleTemplatesInput!
  chron: String
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateCreateWithoutUserActionSchedulesInput {
  action: ActionCreateNestedOneWithoutScheduleTemplatesInput!
  chron: String
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
}

type ActionScheduleTemplateGroupBy {
  _avg: ActionScheduleTemplateAvgAggregate
  _count: ActionScheduleTemplateCountAggregate
  _max: ActionScheduleTemplateMaxAggregate
  _min: ActionScheduleTemplateMinAggregate
  _sum: ActionScheduleTemplateSumAggregate
  actionId: Int!
  chron: String
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
  quantity: Int!
  scheduleTemplateId: Int!
}

input ActionScheduleTemplateListRelationFilter {
  every: ActionScheduleTemplateWhereInput
  none: ActionScheduleTemplateWhereInput
  some: ActionScheduleTemplateWhereInput
}

type ActionScheduleTemplateMaxAggregate {
  actionId: Int
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  scheduleTemplateId: Int
}

input ActionScheduleTemplateMaxOrderByAggregateInput {
  actionId: SortOrder
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

type ActionScheduleTemplateMinAggregate {
  actionId: Int
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  scheduleTemplateId: Int
}

input ActionScheduleTemplateMinOrderByAggregateInput {
  actionId: SortOrder
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionScheduleTemplateOrderByWithAggregationInput {
  _avg: ActionScheduleTemplateAvgOrderByAggregateInput
  _count: ActionScheduleTemplateCountOrderByAggregateInput
  _max: ActionScheduleTemplateMaxOrderByAggregateInput
  _min: ActionScheduleTemplateMinOrderByAggregateInput
  _sum: ActionScheduleTemplateSumOrderByAggregateInput
  actionId: SortOrder
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplate: ScheduleTemplateOrderByWithRelationInput
  scheduleTemplateId: SortOrder
  userActionSchedules: UserActionScheduleOrderByRelationAggregateInput
}

input ActionScheduleTemplateRelationFilter {
  is: ActionScheduleTemplateWhereInput
  isNot: ActionScheduleTemplateWhereInput
}

enum ActionScheduleTemplateScalarFieldEnum {
  actionId
  chron
  frequency
  id
  multiplier
  quantity
  scheduleTemplateId
}

input ActionScheduleTemplateScalarWhereInput {
  AND: [ActionScheduleTemplateScalarWhereInput!]
  NOT: [ActionScheduleTemplateScalarWhereInput!]
  OR: [ActionScheduleTemplateScalarWhereInput!]
  actionId: IntFilter
  chron: StringNullableFilter
  frequency: EnumFREQUENCYFilter
  id: IntFilter
  multiplier: IntFilter
  quantity: IntFilter
  scheduleTemplateId: IntFilter
}

input ActionScheduleTemplateScalarWhereWithAggregatesInput {
  AND: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  NOT: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  OR: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  chron: StringNullableWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  id: IntWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  scheduleTemplateId: IntWithAggregatesFilter
}

type ActionScheduleTemplateSumAggregate {
  actionId: Int
  id: Int
  multiplier: Int
  quantity: Int
  scheduleTemplateId: Int
}

input ActionScheduleTemplateSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateUpdateInput {
  action: ActionUpdateOneRequiredWithoutScheduleTemplatesInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateUpdateManyMutationInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input ActionScheduleTemplateUpdateManyWithWhereWithoutActionInput {
  data: ActionScheduleTemplateUpdateManyMutationInput!
  where: ActionScheduleTemplateScalarWhereInput!
}

input ActionScheduleTemplateUpdateManyWithWhereWithoutScheduleTemplateInput {
  data: ActionScheduleTemplateUpdateManyMutationInput!
  where: ActionScheduleTemplateScalarWhereInput!
}

input ActionScheduleTemplateUpdateManyWithoutActionInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutActionInput!]
  create: [ActionScheduleTemplateCreateWithoutActionInput!]
  createMany: ActionScheduleTemplateCreateManyActionInputEnvelope
  delete: [ActionScheduleTemplateWhereUniqueInput!]
  deleteMany: [ActionScheduleTemplateScalarWhereInput!]
  disconnect: [ActionScheduleTemplateWhereUniqueInput!]
  set: [ActionScheduleTemplateWhereUniqueInput!]
  update: [ActionScheduleTemplateUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [ActionScheduleTemplateUpdateManyWithWhereWithoutActionInput!]
  upsert: [ActionScheduleTemplateUpsertWithWhereUniqueWithoutActionInput!]
}

input ActionScheduleTemplateUpdateManyWithoutScheduleTemplateInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput!]
  create: [ActionScheduleTemplateCreateWithoutScheduleTemplateInput!]
  createMany: ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope
  delete: [ActionScheduleTemplateWhereUniqueInput!]
  deleteMany: [ActionScheduleTemplateScalarWhereInput!]
  disconnect: [ActionScheduleTemplateWhereUniqueInput!]
  set: [ActionScheduleTemplateWhereUniqueInput!]
  update: [ActionScheduleTemplateUpdateWithWhereUniqueWithoutScheduleTemplateInput!]
  updateMany: [ActionScheduleTemplateUpdateManyWithWhereWithoutScheduleTemplateInput!]
  upsert: [ActionScheduleTemplateUpsertWithWhereUniqueWithoutScheduleTemplateInput!]
}

input ActionScheduleTemplateUpdateOneWithoutUserActionSchedulesInput {
  connect: ActionScheduleTemplateWhereUniqueInput
  connectOrCreate: ActionScheduleTemplateCreateOrConnectWithoutUserActionSchedulesInput
  create: ActionScheduleTemplateCreateWithoutUserActionSchedulesInput
  delete: Boolean
  disconnect: Boolean
  update: ActionScheduleTemplateUpdateWithoutUserActionSchedulesInput
  upsert: ActionScheduleTemplateUpsertWithoutUserActionSchedulesInput
}

input ActionScheduleTemplateUpdateWithWhereUniqueWithoutActionInput {
  data: ActionScheduleTemplateUpdateWithoutActionInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpdateWithWhereUniqueWithoutScheduleTemplateInput {
  data: ActionScheduleTemplateUpdateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpdateWithoutActionInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateUpdateWithoutScheduleTemplateInput {
  action: ActionUpdateOneRequiredWithoutScheduleTemplatesInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleTemplateInput
}

input ActionScheduleTemplateUpdateWithoutUserActionSchedulesInput {
  action: ActionUpdateOneRequiredWithoutScheduleTemplatesInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
}

input ActionScheduleTemplateUpsertWithWhereUniqueWithoutActionInput {
  create: ActionScheduleTemplateCreateWithoutActionInput!
  update: ActionScheduleTemplateUpdateWithoutActionInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpsertWithWhereUniqueWithoutScheduleTemplateInput {
  create: ActionScheduleTemplateCreateWithoutScheduleTemplateInput!
  update: ActionScheduleTemplateUpdateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpsertWithoutUserActionSchedulesInput {
  create: ActionScheduleTemplateCreateWithoutUserActionSchedulesInput!
  update: ActionScheduleTemplateUpdateWithoutUserActionSchedulesInput!
}

input ActionScheduleTemplateWhereInput {
  AND: [ActionScheduleTemplateWhereInput!]
  NOT: [ActionScheduleTemplateWhereInput!]
  OR: [ActionScheduleTemplateWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  chron: StringNullableFilter
  frequency: EnumFREQUENCYFilter
  id: IntFilter
  multiplier: IntFilter
  quantity: IntFilter
  scheduleTemplate: ScheduleTemplateRelationFilter
  scheduleTemplateId: IntFilter
  userActionSchedules: UserActionScheduleListRelationFilter
}

input ActionScheduleTemplateWhereUniqueInput {
  actionId_frequency_multiplier: ActionScheduleTemplateActionIdFrequencyMultiplierCompoundUniqueInput
  id: Int
}

type ActionSumAggregate {
  id: Int
}

input ActionSumOrderByAggregateInput {
  id: SortOrder
}

input ActionUpdateInput {
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutActionInput
}

input ActionUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input ActionUpdateOneRequiredWithoutCompletionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutCompletionsInput
  create: ActionCreateWithoutCompletionsInput
  update: ActionUpdateWithoutCompletionsInput
  upsert: ActionUpsertWithoutCompletionsInput
}

input ActionUpdateOneRequiredWithoutIdentityRelationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutIdentityRelationsInput
  create: ActionCreateWithoutIdentityRelationsInput
  update: ActionUpdateWithoutIdentityRelationsInput
  upsert: ActionUpsertWithoutIdentityRelationsInput
}

input ActionUpdateOneRequiredWithoutScheduleTemplatesInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutScheduleTemplatesInput
  create: ActionCreateWithoutScheduleTemplatesInput
  update: ActionUpdateWithoutScheduleTemplatesInput
  upsert: ActionUpsertWithoutScheduleTemplatesInput
}

input ActionUpdateOneRequiredWithoutUserActionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutUserActionsInput
  create: ActionCreateWithoutUserActionsInput
  update: ActionUpdateWithoutUserActionsInput
  upsert: ActionUpsertWithoutUserActionsInput
}

input ActionUpdateWithoutCompletionsInput {
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutActionInput
}

input ActionUpdateWithoutIdentityRelationsInput {
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutActionInput
}

input ActionUpdateWithoutScheduleTemplatesInput {
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutActionInput
}

input ActionUpdateWithoutUserActionsInput {
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
}

input ActionUpsertWithoutCompletionsInput {
  create: ActionCreateWithoutCompletionsInput!
  update: ActionUpdateWithoutCompletionsInput!
}

input ActionUpsertWithoutIdentityRelationsInput {
  create: ActionCreateWithoutIdentityRelationsInput!
  update: ActionUpdateWithoutIdentityRelationsInput!
}

input ActionUpsertWithoutScheduleTemplatesInput {
  create: ActionCreateWithoutScheduleTemplatesInput!
  update: ActionUpdateWithoutScheduleTemplatesInput!
}

input ActionUpsertWithoutUserActionsInput {
  create: ActionCreateWithoutUserActionsInput!
  update: ActionUpdateWithoutUserActionsInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  completions: ActionCompletionListRelationFilter
  description: StringNullableFilter
  id: IntFilter
  identityRelations: IdentityActionRelationListRelationFilter
  name: StringFilter
  scheduleTemplates: ActionScheduleTemplateListRelationFilter
  slug: StringFilter
  userActions: UserActionListRelationFilter
}

input ActionWhereUniqueInput {
  id: Int
  slug: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
}

type AggregateAction {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
}

type AggregateActionCompletion {
  _avg: ActionCompletionAvgAggregate
  _count: ActionCompletionCountAggregate
  _max: ActionCompletionMaxAggregate
  _min: ActionCompletionMinAggregate
  _sum: ActionCompletionSumAggregate
}

type AggregateActionScheduleTemplate {
  _avg: ActionScheduleTemplateAvgAggregate
  _count: ActionScheduleTemplateCountAggregate
  _max: ActionScheduleTemplateMaxAggregate
  _min: ActionScheduleTemplateMinAggregate
  _sum: ActionScheduleTemplateSumAggregate
}

type AggregateBelief {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
}

type AggregateCalendar {
  _avg: CalendarAvgAggregate
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
  _sum: CalendarSumAggregate
}

type AggregateCalendarEvent {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
}

type AggregateGoal {
  _avg: GoalAvgAggregate
  _count: GoalCountAggregate
  _max: GoalMaxAggregate
  _min: GoalMinAggregate
  _sum: GoalSumAggregate
}

type AggregateIdentity {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
}

type AggregateIdentityActionRelation {
  _avg: IdentityActionRelationAvgAggregate
  _count: IdentityActionRelationCountAggregate
  _max: IdentityActionRelationMaxAggregate
  _min: IdentityActionRelationMinAggregate
  _sum: IdentityActionRelationSumAggregate
}

type AggregateScheduleTemplate {
  _avg: ScheduleTemplateAvgAggregate
  _count: ScheduleTemplateCountAggregate
  _max: ScheduleTemplateMaxAggregate
  _min: ScheduleTemplateMinAggregate
  _sum: ScheduleTemplateSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateUserAction {
  _avg: UserActionAvgAggregate
  _count: UserActionCountAggregate
  _max: UserActionMaxAggregate
  _min: UserActionMinAggregate
  _sum: UserActionSumAggregate
}

type AggregateUserActionSchedule {
  _avg: UserActionScheduleAvgAggregate
  _count: UserActionScheduleCountAggregate
  _max: UserActionScheduleMaxAggregate
  _min: UserActionScheduleMinAggregate
  _sum: UserActionScheduleSumAggregate
}

type AggregateUserBelief {
  _avg: UserBeliefAvgAggregate
  _count: UserBeliefCountAggregate
  _max: UserBeliefMaxAggregate
  _min: UserBeliefMinAggregate
  _sum: UserBeliefSumAggregate
}

type AggregateUserIdentity {
  _avg: UserIdentityAvgAggregate
  _count: UserIdentityCountAggregate
  _max: UserIdentityMaxAggregate
  _min: UserIdentityMinAggregate
  _sum: UserIdentitySumAggregate
}

type AggregateUserValue {
  _avg: UserValueAvgAggregate
  _count: UserValueCountAggregate
  _max: UserValueMaxAggregate
  _min: UserValueMinAggregate
  _sum: UserValueSumAggregate
}

type AggregateValue {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
}

type Belief {
  _count: BeliefCount!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
  userBelief(cursor: UserBeliefWhereUniqueInput, distinct: [UserBeliefScalarFieldEnum!], orderBy: [UserBeliefOrderByWithRelationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): [UserBelief!]!
}

type BeliefAvgAggregate {
  id: Float
}

input BeliefAvgOrderByAggregateInput {
  id: SortOrder
}

type BeliefCount {
  userBelief: Int!
}

type BeliefCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input BeliefCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefCreateInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
  userBelief: UserBeliefCreateNestedManyWithoutBeliefInput
}

input BeliefCreateManyInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input BeliefCreateNestedOneWithoutUserBeliefInput {
  connect: BeliefWhereUniqueInput
  connectOrCreate: BeliefCreateOrConnectWithoutUserBeliefInput
  create: BeliefCreateWithoutUserBeliefInput
}

input BeliefCreateOrConnectWithoutUserBeliefInput {
  create: BeliefCreateWithoutUserBeliefInput!
  where: BeliefWhereUniqueInput!
}

input BeliefCreateWithoutUserBeliefInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BeliefGroupBy {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BeliefMaxAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input BeliefMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type BeliefMinAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input BeliefMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByWithAggregationInput {
  _avg: BeliefAvgOrderByAggregateInput
  _count: BeliefCountOrderByAggregateInput
  _max: BeliefMaxOrderByAggregateInput
  _min: BeliefMinOrderByAggregateInput
  _sum: BeliefSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
  userBelief: UserBeliefOrderByRelationAggregateInput
}

input BeliefRelationFilter {
  is: BeliefWhereInput
  isNot: BeliefWhereInput
}

enum BeliefScalarFieldEnum {
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input BeliefScalarWhereWithAggregatesInput {
  AND: [BeliefScalarWhereWithAggregatesInput!]
  NOT: [BeliefScalarWhereWithAggregatesInput!]
  OR: [BeliefScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type BeliefSumAggregate {
  id: Int
}

input BeliefSumOrderByAggregateInput {
  id: SortOrder
}

input BeliefUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userBelief: UserBeliefUpdateManyWithoutBeliefInput
}

input BeliefUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefUpdateOneRequiredWithoutUserBeliefInput {
  connect: BeliefWhereUniqueInput
  connectOrCreate: BeliefCreateOrConnectWithoutUserBeliefInput
  create: BeliefCreateWithoutUserBeliefInput
  update: BeliefUpdateWithoutUserBeliefInput
  upsert: BeliefUpsertWithoutUserBeliefInput
}

input BeliefUpdateWithoutUserBeliefInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefUpsertWithoutUserBeliefInput {
  create: BeliefCreateWithoutUserBeliefInput!
  update: BeliefUpdateWithoutUserBeliefInput!
}

input BeliefWhereInput {
  AND: [BeliefWhereInput!]
  NOT: [BeliefWhereInput!]
  OR: [BeliefWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeNullableFilter
  userBelief: UserBeliefListRelationFilter
}

input BeliefWhereUniqueInput {
  id: Int
  slug: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Calendar {
  _count: CalendarCount!
  color: Color
  events(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  id: Int!
  isPublic: Boolean!
  name: String
  uid: String!
  user: User!
  userId: String!
}

type CalendarAvgAggregate {
  id: Float
}

input CalendarAvgOrderByAggregateInput {
  id: SortOrder
}

type CalendarCount {
  events: Int!
}

type CalendarCountAggregate {
  _all: Int!
  color: Int!
  id: Int!
  isPublic: Int!
  name: Int!
  uid: Int!
  userId: Int!
}

input CalendarCountOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input CalendarCreateInput {
  color: Color
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  isPublic: Boolean
  name: String
  uid: String
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateManyInput {
  color: Color
  id: Int
  isPublic: Boolean
  name: String
  uid: String
  userId: String!
}

input CalendarCreateManyUserInput {
  color: Color
  id: Int
  isPublic: Boolean
  name: String
  uid: String
}

input CalendarCreateManyUserInputEnvelope {
  data: [CalendarCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CalendarCreateNestedManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
}

input CalendarCreateNestedOneWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
}

input CalendarCreateOrConnectWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateOrConnectWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateWithoutEventsInput {
  color: Color
  isPublic: Boolean
  name: String
  uid: String
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateWithoutUserInput {
  color: Color
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  isPublic: Boolean
  name: String
  uid: String
}

type CalendarEvent {
  allDay: Boolean!
  calendar: Calendar!
  calendarId: Int!
  createdAt: DateTime!
  end: DateTime
  id: Int!
  notes: String
  schedule: UserActionSchedule
  scheduleId: Int
  start: DateTime!
  title: String!
  uid: String!
  updatedAt: DateTime
  userAction: UserAction
  userActionId: Int
}

type CalendarEventAvgAggregate {
  calendarId: Float
  id: Float
  scheduleId: Float
  userActionId: Float
}

input CalendarEventAvgOrderByAggregateInput {
  calendarId: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  userActionId: SortOrder
}

type CalendarEventCountAggregate {
  _all: Int!
  allDay: Int!
  calendarId: Int!
  createdAt: Int!
  end: Int!
  id: Int!
  notes: Int!
  scheduleId: Int!
  start: Int!
  title: Int!
  uid: Int!
  updatedAt: Int!
  userActionId: Int!
}

input CalendarEventCountOrderByAggregateInput {
  allDay: SortOrder
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  notes: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  userActionId: SortOrder
}

input CalendarEventCreateInput {
  allDay: Boolean
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  createdAt: DateTime
  end: DateTime
  notes: String
  schedule: UserActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userAction: UserActionCreateNestedOneWithoutCalendarEventsInput
}

input CalendarEventCreateManyCalendarInput {
  allDay: Boolean
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  scheduleId: Int
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventCreateManyCalendarInputEnvelope {
  data: [CalendarEventCreateManyCalendarInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyInput {
  allDay: Boolean
  calendarId: Int!
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  scheduleId: Int
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventCreateManyScheduleInput {
  allDay: Boolean
  calendarId: Int!
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventCreateManyScheduleInputEnvelope {
  data: [CalendarEventCreateManyScheduleInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyUserActionInput {
  allDay: Boolean
  calendarId: Int!
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  scheduleId: Int
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
}

input CalendarEventCreateManyUserActionInputEnvelope {
  data: [CalendarEventCreateManyUserActionInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateNestedManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
}

input CalendarEventCreateNestedManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
}

input CalendarEventCreateNestedManyWithoutUserActionInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutUserActionInput!]
  create: [CalendarEventCreateWithoutUserActionInput!]
  createMany: CalendarEventCreateManyUserActionInputEnvelope
}

input CalendarEventCreateOrConnectWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutUserActionInput {
  create: CalendarEventCreateWithoutUserActionInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateWithoutCalendarInput {
  allDay: Boolean
  createdAt: DateTime
  end: DateTime
  notes: String
  schedule: UserActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userAction: UserActionCreateNestedOneWithoutCalendarEventsInput
}

input CalendarEventCreateWithoutScheduleInput {
  allDay: Boolean
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  createdAt: DateTime
  end: DateTime
  notes: String
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
  userAction: UserActionCreateNestedOneWithoutCalendarEventsInput
}

input CalendarEventCreateWithoutUserActionInput {
  allDay: Boolean
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  createdAt: DateTime
  end: DateTime
  notes: String
  schedule: UserActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTime!
  title: String!
  uid: String
  updatedAt: DateTime
}

type CalendarEventGroupBy {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
  allDay: Boolean!
  calendarId: Int!
  createdAt: DateTime!
  end: DateTime
  id: Int!
  notes: String
  scheduleId: Int
  start: DateTime!
  title: String!
  uid: String!
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventListRelationFilter {
  every: CalendarEventWhereInput
  none: CalendarEventWhereInput
  some: CalendarEventWhereInput
}

type CalendarEventMaxAggregate {
  allDay: Boolean
  calendarId: Int
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  scheduleId: Int
  start: DateTime
  title: String
  uid: String
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventMaxOrderByAggregateInput {
  allDay: SortOrder
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  notes: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  userActionId: SortOrder
}

type CalendarEventMinAggregate {
  allDay: Boolean
  calendarId: Int
  createdAt: DateTime
  end: DateTime
  id: Int
  notes: String
  scheduleId: Int
  start: DateTime
  title: String
  uid: String
  updatedAt: DateTime
  userActionId: Int
}

input CalendarEventMinOrderByAggregateInput {
  allDay: SortOrder
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  notes: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  userActionId: SortOrder
}

input CalendarEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarEventOrderByWithAggregationInput {
  _avg: CalendarEventAvgOrderByAggregateInput
  _count: CalendarEventCountOrderByAggregateInput
  _max: CalendarEventMaxOrderByAggregateInput
  _min: CalendarEventMinOrderByAggregateInput
  _sum: CalendarEventSumOrderByAggregateInput
  allDay: SortOrder
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  notes: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  userActionId: SortOrder
}

input CalendarEventOrderByWithRelationInput {
  allDay: SortOrder
  calendar: CalendarOrderByWithRelationInput
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  notes: SortOrder
  schedule: UserActionScheduleOrderByWithRelationInput
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  userAction: UserActionOrderByWithRelationInput
  userActionId: SortOrder
}

enum CalendarEventScalarFieldEnum {
  allDay
  calendarId
  createdAt
  end
  id
  notes
  scheduleId
  start
  title
  uid
  updatedAt
  userActionId
}

input CalendarEventScalarWhereInput {
  AND: [CalendarEventScalarWhereInput!]
  NOT: [CalendarEventScalarWhereInput!]
  OR: [CalendarEventScalarWhereInput!]
  allDay: BoolFilter
  calendarId: IntFilter
  createdAt: DateTimeFilter
  end: DateTimeNullableFilter
  id: IntFilter
  notes: StringNullableFilter
  scheduleId: IntNullableFilter
  start: DateTimeFilter
  title: StringFilter
  uid: StringFilter
  updatedAt: DateTimeNullableFilter
  userActionId: IntNullableFilter
}

input CalendarEventScalarWhereWithAggregatesInput {
  AND: [CalendarEventScalarWhereWithAggregatesInput!]
  NOT: [CalendarEventScalarWhereWithAggregatesInput!]
  OR: [CalendarEventScalarWhereWithAggregatesInput!]
  allDay: BoolWithAggregatesFilter
  calendarId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  end: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  scheduleId: IntNullableWithAggregatesFilter
  start: DateTimeWithAggregatesFilter
  title: StringWithAggregatesFilter
  uid: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userActionId: IntNullableWithAggregatesFilter
}

type CalendarEventSumAggregate {
  calendarId: Int
  id: Int
  scheduleId: Int
  userActionId: Int
}

input CalendarEventSumOrderByAggregateInput {
  calendarId: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  userActionId: SortOrder
}

input CalendarEventUpdateInput {
  allDay: BoolFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  schedule: UserActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutCalendarEventsInput
}

input CalendarEventUpdateManyMutationInput {
  allDay: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateManyWithWhereWithoutCalendarInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutScheduleInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutUserActionInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutCalendarInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutCalendarInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutCalendarInput!]
}

input CalendarEventUpdateManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutScheduleInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutScheduleInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutScheduleInput!]
}

input CalendarEventUpdateManyWithoutUserActionInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutUserActionInput!]
  create: [CalendarEventCreateWithoutUserActionInput!]
  createMany: CalendarEventCreateManyUserActionInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutUserActionInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutUserActionInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutUserActionInput!]
}

input CalendarEventUpdateWithWhereUniqueWithoutCalendarInput {
  data: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutScheduleInput {
  data: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutUserActionInput {
  data: CalendarEventUpdateWithoutUserActionInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithoutCalendarInput {
  allDay: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  schedule: UserActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutCalendarEventsInput
}

input CalendarEventUpdateWithoutScheduleInput {
  allDay: BoolFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutCalendarEventsInput
}

input CalendarEventUpdateWithoutUserActionInput {
  allDay: BoolFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  schedule: UserActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpsertWithWhereUniqueWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  update: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  update: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutUserActionInput {
  create: CalendarEventCreateWithoutUserActionInput!
  update: CalendarEventUpdateWithoutUserActionInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventWhereInput {
  AND: [CalendarEventWhereInput!]
  NOT: [CalendarEventWhereInput!]
  OR: [CalendarEventWhereInput!]
  allDay: BoolFilter
  calendar: CalendarRelationFilter
  calendarId: IntFilter
  createdAt: DateTimeFilter
  end: DateTimeNullableFilter
  id: IntFilter
  notes: StringNullableFilter
  schedule: UserActionScheduleRelationFilter
  scheduleId: IntNullableFilter
  start: DateTimeFilter
  title: StringFilter
  uid: StringFilter
  updatedAt: DateTimeNullableFilter
  userAction: UserActionRelationFilter
  userActionId: IntNullableFilter
}

input CalendarEventWhereUniqueInput {
  id: Int
  uid: String
}

type CalendarGroupBy {
  _avg: CalendarAvgAggregate
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
  _sum: CalendarSumAggregate
  color: Color
  id: Int!
  isPublic: Boolean!
  name: String
  uid: String!
  userId: String!
}

input CalendarListRelationFilter {
  every: CalendarWhereInput
  none: CalendarWhereInput
  some: CalendarWhereInput
}

type CalendarMaxAggregate {
  color: Color
  id: Int
  isPublic: Boolean
  name: String
  uid: String
  userId: String
}

input CalendarMaxOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  uid: SortOrder
  userId: SortOrder
}

type CalendarMinAggregate {
  color: Color
  id: Int
  isPublic: Boolean
  name: String
  uid: String
  userId: String
}

input CalendarMinOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input CalendarOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarOrderByWithAggregationInput {
  _avg: CalendarAvgOrderByAggregateInput
  _count: CalendarCountOrderByAggregateInput
  _max: CalendarMaxOrderByAggregateInput
  _min: CalendarMinOrderByAggregateInput
  _sum: CalendarSumOrderByAggregateInput
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input CalendarOrderByWithRelationInput {
  color: SortOrder
  events: CalendarEventOrderByRelationAggregateInput
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  uid: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input CalendarRelationFilter {
  is: CalendarWhereInput
  isNot: CalendarWhereInput
}

enum CalendarScalarFieldEnum {
  color
  id
  isPublic
  name
  uid
  userId
}

input CalendarScalarWhereInput {
  AND: [CalendarScalarWhereInput!]
  NOT: [CalendarScalarWhereInput!]
  OR: [CalendarScalarWhereInput!]
  color: EnumColorNullableFilter
  id: IntFilter
  isPublic: BoolFilter
  name: StringNullableFilter
  uid: StringFilter
  userId: StringFilter
}

input CalendarScalarWhereWithAggregatesInput {
  AND: [CalendarScalarWhereWithAggregatesInput!]
  NOT: [CalendarScalarWhereWithAggregatesInput!]
  OR: [CalendarScalarWhereWithAggregatesInput!]
  color: EnumColorNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  uid: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type CalendarSumAggregate {
  id: Int
}

input CalendarSumOrderByAggregateInput {
  id: SortOrder
}

input CalendarUpdateInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateManyMutationInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input CalendarUpdateManyWithWhereWithoutUserInput {
  data: CalendarUpdateManyMutationInput!
  where: CalendarScalarWhereInput!
}

input CalendarUpdateManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
  delete: [CalendarWhereUniqueInput!]
  deleteMany: [CalendarScalarWhereInput!]
  disconnect: [CalendarWhereUniqueInput!]
  set: [CalendarWhereUniqueInput!]
  update: [CalendarUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CalendarUpdateManyWithWhereWithoutUserInput!]
  upsert: [CalendarUpsertWithWhereUniqueWithoutUserInput!]
}

input CalendarUpdateOneRequiredWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
  update: CalendarUpdateWithoutEventsInput
  upsert: CalendarUpsertWithoutEventsInput
}

input CalendarUpdateWithWhereUniqueWithoutUserInput {
  data: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpdateWithoutEventsInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateWithoutUserInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input CalendarUpsertWithWhereUniqueWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  update: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpsertWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  update: CalendarUpdateWithoutEventsInput!
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  color: EnumColorNullableFilter
  events: CalendarEventListRelationFilter
  id: IntFilter
  isPublic: BoolFilter
  name: StringNullableFilter
  uid: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CalendarWhereUniqueInput {
  id: Int
  uid: String
}

enum Color {
  BLUE
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input EnumColorNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumColorNullableFilter
  _min: NestedEnumColorNullableFilter
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableWithAggregatesFilter
  notIn: [Color!]
}

input EnumFREQUENCYFieldUpdateOperationsInput {
  set: FREQUENCY
}

input EnumFREQUENCYFilter {
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYFilter
  notIn: [FREQUENCY!]
}

input EnumFREQUENCYWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFREQUENCYFilter
  _min: NestedEnumFREQUENCYFilter
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYWithAggregatesFilter
  notIn: [FREQUENCY!]
}

enum FREQUENCY {
  DAY
  HOUR
  MINUTE
  MONTH
  WEEK
  YEAR
}

type Goal {
  _count: GoalCount!
  goal: Goal
  goalId: Int
  id: Int!
  milestones(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  quantity: Int!
  userAction: UserAction!
  userActionId: Int!
}

type GoalAvgAggregate {
  goalId: Float
  id: Float
  quantity: Float
  userActionId: Float
}

input GoalAvgOrderByAggregateInput {
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

type GoalCount {
  milestones: Int!
}

type GoalCountAggregate {
  _all: Int!
  goalId: Int!
  id: Int!
  quantity: Int!
  userActionId: Int!
}

input GoalCountOrderByAggregateInput {
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input GoalCreateInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
  userAction: UserActionCreateNestedOneWithoutGoalsInput!
}

input GoalCreateManyGoalInput {
  id: Int
  quantity: Int!
  userActionId: Int!
}

input GoalCreateManyGoalInputEnvelope {
  data: [GoalCreateManyGoalInput!]!
  skipDuplicates: Boolean
}

input GoalCreateManyInput {
  goalId: Int
  id: Int
  quantity: Int!
  userActionId: Int!
}

input GoalCreateManyUserActionInput {
  goalId: Int
  id: Int
  quantity: Int!
}

input GoalCreateManyUserActionInputEnvelope {
  data: [GoalCreateManyUserActionInput!]!
  skipDuplicates: Boolean
}

input GoalCreateNestedManyWithoutGoalInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutGoalInput!]
  create: [GoalCreateWithoutGoalInput!]
  createMany: GoalCreateManyGoalInputEnvelope
}

input GoalCreateNestedManyWithoutUserActionInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutUserActionInput!]
  create: [GoalCreateWithoutUserActionInput!]
  createMany: GoalCreateManyUserActionInputEnvelope
}

input GoalCreateNestedOneWithoutMilestonesInput {
  connect: GoalWhereUniqueInput
  connectOrCreate: GoalCreateOrConnectWithoutMilestonesInput
  create: GoalCreateWithoutMilestonesInput
}

input GoalCreateOrConnectWithoutGoalInput {
  create: GoalCreateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateOrConnectWithoutMilestonesInput {
  create: GoalCreateWithoutMilestonesInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateOrConnectWithoutUserActionInput {
  create: GoalCreateWithoutUserActionInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateWithoutGoalInput {
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
  userAction: UserActionCreateNestedOneWithoutGoalsInput!
}

input GoalCreateWithoutMilestonesInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  quantity: Int!
  userAction: UserActionCreateNestedOneWithoutGoalsInput!
}

input GoalCreateWithoutUserActionInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
}

type GoalGroupBy {
  _avg: GoalAvgAggregate
  _count: GoalCountAggregate
  _max: GoalMaxAggregate
  _min: GoalMinAggregate
  _sum: GoalSumAggregate
  goalId: Int
  id: Int!
  quantity: Int!
  userActionId: Int!
}

input GoalListRelationFilter {
  every: GoalWhereInput
  none: GoalWhereInput
  some: GoalWhereInput
}

type GoalMaxAggregate {
  goalId: Int
  id: Int
  quantity: Int
  userActionId: Int
}

input GoalMaxOrderByAggregateInput {
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

type GoalMinAggregate {
  goalId: Int
  id: Int
  quantity: Int
  userActionId: Int
}

input GoalMinOrderByAggregateInput {
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input GoalOrderByRelationAggregateInput {
  _count: SortOrder
}

input GoalOrderByWithAggregationInput {
  _avg: GoalAvgOrderByAggregateInput
  _count: GoalCountOrderByAggregateInput
  _max: GoalMaxOrderByAggregateInput
  _min: GoalMinOrderByAggregateInput
  _sum: GoalSumOrderByAggregateInput
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input GoalOrderByWithRelationInput {
  goal: GoalOrderByWithRelationInput
  goalId: SortOrder
  id: SortOrder
  milestones: GoalOrderByRelationAggregateInput
  quantity: SortOrder
  userAction: UserActionOrderByWithRelationInput
  userActionId: SortOrder
}

input GoalRelationFilter {
  is: GoalWhereInput
  isNot: GoalWhereInput
}

enum GoalScalarFieldEnum {
  goalId
  id
  quantity
  userActionId
}

input GoalScalarWhereInput {
  AND: [GoalScalarWhereInput!]
  NOT: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
  goalId: IntNullableFilter
  id: IntFilter
  quantity: IntFilter
  userActionId: IntFilter
}

input GoalScalarWhereWithAggregatesInput {
  AND: [GoalScalarWhereWithAggregatesInput!]
  NOT: [GoalScalarWhereWithAggregatesInput!]
  OR: [GoalScalarWhereWithAggregatesInput!]
  goalId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  userActionId: IntWithAggregatesFilter
}

type GoalSumAggregate {
  goalId: Int
  id: Int
  quantity: Int
  userActionId: Int
}

input GoalSumOrderByAggregateInput {
  goalId: SortOrder
  id: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input GoalUpdateInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpdateManyWithWhereWithoutGoalInput {
  data: GoalUpdateManyMutationInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateManyWithWhereWithoutUserActionInput {
  data: GoalUpdateManyMutationInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateManyWithoutGoalInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutGoalInput!]
  create: [GoalCreateWithoutGoalInput!]
  createMany: GoalCreateManyGoalInputEnvelope
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutGoalInput!]
  updateMany: [GoalUpdateManyWithWhereWithoutGoalInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutGoalInput!]
}

input GoalUpdateManyWithoutUserActionInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutUserActionInput!]
  create: [GoalCreateWithoutUserActionInput!]
  createMany: GoalCreateManyUserActionInputEnvelope
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutUserActionInput!]
  updateMany: [GoalUpdateManyWithWhereWithoutUserActionInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutUserActionInput!]
}

input GoalUpdateOneWithoutMilestonesInput {
  connect: GoalWhereUniqueInput
  connectOrCreate: GoalCreateOrConnectWithoutMilestonesInput
  create: GoalCreateWithoutMilestonesInput
  delete: Boolean
  disconnect: Boolean
  update: GoalUpdateWithoutMilestonesInput
  upsert: GoalUpsertWithoutMilestonesInput
}

input GoalUpdateWithWhereUniqueWithoutGoalInput {
  data: GoalUpdateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalUpdateWithWhereUniqueWithoutUserActionInput {
  data: GoalUpdateWithoutUserActionInput!
  where: GoalWhereUniqueInput!
}

input GoalUpdateWithoutGoalInput {
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateWithoutMilestonesInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateWithoutUserActionInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpsertWithWhereUniqueWithoutGoalInput {
  create: GoalCreateWithoutGoalInput!
  update: GoalUpdateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithWhereUniqueWithoutUserActionInput {
  create: GoalCreateWithoutUserActionInput!
  update: GoalUpdateWithoutUserActionInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithoutMilestonesInput {
  create: GoalCreateWithoutMilestonesInput!
  update: GoalUpdateWithoutMilestonesInput!
}

input GoalWhereInput {
  AND: [GoalWhereInput!]
  NOT: [GoalWhereInput!]
  OR: [GoalWhereInput!]
  goal: GoalRelationFilter
  goalId: IntNullableFilter
  id: IntFilter
  milestones: GoalListRelationFilter
  quantity: IntFilter
  userAction: UserActionRelationFilter
  userActionId: IntFilter
}

input GoalWhereUniqueInput {
  id: Int
}

type Identity {
  _count: IdentityCount!
  actionRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  description: String
  id: Int!
  name: String!
  slug: String!
  userIdentities(cursor: UserIdentityWhereUniqueInput, distinct: [UserIdentityScalarFieldEnum!], orderBy: [UserIdentityOrderByWithRelationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): [UserIdentity!]!
}

type IdentityActionRelation {
  action: Action!
  actionId: Int!
  deleted: DateTime
  id: Int!
  identity: Identity!
  identityId: Int!
}

type IdentityActionRelationAvgAggregate {
  actionId: Float
  id: Float
  identityId: Float
}

input IdentityActionRelationAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActionRelationCountAggregate {
  _all: Int!
  actionId: Int!
  deleted: Int!
  id: Int!
  identityId: Int!
}

input IdentityActionRelationCountOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationCreateInput {
  action: ActionCreateNestedOneWithoutIdentityRelationsInput!
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

input IdentityActionRelationCreateManyActionInput {
  deleted: DateTime
  id: Int
  identityId: Int!
}

input IdentityActionRelationCreateManyActionInputEnvelope {
  data: [IdentityActionRelationCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input IdentityActionRelationCreateManyIdentityInput {
  actionId: Int!
  deleted: DateTime
  id: Int
}

input IdentityActionRelationCreateManyIdentityInputEnvelope {
  data: [IdentityActionRelationCreateManyIdentityInput!]!
  skipDuplicates: Boolean
}

input IdentityActionRelationCreateManyInput {
  actionId: Int!
  deleted: DateTime
  id: Int
  identityId: Int!
}

input IdentityActionRelationCreateNestedManyWithoutActionInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActionRelationCreateWithoutActionInput!]
  createMany: IdentityActionRelationCreateManyActionInputEnvelope
}

input IdentityActionRelationCreateNestedManyWithoutIdentityInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutIdentityInput!]
  create: [IdentityActionRelationCreateWithoutIdentityInput!]
  createMany: IdentityActionRelationCreateManyIdentityInputEnvelope
}

input IdentityActionRelationCreateOrConnectWithoutActionInput {
  create: IdentityActionRelationCreateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationCreateOrConnectWithoutIdentityInput {
  create: IdentityActionRelationCreateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationCreateWithoutActionInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

input IdentityActionRelationCreateWithoutIdentityInput {
  action: ActionCreateNestedOneWithoutIdentityRelationsInput!
  deleted: DateTime
}

type IdentityActionRelationGroupBy {
  _avg: IdentityActionRelationAvgAggregate
  _count: IdentityActionRelationCountAggregate
  _max: IdentityActionRelationMaxAggregate
  _min: IdentityActionRelationMinAggregate
  _sum: IdentityActionRelationSumAggregate
  actionId: Int!
  deleted: DateTime
  id: Int!
  identityId: Int!
}

input IdentityActionRelationIdentityIdActionIdCompoundUniqueInput {
  actionId: Int!
  identityId: Int!
}

input IdentityActionRelationListRelationFilter {
  every: IdentityActionRelationWhereInput
  none: IdentityActionRelationWhereInput
  some: IdentityActionRelationWhereInput
}

type IdentityActionRelationMaxAggregate {
  actionId: Int
  deleted: DateTime
  id: Int
  identityId: Int
}

input IdentityActionRelationMaxOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActionRelationMinAggregate {
  actionId: Int
  deleted: DateTime
  id: Int
  identityId: Int
}

input IdentityActionRelationMinOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentityActionRelationOrderByWithAggregationInput {
  _avg: IdentityActionRelationAvgOrderByAggregateInput
  _count: IdentityActionRelationCountOrderByAggregateInput
  _max: IdentityActionRelationMaxOrderByAggregateInput
  _min: IdentityActionRelationMinOrderByAggregateInput
  _sum: IdentityActionRelationSumOrderByAggregateInput
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identity: IdentityOrderByWithRelationInput
  identityId: SortOrder
}

enum IdentityActionRelationScalarFieldEnum {
  actionId
  deleted
  id
  identityId
}

input IdentityActionRelationScalarWhereInput {
  AND: [IdentityActionRelationScalarWhereInput!]
  NOT: [IdentityActionRelationScalarWhereInput!]
  OR: [IdentityActionRelationScalarWhereInput!]
  actionId: IntFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  identityId: IntFilter
}

input IdentityActionRelationScalarWhereWithAggregatesInput {
  AND: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  NOT: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  OR: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  identityId: IntWithAggregatesFilter
}

type IdentityActionRelationSumAggregate {
  actionId: Int
  id: Int
  identityId: Int
}

input IdentityActionRelationSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationUpdateInput {
  action: ActionUpdateOneRequiredWithoutIdentityRelationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActionRelationUpdateManyMutationInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input IdentityActionRelationUpdateManyWithWhereWithoutActionInput {
  data: IdentityActionRelationUpdateManyMutationInput!
  where: IdentityActionRelationScalarWhereInput!
}

input IdentityActionRelationUpdateManyWithWhereWithoutIdentityInput {
  data: IdentityActionRelationUpdateManyMutationInput!
  where: IdentityActionRelationScalarWhereInput!
}

input IdentityActionRelationUpdateManyWithoutActionInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActionRelationCreateWithoutActionInput!]
  createMany: IdentityActionRelationCreateManyActionInputEnvelope
  delete: [IdentityActionRelationWhereUniqueInput!]
  deleteMany: [IdentityActionRelationScalarWhereInput!]
  disconnect: [IdentityActionRelationWhereUniqueInput!]
  set: [IdentityActionRelationWhereUniqueInput!]
  update: [IdentityActionRelationUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [IdentityActionRelationUpdateManyWithWhereWithoutActionInput!]
  upsert: [IdentityActionRelationUpsertWithWhereUniqueWithoutActionInput!]
}

input IdentityActionRelationUpdateManyWithoutIdentityInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutIdentityInput!]
  create: [IdentityActionRelationCreateWithoutIdentityInput!]
  createMany: IdentityActionRelationCreateManyIdentityInputEnvelope
  delete: [IdentityActionRelationWhereUniqueInput!]
  deleteMany: [IdentityActionRelationScalarWhereInput!]
  disconnect: [IdentityActionRelationWhereUniqueInput!]
  set: [IdentityActionRelationWhereUniqueInput!]
  update: [IdentityActionRelationUpdateWithWhereUniqueWithoutIdentityInput!]
  updateMany: [IdentityActionRelationUpdateManyWithWhereWithoutIdentityInput!]
  upsert: [IdentityActionRelationUpsertWithWhereUniqueWithoutIdentityInput!]
}

input IdentityActionRelationUpdateWithWhereUniqueWithoutActionInput {
  data: IdentityActionRelationUpdateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpdateWithWhereUniqueWithoutIdentityInput {
  data: IdentityActionRelationUpdateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpdateWithoutActionInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActionRelationUpdateWithoutIdentityInput {
  action: ActionUpdateOneRequiredWithoutIdentityRelationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input IdentityActionRelationUpsertWithWhereUniqueWithoutActionInput {
  create: IdentityActionRelationCreateWithoutActionInput!
  update: IdentityActionRelationUpdateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpsertWithWhereUniqueWithoutIdentityInput {
  create: IdentityActionRelationCreateWithoutIdentityInput!
  update: IdentityActionRelationUpdateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationWhereInput {
  AND: [IdentityActionRelationWhereInput!]
  NOT: [IdentityActionRelationWhereInput!]
  OR: [IdentityActionRelationWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  identity: IdentityRelationFilter
  identityId: IntFilter
}

input IdentityActionRelationWhereUniqueInput {
  id: Int
  identityId_actionId: IdentityActionRelationIdentityIdActionIdCompoundUniqueInput
}

type IdentityAvgAggregate {
  id: Float
}

input IdentityAvgOrderByAggregateInput {
  id: SortOrder
}

type IdentityCount {
  actionRelations: Int!
  userIdentities: Int!
}

type IdentityCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input IdentityCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityCreateInput {
  actionRelations: IdentityActionRelationCreateNestedManyWithoutIdentityInput
  description: String
  name: String!
  slug: String!
  userIdentities: UserIdentityCreateNestedManyWithoutIdentityInput
}

input IdentityCreateManyInput {
  description: String
  id: Int
  name: String!
  slug: String!
}

input IdentityCreateNestedOneWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
}

input IdentityCreateNestedOneWithoutUserIdentitiesInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutUserIdentitiesInput
  create: IdentityCreateWithoutUserIdentitiesInput
}

input IdentityCreateOrConnectWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateOrConnectWithoutUserIdentitiesInput {
  create: IdentityCreateWithoutUserIdentitiesInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateWithoutActionRelationsInput {
  description: String
  name: String!
  slug: String!
  userIdentities: UserIdentityCreateNestedManyWithoutIdentityInput
}

input IdentityCreateWithoutUserIdentitiesInput {
  actionRelations: IdentityActionRelationCreateNestedManyWithoutIdentityInput
  description: String
  name: String!
  slug: String!
}

type IdentityGroupBy {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
  description: String
  id: Int!
  name: String!
  slug: String!
}

type IdentityMaxAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input IdentityMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type IdentityMinAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input IdentityMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByWithAggregationInput {
  _avg: IdentityAvgOrderByAggregateInput
  _count: IdentityCountOrderByAggregateInput
  _max: IdentityMaxOrderByAggregateInput
  _min: IdentityMinOrderByAggregateInput
  _sum: IdentitySumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByWithRelationInput {
  actionRelations: IdentityActionRelationOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  userIdentities: UserIdentityOrderByRelationAggregateInput
}

input IdentityRelationFilter {
  is: IdentityWhereInput
  isNot: IdentityWhereInput
}

enum IdentityScalarFieldEnum {
  description
  id
  name
  slug
}

input IdentityScalarWhereWithAggregatesInput {
  AND: [IdentityScalarWhereWithAggregatesInput!]
  NOT: [IdentityScalarWhereWithAggregatesInput!]
  OR: [IdentityScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type IdentitySumAggregate {
  id: Int
}

input IdentitySumOrderByAggregateInput {
  id: SortOrder
}

input IdentityUpdateInput {
  actionRelations: IdentityActionRelationUpdateManyWithoutIdentityInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  userIdentities: UserIdentityUpdateManyWithoutIdentityInput
}

input IdentityUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateOneRequiredWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
  update: IdentityUpdateWithoutActionRelationsInput
  upsert: IdentityUpsertWithoutActionRelationsInput
}

input IdentityUpdateOneRequiredWithoutUserIdentitiesInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutUserIdentitiesInput
  create: IdentityCreateWithoutUserIdentitiesInput
  update: IdentityUpdateWithoutUserIdentitiesInput
  upsert: IdentityUpsertWithoutUserIdentitiesInput
}

input IdentityUpdateWithoutActionRelationsInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  userIdentities: UserIdentityUpdateManyWithoutIdentityInput
}

input IdentityUpdateWithoutUserIdentitiesInput {
  actionRelations: IdentityActionRelationUpdateManyWithoutIdentityInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpsertWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  update: IdentityUpdateWithoutActionRelationsInput!
}

input IdentityUpsertWithoutUserIdentitiesInput {
  create: IdentityCreateWithoutUserIdentitiesInput!
  update: IdentityUpdateWithoutUserIdentitiesInput!
}

input IdentityWhereInput {
  AND: [IdentityWhereInput!]
  NOT: [IdentityWhereInput!]
  OR: [IdentityWhereInput!]
  actionRelations: IdentityActionRelationListRelationFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  userIdentities: UserIdentityListRelationFilter
}

input IdentityWhereUniqueInput {
  id: Int
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createAction(data: ActionCreateInput!): Action!
  createActionCompletion(data: ActionCompletionCreateInput!): ActionCompletion!
  createActionScheduleTemplate(data: ActionScheduleTemplateCreateInput!): ActionScheduleTemplate!
  createBelief(data: BeliefCreateInput!): Belief!
  createCalendar(data: CalendarCreateInput!): Calendar!
  createCalendarEvent(data: CalendarEventCreateInput!): CalendarEvent!
  createGoal(data: GoalCreateInput!): Goal!
  createIdentity(data: IdentityCreateInput!): Identity!
  createIdentityActionRelation(data: IdentityActionRelationCreateInput!): IdentityActionRelation!
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionCompletion(data: [ActionCompletionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionScheduleTemplate(data: [ActionScheduleTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBelief(data: [BeliefCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendar(data: [CalendarCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendarEvent(data: [CalendarEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyGoal(data: [GoalCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentity(data: [IdentityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentityActionRelation(data: [IdentityActionRelationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyScheduleTemplate(data: [ScheduleTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserAction(data: [UserActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserActionSchedule(data: [UserActionScheduleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserBelief(data: [UserBeliefCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserIdentity(data: [UserIdentityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserValue(data: [UserValueCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyValue(data: [ValueCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createScheduleTemplate(data: ScheduleTemplateCreateInput!): ScheduleTemplate!
  createUser(data: UserCreateInput!): User!
  createUserAction(data: UserActionCreateInput!): UserAction!
  createUserActionSchedule(data: UserActionScheduleCreateInput!): UserActionSchedule!
  createUserBelief(data: UserBeliefCreateInput!): UserBelief!
  createUserIdentity(data: UserIdentityCreateInput!): UserIdentity!
  createUserValue(data: UserValueCreateInput!): UserValue!
  createValue(data: ValueCreateInput!): Value!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionCompletion(where: ActionCompletionWhereUniqueInput!): ActionCompletion
  deleteActionScheduleTemplate(where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  deleteBelief(where: BeliefWhereUniqueInput!): Belief
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteIdentity(where: IdentityWhereUniqueInput!): Identity
  deleteIdentityActionRelation(where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyActionCompletion(where: ActionCompletionWhereInput): AffectedRowsOutput!
  deleteManyActionScheduleTemplate(where: ActionScheduleTemplateWhereInput): AffectedRowsOutput!
  deleteManyBelief(where: BeliefWhereInput): AffectedRowsOutput!
  deleteManyCalendar(where: CalendarWhereInput): AffectedRowsOutput!
  deleteManyCalendarEvent(where: CalendarEventWhereInput): AffectedRowsOutput!
  deleteManyGoal(where: GoalWhereInput): AffectedRowsOutput!
  deleteManyIdentity(where: IdentityWhereInput): AffectedRowsOutput!
  deleteManyIdentityActionRelation(where: IdentityActionRelationWhereInput): AffectedRowsOutput!
  deleteManyScheduleTemplate(where: ScheduleTemplateWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserAction(where: UserActionWhereInput): AffectedRowsOutput!
  deleteManyUserActionSchedule(where: UserActionScheduleWhereInput): AffectedRowsOutput!
  deleteManyUserBelief(where: UserBeliefWhereInput): AffectedRowsOutput!
  deleteManyUserIdentity(where: UserIdentityWhereInput): AffectedRowsOutput!
  deleteManyUserValue(where: UserValueWhereInput): AffectedRowsOutput!
  deleteManyValue(where: ValueWhereInput): AffectedRowsOutput!
  deleteScheduleTemplate(where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserAction(where: UserActionWhereUniqueInput!): UserAction
  deleteUserActionSchedule(where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  deleteUserBelief(where: UserBeliefWhereUniqueInput!): UserBelief
  deleteUserIdentity(where: UserIdentityWhereUniqueInput!): UserIdentity
  deleteUserValue(where: UserValueWhereUniqueInput!): UserValue
  deleteValue(where: ValueWhereUniqueInput!): Value
  toggleUserActionAdoption(abandonedAt: DateTime, actionId: Int!, userId: String!): UserAction!
  toggleUserBelief(beliefId: Int!, deleted: DateTime, userId: String!): UserBelief!
  toggleUserIdentity(deleted: DateTime, identityId: Int!, userId: String!): UserIdentity!
  toggleUserValue(deletedAt: DateTime, userId: String!, valueId: Int!): UserValue!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionCompletion(data: ActionCompletionUpdateInput!, where: ActionCompletionWhereUniqueInput!): ActionCompletion
  updateActionScheduleTemplate(data: ActionScheduleTemplateUpdateInput!, where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  updateBelief(data: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief
  updateCalendar(data: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar
  updateCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity
  updateIdentityActionRelation(data: IdentityActionRelationUpdateInput!, where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyActionCompletion(data: ActionCompletionUpdateManyMutationInput!, where: ActionCompletionWhereInput): AffectedRowsOutput!
  updateManyActionScheduleTemplate(data: ActionScheduleTemplateUpdateManyMutationInput!, where: ActionScheduleTemplateWhereInput): AffectedRowsOutput!
  updateManyBelief(data: BeliefUpdateManyMutationInput!, where: BeliefWhereInput): AffectedRowsOutput!
  updateManyCalendar(data: CalendarUpdateManyMutationInput!, where: CalendarWhereInput): AffectedRowsOutput!
  updateManyCalendarEvent(data: CalendarEventUpdateManyMutationInput!, where: CalendarEventWhereInput): AffectedRowsOutput!
  updateManyGoal(data: GoalUpdateManyMutationInput!, where: GoalWhereInput): AffectedRowsOutput!
  updateManyIdentity(data: IdentityUpdateManyMutationInput!, where: IdentityWhereInput): AffectedRowsOutput!
  updateManyIdentityActionRelation(data: IdentityActionRelationUpdateManyMutationInput!, where: IdentityActionRelationWhereInput): AffectedRowsOutput!
  updateManyScheduleTemplate(data: ScheduleTemplateUpdateManyMutationInput!, where: ScheduleTemplateWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserAction(data: UserActionUpdateManyMutationInput!, where: UserActionWhereInput): AffectedRowsOutput!
  updateManyUserActionSchedule(data: UserActionScheduleUpdateManyMutationInput!, where: UserActionScheduleWhereInput): AffectedRowsOutput!
  updateManyUserBelief(data: UserBeliefUpdateManyMutationInput!, where: UserBeliefWhereInput): AffectedRowsOutput!
  updateManyUserIdentity(data: UserIdentityUpdateManyMutationInput!, where: UserIdentityWhereInput): AffectedRowsOutput!
  updateManyUserValue(data: UserValueUpdateManyMutationInput!, where: UserValueWhereInput): AffectedRowsOutput!
  updateManyValue(data: ValueUpdateManyMutationInput!, where: ValueWhereInput): AffectedRowsOutput!
  updateScheduleTemplate(data: ScheduleTemplateUpdateInput!, where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserAction(data: UserActionUpdateInput!, where: UserActionWhereUniqueInput!): UserAction
  updateUserActionSchedule(data: UserActionScheduleUpdateInput!, where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  updateUserBelief(data: UserBeliefUpdateInput!, where: UserBeliefWhereUniqueInput!): UserBelief
  updateUserIdentity(data: UserIdentityUpdateInput!, where: UserIdentityWhereUniqueInput!): UserIdentity
  updateUserValue(data: UserValueUpdateInput!, where: UserValueWhereUniqueInput!): UserValue
  updateValue(data: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertActionCompletion(create: ActionCompletionCreateInput!, update: ActionCompletionUpdateInput!, where: ActionCompletionWhereUniqueInput!): ActionCompletion!
  upsertActionScheduleTemplate(create: ActionScheduleTemplateCreateInput!, update: ActionScheduleTemplateUpdateInput!, where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate!
  upsertBelief(create: BeliefCreateInput!, update: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief!
  upsertCalendar(create: CalendarCreateInput!, update: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar!
  upsertCalendarEvent(create: CalendarEventCreateInput!, update: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  upsertGoal(create: GoalCreateInput!, update: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal!
  upsertIdentity(create: IdentityCreateInput!, update: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity!
  upsertIdentityActionRelation(create: IdentityActionRelationCreateInput!, update: IdentityActionRelationUpdateInput!, where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation!
  upsertScheduleTemplate(create: ScheduleTemplateCreateInput!, update: ScheduleTemplateUpdateInput!, where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUserAction(create: UserActionCreateInput!, update: UserActionUpdateInput!, where: UserActionWhereUniqueInput!): UserAction!
  upsertUserActionSchedule(create: UserActionScheduleCreateInput!, update: UserActionScheduleUpdateInput!, where: UserActionScheduleWhereUniqueInput!): UserActionSchedule!
  upsertUserBelief(create: UserBeliefCreateInput!, update: UserBeliefUpdateInput!, where: UserBeliefWhereUniqueInput!): UserBelief!
  upsertUserIdentity(create: UserIdentityCreateInput!, update: UserIdentityUpdateInput!, where: UserIdentityWhereUniqueInput!): UserIdentity!
  upsertUserValue(create: UserValueCreateInput!, update: UserValueUpdateInput!, where: UserValueWhereUniqueInput!): UserValue!
  upsertValue(create: ValueCreateInput!, update: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input NestedEnumColorNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumColorNullableFilter
  _min: NestedEnumColorNullableFilter
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableWithAggregatesFilter
  notIn: [Color!]
}

input NestedEnumFREQUENCYFilter {
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYFilter
  notIn: [FREQUENCY!]
}

input NestedEnumFREQUENCYWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFREQUENCYFilter
  _min: NestedEnumFREQUENCYFilter
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYWithAggregatesFilter
  notIn: [FREQUENCY!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumColorFieldUpdateOperationsInput {
  set: Color
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  action(where: ActionWhereUniqueInput!): Action
  actionCompletion(where: ActionCompletionWhereUniqueInput!): ActionCompletion
  actionCompletions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  actionScheduleTemplate(where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  actionScheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateActionCompletion(cursor: ActionCompletionWhereUniqueInput, orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): AggregateActionCompletion!
  aggregateActionScheduleTemplate(cursor: ActionScheduleTemplateWhereUniqueInput, orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): AggregateActionScheduleTemplate!
  aggregateBelief(cursor: BeliefWhereUniqueInput, orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): AggregateBelief!
  aggregateCalendar(cursor: CalendarWhereUniqueInput, orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): AggregateCalendar!
  aggregateCalendarEvent(cursor: CalendarEventWhereUniqueInput, orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): AggregateCalendarEvent!
  aggregateGoal(cursor: GoalWhereUniqueInput, orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): AggregateGoal!
  aggregateIdentity(cursor: IdentityWhereUniqueInput, orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): AggregateIdentity!
  aggregateIdentityActionRelation(cursor: IdentityActionRelationWhereUniqueInput, orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): AggregateIdentityActionRelation!
  aggregateScheduleTemplate(cursor: ScheduleTemplateWhereUniqueInput, orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): AggregateScheduleTemplate!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserAction(cursor: UserActionWhereUniqueInput, orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): AggregateUserAction!
  aggregateUserActionSchedule(cursor: UserActionScheduleWhereUniqueInput, orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): AggregateUserActionSchedule!
  aggregateUserBelief(cursor: UserBeliefWhereUniqueInput, orderBy: [UserBeliefOrderByWithRelationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): AggregateUserBelief!
  aggregateUserIdentity(cursor: UserIdentityWhereUniqueInput, orderBy: [UserIdentityOrderByWithRelationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): AggregateUserIdentity!
  aggregateUserValue(cursor: UserValueWhereUniqueInput, orderBy: [UserValueOrderByWithRelationInput!], skip: Int, take: Int, where: UserValueWhereInput): AggregateUserValue!
  aggregateValue(cursor: ValueWhereUniqueInput, orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): AggregateValue!
  belief(where: BeliefWhereUniqueInput!): Belief
  beliefs(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): [Belief!]!
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionCompletion(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): ActionCompletion
  findFirstActionScheduleTemplate(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): ActionScheduleTemplate
  findFirstBelief(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): Belief
  findFirstCalendar(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): Calendar
  findFirstCalendarEvent(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): CalendarEvent
  findFirstGoal(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): Goal
  findFirstIdentity(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): Identity
  findFirstIdentityActionRelation(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): IdentityActionRelation
  findFirstScheduleTemplate(cursor: ScheduleTemplateWhereUniqueInput, distinct: [ScheduleTemplateScalarFieldEnum!], orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): ScheduleTemplate
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserAction(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): UserAction
  findFirstUserActionSchedule(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): UserActionSchedule
  findFirstUserBelief(cursor: UserBeliefWhereUniqueInput, distinct: [UserBeliefScalarFieldEnum!], orderBy: [UserBeliefOrderByWithRelationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): UserBelief
  findFirstUserIdentity(cursor: UserIdentityWhereUniqueInput, distinct: [UserIdentityScalarFieldEnum!], orderBy: [UserIdentityOrderByWithRelationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): UserIdentity
  findFirstUserValue(cursor: UserValueWhereUniqueInput, distinct: [UserValueScalarFieldEnum!], orderBy: [UserValueOrderByWithRelationInput!], skip: Int, take: Int, where: UserValueWhereInput): UserValue
  findFirstValue(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): Value
  goal(where: GoalWhereUniqueInput!): Goal
  goals(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByActionCompletion(by: [ActionCompletionScalarFieldEnum!]!, having: ActionCompletionScalarWhereWithAggregatesInput, orderBy: [ActionCompletionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletionGroupBy!]!
  groupByActionScheduleTemplate(by: [ActionScheduleTemplateScalarFieldEnum!]!, having: ActionScheduleTemplateScalarWhereWithAggregatesInput, orderBy: [ActionScheduleTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplateGroupBy!]!
  groupByBelief(by: [BeliefScalarFieldEnum!]!, having: BeliefScalarWhereWithAggregatesInput, orderBy: [BeliefOrderByWithAggregationInput!], skip: Int, take: Int, where: BeliefWhereInput): [BeliefGroupBy!]!
  groupByCalendar(by: [CalendarScalarFieldEnum!]!, having: CalendarScalarWhereWithAggregatesInput, orderBy: [CalendarOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarWhereInput): [CalendarGroupBy!]!
  groupByCalendarEvent(by: [CalendarEventScalarFieldEnum!]!, having: CalendarEventScalarWhereWithAggregatesInput, orderBy: [CalendarEventOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEventGroupBy!]!
  groupByGoal(by: [GoalScalarFieldEnum!]!, having: GoalScalarWhereWithAggregatesInput, orderBy: [GoalOrderByWithAggregationInput!], skip: Int, take: Int, where: GoalWhereInput): [GoalGroupBy!]!
  groupByIdentity(by: [IdentityScalarFieldEnum!]!, having: IdentityScalarWhereWithAggregatesInput, orderBy: [IdentityOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityWhereInput): [IdentityGroupBy!]!
  groupByIdentityActionRelation(by: [IdentityActionRelationScalarFieldEnum!]!, having: IdentityActionRelationScalarWhereWithAggregatesInput, orderBy: [IdentityActionRelationOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelationGroupBy!]!
  groupByScheduleTemplate(by: [ScheduleTemplateScalarFieldEnum!]!, having: ScheduleTemplateScalarWhereWithAggregatesInput, orderBy: [ScheduleTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): [ScheduleTemplateGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserAction(by: [UserActionScalarFieldEnum!]!, having: UserActionScalarWhereWithAggregatesInput, orderBy: [UserActionOrderByWithAggregationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserActionGroupBy!]!
  groupByUserActionSchedule(by: [UserActionScheduleScalarFieldEnum!]!, having: UserActionScheduleScalarWhereWithAggregatesInput, orderBy: [UserActionScheduleOrderByWithAggregationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionScheduleGroupBy!]!
  groupByUserBelief(by: [UserBeliefScalarFieldEnum!]!, having: UserBeliefScalarWhereWithAggregatesInput, orderBy: [UserBeliefOrderByWithAggregationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): [UserBeliefGroupBy!]!
  groupByUserIdentity(by: [UserIdentityScalarFieldEnum!]!, having: UserIdentityScalarWhereWithAggregatesInput, orderBy: [UserIdentityOrderByWithAggregationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): [UserIdentityGroupBy!]!
  groupByUserValue(by: [UserValueScalarFieldEnum!]!, having: UserValueScalarWhereWithAggregatesInput, orderBy: [UserValueOrderByWithAggregationInput!], skip: Int, take: Int, where: UserValueWhereInput): [UserValueGroupBy!]!
  groupByValue(by: [ValueScalarFieldEnum!]!, having: ValueScalarWhereWithAggregatesInput, orderBy: [ValueOrderByWithAggregationInput!], skip: Int, take: Int, where: ValueWhereInput): [ValueGroupBy!]!
  identities(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): [Identity!]!
  identity(where: IdentityWhereUniqueInput!): Identity
  identityActionRelation(where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  identityActionRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  scheduleTemplate(where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  scheduleTemplates(cursor: ScheduleTemplateWhereUniqueInput, distinct: [ScheduleTemplateScalarFieldEnum!], orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): [ScheduleTemplate!]!
  user(where: UserWhereUniqueInput!): User
  userAction(where: UserActionWhereUniqueInput!): UserAction
  userActionSchedule(where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  userActionSchedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
  userActions(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
  userBelief(where: UserBeliefWhereUniqueInput!): UserBelief
  userBeliefs(cursor: UserBeliefWhereUniqueInput, distinct: [UserBeliefScalarFieldEnum!], orderBy: [UserBeliefOrderByWithRelationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): [UserBelief!]!
  userIdentities(cursor: UserIdentityWhereUniqueInput, distinct: [UserIdentityScalarFieldEnum!], orderBy: [UserIdentityOrderByWithRelationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): [UserIdentity!]!
  userIdentity(where: UserIdentityWhereUniqueInput!): UserIdentity
  userValue(where: UserValueWhereUniqueInput!): UserValue
  userValues(cursor: UserValueWhereUniqueInput, distinct: [UserValueScalarFieldEnum!], orderBy: [UserValueOrderByWithRelationInput!], skip: Int, take: Int, where: UserValueWhereInput): [UserValue!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  value(where: ValueWhereUniqueInput!): Value
  values(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): [Value!]!
}

enum QueryMode {
  default
  insensitive
}

type ScheduleTemplate {
  _count: ScheduleTemplateCount!
  actionScheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  chron: String
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
}

type ScheduleTemplateAvgAggregate {
  id: Float
  multiplier: Float
}

input ScheduleTemplateAvgOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleTemplateCount {
  actionScheduleTemplates: Int!
}

type ScheduleTemplateCountAggregate {
  _all: Int!
  chron: Int!
  frequency: Int!
  id: Int!
  multiplier: Int!
}

input ScheduleTemplateCountOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateCreateInput {
  actionScheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutScheduleTemplateInput
  chron: String
  frequency: FREQUENCY
  multiplier: Int
}

input ScheduleTemplateCreateManyInput {
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
}

input ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput {
  connect: ScheduleTemplateWhereUniqueInput
  connectOrCreate: ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput
}

input ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput {
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput!
  where: ScheduleTemplateWhereUniqueInput!
}

input ScheduleTemplateCreateWithoutActionScheduleTemplatesInput {
  chron: String
  frequency: FREQUENCY
  multiplier: Int
}

type ScheduleTemplateGroupBy {
  _avg: ScheduleTemplateAvgAggregate
  _count: ScheduleTemplateCountAggregate
  _max: ScheduleTemplateMaxAggregate
  _min: ScheduleTemplateMinAggregate
  _sum: ScheduleTemplateSumAggregate
  chron: String
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
}

type ScheduleTemplateMaxAggregate {
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
}

input ScheduleTemplateMaxOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleTemplateMinAggregate {
  chron: String
  frequency: FREQUENCY
  id: Int
  multiplier: Int
}

input ScheduleTemplateMinOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateOrderByWithAggregationInput {
  _avg: ScheduleTemplateAvgOrderByAggregateInput
  _count: ScheduleTemplateCountOrderByAggregateInput
  _max: ScheduleTemplateMaxOrderByAggregateInput
  _min: ScheduleTemplateMinOrderByAggregateInput
  _sum: ScheduleTemplateSumOrderByAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateOrderByWithRelationInput {
  actionScheduleTemplates: ActionScheduleTemplateOrderByRelationAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateRelationFilter {
  is: ScheduleTemplateWhereInput
  isNot: ScheduleTemplateWhereInput
}

enum ScheduleTemplateScalarFieldEnum {
  chron
  frequency
  id
  multiplier
}

input ScheduleTemplateScalarWhereWithAggregatesInput {
  AND: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  NOT: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  OR: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  chron: StringNullableWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  id: IntWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
}

type ScheduleTemplateSumAggregate {
  id: Int
  multiplier: Int
}

input ScheduleTemplateSumOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateUpdateInput {
  actionScheduleTemplates: ActionScheduleTemplateUpdateManyWithoutScheduleTemplateInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpdateManyMutationInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput {
  connect: ScheduleTemplateWhereUniqueInput
  connectOrCreate: ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput
  update: ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput
  upsert: ScheduleTemplateUpsertWithoutActionScheduleTemplatesInput
}

input ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpsertWithoutActionScheduleTemplatesInput {
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput!
  update: ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput!
}

input ScheduleTemplateWhereInput {
  AND: [ScheduleTemplateWhereInput!]
  NOT: [ScheduleTemplateWhereInput!]
  OR: [ScheduleTemplateWhereInput!]
  actionScheduleTemplates: ActionScheduleTemplateListRelationFilter
  chron: StringNullableFilter
  frequency: EnumFREQUENCYFilter
  id: IntFilter
  multiplier: IntFilter
}

input ScheduleTemplateWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount!
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  actionCompletions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  email: String!
  emailVerified: DateTime
  id: String!
  image: String
  isAdmin: Boolean!
  name: String
  userActions(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
  userBeliefs(cursor: UserBeliefWhereUniqueInput, distinct: [UserBeliefScalarFieldEnum!], orderBy: [UserBeliefOrderByWithRelationInput!], skip: Int, take: Int, where: UserBeliefWhereInput): [UserBelief!]!
  userIdentities(cursor: UserIdentityWhereUniqueInput, distinct: [UserIdentityScalarFieldEnum!], orderBy: [UserIdentityOrderByWithRelationInput!], skip: Int, take: Int, where: UserIdentityWhereInput): [UserIdentity!]!
  userValues(cursor: UserValueWhereUniqueInput, distinct: [UserValueScalarFieldEnum!], orderBy: [UserValueOrderByWithRelationInput!], skip: Int, take: Int, where: UserValueWhereInput): [UserValue!]!
}

type UserAction {
  _count: UserActionCount!
  abandonedAt: DateTime
  action: Action!
  actionId: Int!
  adoptedAt: DateTime!
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  goals(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  id: Int!
  schedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
  user: User!
  userId: String!
}

type UserActionAvgAggregate {
  actionId: Float
  id: Float
}

input UserActionAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

type UserActionCount {
  calendarEvents: Int!
  goals: Int!
  schedules: Int!
}

type UserActionCountAggregate {
  _all: Int!
  abandonedAt: Int!
  actionId: Int!
  adoptedAt: Int!
  id: Int!
  userId: Int!
}

input UserActionCountOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionCreateInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionsInput!
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutUserActionInput
  goals: GoalCreateNestedManyWithoutUserActionInput
  schedules: UserActionScheduleCreateNestedManyWithoutUserActionInput
  user: UserCreateNestedOneWithoutUserActionsInput!
}

input UserActionCreateManyActionInput {
  abandonedAt: DateTime
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionCreateManyActionInputEnvelope {
  data: [UserActionCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input UserActionCreateManyInput {
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionCreateManyUserInput {
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime
  id: Int
}

input UserActionCreateManyUserInputEnvelope {
  data: [UserActionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserActionCreateNestedManyWithoutActionInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutActionInput!]
  create: [UserActionCreateWithoutActionInput!]
  createMany: UserActionCreateManyActionInputEnvelope
}

input UserActionCreateNestedManyWithoutUserInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutUserInput!]
  create: [UserActionCreateWithoutUserInput!]
  createMany: UserActionCreateManyUserInputEnvelope
}

input UserActionCreateNestedOneWithoutCalendarEventsInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutCalendarEventsInput
  create: UserActionCreateWithoutCalendarEventsInput
}

input UserActionCreateNestedOneWithoutGoalsInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutGoalsInput
  create: UserActionCreateWithoutGoalsInput
}

input UserActionCreateNestedOneWithoutSchedulesInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutSchedulesInput
  create: UserActionCreateWithoutSchedulesInput
}

input UserActionCreateOrConnectWithoutActionInput {
  create: UserActionCreateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateOrConnectWithoutCalendarEventsInput {
  create: UserActionCreateWithoutCalendarEventsInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateOrConnectWithoutGoalsInput {
  create: UserActionCreateWithoutGoalsInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateOrConnectWithoutSchedulesInput {
  create: UserActionCreateWithoutSchedulesInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateOrConnectWithoutUserInput {
  create: UserActionCreateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateWithoutActionInput {
  abandonedAt: DateTime
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutUserActionInput
  goals: GoalCreateNestedManyWithoutUserActionInput
  schedules: UserActionScheduleCreateNestedManyWithoutUserActionInput
  user: UserCreateNestedOneWithoutUserActionsInput!
}

input UserActionCreateWithoutCalendarEventsInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionsInput!
  adoptedAt: DateTime
  goals: GoalCreateNestedManyWithoutUserActionInput
  schedules: UserActionScheduleCreateNestedManyWithoutUserActionInput
  user: UserCreateNestedOneWithoutUserActionsInput!
}

input UserActionCreateWithoutGoalsInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionsInput!
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutUserActionInput
  schedules: UserActionScheduleCreateNestedManyWithoutUserActionInput
  user: UserCreateNestedOneWithoutUserActionsInput!
}

input UserActionCreateWithoutSchedulesInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionsInput!
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutUserActionInput
  goals: GoalCreateNestedManyWithoutUserActionInput
  user: UserCreateNestedOneWithoutUserActionsInput!
}

input UserActionCreateWithoutUserInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionsInput!
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutUserActionInput
  goals: GoalCreateNestedManyWithoutUserActionInput
  schedules: UserActionScheduleCreateNestedManyWithoutUserActionInput
}

type UserActionGroupBy {
  _avg: UserActionAvgAggregate
  _count: UserActionCountAggregate
  _max: UserActionMaxAggregate
  _min: UserActionMinAggregate
  _sum: UserActionSumAggregate
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime!
  id: Int!
  userId: String!
}

input UserActionListRelationFilter {
  every: UserActionWhereInput
  none: UserActionWhereInput
  some: UserActionWhereInput
}

type UserActionMaxAggregate {
  abandonedAt: DateTime
  actionId: Int
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionMaxOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

type UserActionMinAggregate {
  abandonedAt: DateTime
  actionId: Int
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionMinOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserActionOrderByWithAggregationInput {
  _avg: UserActionAvgOrderByAggregateInput
  _count: UserActionCountOrderByAggregateInput
  _max: UserActionMaxOrderByAggregateInput
  _min: UserActionMinOrderByAggregateInput
  _sum: UserActionSumOrderByAggregateInput
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionOrderByWithRelationInput {
  abandonedAt: SortOrder
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  adoptedAt: SortOrder
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  goals: GoalOrderByRelationAggregateInput
  id: SortOrder
  schedules: UserActionScheduleOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserActionRelationFilter {
  is: UserActionWhereInput
  isNot: UserActionWhereInput
}

enum UserActionScalarFieldEnum {
  abandonedAt
  actionId
  adoptedAt
  id
  userId
}

input UserActionScalarWhereInput {
  AND: [UserActionScalarWhereInput!]
  NOT: [UserActionScalarWhereInput!]
  OR: [UserActionScalarWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionId: IntFilter
  adoptedAt: DateTimeFilter
  id: IntFilter
  userId: StringFilter
}

input UserActionScalarWhereWithAggregatesInput {
  AND: [UserActionScalarWhereWithAggregatesInput!]
  NOT: [UserActionScalarWhereWithAggregatesInput!]
  OR: [UserActionScalarWhereWithAggregatesInput!]
  abandonedAt: DateTimeNullableWithAggregatesFilter
  actionId: IntWithAggregatesFilter
  adoptedAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserActionSchedule {
  _count: UserActionScheduleCount!
  abandonedAt: DateTime
  actionScheduleTemplate: ActionScheduleTemplate
  actionScheduleTemplateId: Int
  active: Boolean!
  adoptedAt: DateTime!
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
  quantity: Int!
  userAction: UserAction
  userActionId: Int!
}

type UserActionScheduleAvgAggregate {
  actionScheduleTemplateId: Float
  id: Float
  multiplier: Float
  quantity: Float
  userActionId: Float
}

input UserActionScheduleAvgOrderByAggregateInput {
  actionScheduleTemplateId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

type UserActionScheduleCount {
  calendarEvents: Int!
}

type UserActionScheduleCountAggregate {
  _all: Int!
  abandonedAt: Int!
  actionScheduleTemplateId: Int!
  active: Int!
  adoptedAt: Int!
  frequency: Int!
  id: Int!
  multiplier: Int!
  quantity: Int!
  userActionId: Int!
}

input UserActionScheduleCountOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleTemplateId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input UserActionScheduleCreateInput {
  abandonedAt: DateTime
  actionScheduleTemplate: ActionScheduleTemplateCreateNestedOneWithoutUserActionSchedulesInput
  active: Boolean
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  userAction: UserActionCreateNestedOneWithoutSchedulesInput
}

input UserActionScheduleCreateManyActionScheduleTemplateInput {
  abandonedAt: DateTime
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  userActionId: Int!
}

input UserActionScheduleCreateManyActionScheduleTemplateInputEnvelope {
  data: [UserActionScheduleCreateManyActionScheduleTemplateInput!]!
  skipDuplicates: Boolean
}

input UserActionScheduleCreateManyInput {
  abandonedAt: DateTime
  actionScheduleTemplateId: Int
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  userActionId: Int!
}

input UserActionScheduleCreateManyUserActionInput {
  abandonedAt: DateTime
  actionScheduleTemplateId: Int
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
}

input UserActionScheduleCreateManyUserActionInputEnvelope {
  data: [UserActionScheduleCreateManyUserActionInput!]!
  skipDuplicates: Boolean
}

input UserActionScheduleCreateNestedManyWithoutActionScheduleTemplateInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutActionScheduleTemplateInput!]
  create: [UserActionScheduleCreateWithoutActionScheduleTemplateInput!]
  createMany: UserActionScheduleCreateManyActionScheduleTemplateInputEnvelope
}

input UserActionScheduleCreateNestedManyWithoutUserActionInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutUserActionInput!]
  create: [UserActionScheduleCreateWithoutUserActionInput!]
  createMany: UserActionScheduleCreateManyUserActionInputEnvelope
}

input UserActionScheduleCreateNestedOneWithoutCalendarEventsInput {
  connect: UserActionScheduleWhereUniqueInput
  connectOrCreate: UserActionScheduleCreateOrConnectWithoutCalendarEventsInput
  create: UserActionScheduleCreateWithoutCalendarEventsInput
}

input UserActionScheduleCreateOrConnectWithoutActionScheduleTemplateInput {
  create: UserActionScheduleCreateWithoutActionScheduleTemplateInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleCreateOrConnectWithoutCalendarEventsInput {
  create: UserActionScheduleCreateWithoutCalendarEventsInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleCreateOrConnectWithoutUserActionInput {
  create: UserActionScheduleCreateWithoutUserActionInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleCreateWithoutActionScheduleTemplateInput {
  abandonedAt: DateTime
  active: Boolean
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  userAction: UserActionCreateNestedOneWithoutSchedulesInput
}

input UserActionScheduleCreateWithoutCalendarEventsInput {
  abandonedAt: DateTime
  actionScheduleTemplate: ActionScheduleTemplateCreateNestedOneWithoutUserActionSchedulesInput
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  userAction: UserActionCreateNestedOneWithoutSchedulesInput
}

input UserActionScheduleCreateWithoutUserActionInput {
  abandonedAt: DateTime
  actionScheduleTemplate: ActionScheduleTemplateCreateNestedOneWithoutUserActionSchedulesInput
  active: Boolean
  adoptedAt: DateTime
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
}

type UserActionScheduleGroupBy {
  _avg: UserActionScheduleAvgAggregate
  _count: UserActionScheduleCountAggregate
  _max: UserActionScheduleMaxAggregate
  _min: UserActionScheduleMinAggregate
  _sum: UserActionScheduleSumAggregate
  abandonedAt: DateTime
  actionScheduleTemplateId: Int
  active: Boolean!
  adoptedAt: DateTime!
  frequency: FREQUENCY!
  id: Int!
  multiplier: Int!
  quantity: Int!
  userActionId: Int!
}

input UserActionScheduleListRelationFilter {
  every: UserActionScheduleWhereInput
  none: UserActionScheduleWhereInput
  some: UserActionScheduleWhereInput
}

type UserActionScheduleMaxAggregate {
  abandonedAt: DateTime
  actionScheduleTemplateId: Int
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  userActionId: Int
}

input UserActionScheduleMaxOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleTemplateId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

type UserActionScheduleMinAggregate {
  abandonedAt: DateTime
  actionScheduleTemplateId: Int
  active: Boolean
  adoptedAt: DateTime
  frequency: FREQUENCY
  id: Int
  multiplier: Int
  quantity: Int
  userActionId: Int
}

input UserActionScheduleMinOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleTemplateId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input UserActionScheduleOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserActionScheduleOrderByWithAggregationInput {
  _avg: UserActionScheduleAvgOrderByAggregateInput
  _count: UserActionScheduleCountOrderByAggregateInput
  _max: UserActionScheduleMaxOrderByAggregateInput
  _min: UserActionScheduleMinOrderByAggregateInput
  _sum: UserActionScheduleSumOrderByAggregateInput
  abandonedAt: SortOrder
  actionScheduleTemplateId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input UserActionScheduleOrderByWithRelationInput {
  abandonedAt: SortOrder
  actionScheduleTemplate: ActionScheduleTemplateOrderByWithRelationInput
  actionScheduleTemplateId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userAction: UserActionOrderByWithRelationInput
  userActionId: SortOrder
}

input UserActionScheduleRelationFilter {
  is: UserActionScheduleWhereInput
  isNot: UserActionScheduleWhereInput
}

enum UserActionScheduleScalarFieldEnum {
  abandonedAt
  actionScheduleTemplateId
  active
  adoptedAt
  frequency
  id
  multiplier
  quantity
  userActionId
}

input UserActionScheduleScalarWhereInput {
  AND: [UserActionScheduleScalarWhereInput!]
  NOT: [UserActionScheduleScalarWhereInput!]
  OR: [UserActionScheduleScalarWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionScheduleTemplateId: IntNullableFilter
  active: BoolFilter
  adoptedAt: DateTimeFilter
  frequency: EnumFREQUENCYFilter
  id: IntFilter
  multiplier: IntFilter
  quantity: IntFilter
  userActionId: IntFilter
}

input UserActionScheduleScalarWhereWithAggregatesInput {
  AND: [UserActionScheduleScalarWhereWithAggregatesInput!]
  NOT: [UserActionScheduleScalarWhereWithAggregatesInput!]
  OR: [UserActionScheduleScalarWhereWithAggregatesInput!]
  abandonedAt: DateTimeNullableWithAggregatesFilter
  actionScheduleTemplateId: IntNullableWithAggregatesFilter
  active: BoolWithAggregatesFilter
  adoptedAt: DateTimeWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  id: IntWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  userActionId: IntWithAggregatesFilter
}

type UserActionScheduleSumAggregate {
  actionScheduleTemplateId: Int
  id: Int
  multiplier: Int
  quantity: Int
  userActionId: Int
}

input UserActionScheduleSumOrderByAggregateInput {
  actionScheduleTemplateId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  userActionId: SortOrder
}

input UserActionScheduleUpdateInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  actionScheduleTemplate: ActionScheduleTemplateUpdateOneWithoutUserActionSchedulesInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutSchedulesInput
}

input UserActionScheduleUpdateManyMutationInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input UserActionScheduleUpdateManyWithWhereWithoutActionScheduleTemplateInput {
  data: UserActionScheduleUpdateManyMutationInput!
  where: UserActionScheduleScalarWhereInput!
}

input UserActionScheduleUpdateManyWithWhereWithoutUserActionInput {
  data: UserActionScheduleUpdateManyMutationInput!
  where: UserActionScheduleScalarWhereInput!
}

input UserActionScheduleUpdateManyWithoutActionScheduleTemplateInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutActionScheduleTemplateInput!]
  create: [UserActionScheduleCreateWithoutActionScheduleTemplateInput!]
  createMany: UserActionScheduleCreateManyActionScheduleTemplateInputEnvelope
  delete: [UserActionScheduleWhereUniqueInput!]
  deleteMany: [UserActionScheduleScalarWhereInput!]
  disconnect: [UserActionScheduleWhereUniqueInput!]
  set: [UserActionScheduleWhereUniqueInput!]
  update: [UserActionScheduleUpdateWithWhereUniqueWithoutActionScheduleTemplateInput!]
  updateMany: [UserActionScheduleUpdateManyWithWhereWithoutActionScheduleTemplateInput!]
  upsert: [UserActionScheduleUpsertWithWhereUniqueWithoutActionScheduleTemplateInput!]
}

input UserActionScheduleUpdateManyWithoutUserActionInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutUserActionInput!]
  create: [UserActionScheduleCreateWithoutUserActionInput!]
  createMany: UserActionScheduleCreateManyUserActionInputEnvelope
  delete: [UserActionScheduleWhereUniqueInput!]
  deleteMany: [UserActionScheduleScalarWhereInput!]
  disconnect: [UserActionScheduleWhereUniqueInput!]
  set: [UserActionScheduleWhereUniqueInput!]
  update: [UserActionScheduleUpdateWithWhereUniqueWithoutUserActionInput!]
  updateMany: [UserActionScheduleUpdateManyWithWhereWithoutUserActionInput!]
  upsert: [UserActionScheduleUpsertWithWhereUniqueWithoutUserActionInput!]
}

input UserActionScheduleUpdateOneWithoutCalendarEventsInput {
  connect: UserActionScheduleWhereUniqueInput
  connectOrCreate: UserActionScheduleCreateOrConnectWithoutCalendarEventsInput
  create: UserActionScheduleCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: UserActionScheduleUpdateWithoutCalendarEventsInput
  upsert: UserActionScheduleUpsertWithoutCalendarEventsInput
}

input UserActionScheduleUpdateWithWhereUniqueWithoutActionScheduleTemplateInput {
  data: UserActionScheduleUpdateWithoutActionScheduleTemplateInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpdateWithWhereUniqueWithoutUserActionInput {
  data: UserActionScheduleUpdateWithoutUserActionInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpdateWithoutActionScheduleTemplateInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutSchedulesInput
}

input UserActionScheduleUpdateWithoutCalendarEventsInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  actionScheduleTemplate: ActionScheduleTemplateUpdateOneWithoutUserActionSchedulesInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userAction: UserActionUpdateOneWithoutSchedulesInput
}

input UserActionScheduleUpdateWithoutUserActionInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  actionScheduleTemplate: ActionScheduleTemplateUpdateOneWithoutUserActionSchedulesInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input UserActionScheduleUpsertWithWhereUniqueWithoutActionScheduleTemplateInput {
  create: UserActionScheduleCreateWithoutActionScheduleTemplateInput!
  update: UserActionScheduleUpdateWithoutActionScheduleTemplateInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpsertWithWhereUniqueWithoutUserActionInput {
  create: UserActionScheduleCreateWithoutUserActionInput!
  update: UserActionScheduleUpdateWithoutUserActionInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpsertWithoutCalendarEventsInput {
  create: UserActionScheduleCreateWithoutCalendarEventsInput!
  update: UserActionScheduleUpdateWithoutCalendarEventsInput!
}

input UserActionScheduleWhereInput {
  AND: [UserActionScheduleWhereInput!]
  NOT: [UserActionScheduleWhereInput!]
  OR: [UserActionScheduleWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionScheduleTemplate: ActionScheduleTemplateRelationFilter
  actionScheduleTemplateId: IntNullableFilter
  active: BoolFilter
  adoptedAt: DateTimeFilter
  calendarEvents: CalendarEventListRelationFilter
  frequency: EnumFREQUENCYFilter
  id: IntFilter
  multiplier: IntFilter
  quantity: IntFilter
  userAction: UserActionRelationFilter
  userActionId: IntFilter
}

input UserActionScheduleWhereUniqueInput {
  id: Int
}

type UserActionSumAggregate {
  actionId: Int
  id: Int
}

input UserActionSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

input UserActionUpdateInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutUserActionInput
  goals: GoalUpdateManyWithoutUserActionInput
  schedules: UserActionScheduleUpdateManyWithoutUserActionInput
  user: UserUpdateOneRequiredWithoutUserActionsInput
}

input UserActionUpdateManyMutationInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
}

input UserActionUpdateManyWithWhereWithoutActionInput {
  data: UserActionUpdateManyMutationInput!
  where: UserActionScalarWhereInput!
}

input UserActionUpdateManyWithWhereWithoutUserInput {
  data: UserActionUpdateManyMutationInput!
  where: UserActionScalarWhereInput!
}

input UserActionUpdateManyWithoutActionInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutActionInput!]
  create: [UserActionCreateWithoutActionInput!]
  createMany: UserActionCreateManyActionInputEnvelope
  delete: [UserActionWhereUniqueInput!]
  deleteMany: [UserActionScalarWhereInput!]
  disconnect: [UserActionWhereUniqueInput!]
  set: [UserActionWhereUniqueInput!]
  update: [UserActionUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [UserActionUpdateManyWithWhereWithoutActionInput!]
  upsert: [UserActionUpsertWithWhereUniqueWithoutActionInput!]
}

input UserActionUpdateManyWithoutUserInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutUserInput!]
  create: [UserActionCreateWithoutUserInput!]
  createMany: UserActionCreateManyUserInputEnvelope
  delete: [UserActionWhereUniqueInput!]
  deleteMany: [UserActionScalarWhereInput!]
  disconnect: [UserActionWhereUniqueInput!]
  set: [UserActionWhereUniqueInput!]
  update: [UserActionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserActionUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserActionUpsertWithWhereUniqueWithoutUserInput!]
}

input UserActionUpdateOneRequiredWithoutGoalsInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutGoalsInput
  create: UserActionCreateWithoutGoalsInput
  update: UserActionUpdateWithoutGoalsInput
  upsert: UserActionUpsertWithoutGoalsInput
}

input UserActionUpdateOneWithoutCalendarEventsInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutCalendarEventsInput
  create: UserActionCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: UserActionUpdateWithoutCalendarEventsInput
  upsert: UserActionUpsertWithoutCalendarEventsInput
}

input UserActionUpdateOneWithoutSchedulesInput {
  connect: UserActionWhereUniqueInput
  connectOrCreate: UserActionCreateOrConnectWithoutSchedulesInput
  create: UserActionCreateWithoutSchedulesInput
  delete: Boolean
  disconnect: Boolean
  update: UserActionUpdateWithoutSchedulesInput
  upsert: UserActionUpsertWithoutSchedulesInput
}

input UserActionUpdateWithWhereUniqueWithoutActionInput {
  data: UserActionUpdateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpdateWithWhereUniqueWithoutUserInput {
  data: UserActionUpdateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpdateWithoutActionInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutUserActionInput
  goals: GoalUpdateManyWithoutUserActionInput
  schedules: UserActionScheduleUpdateManyWithoutUserActionInput
  user: UserUpdateOneRequiredWithoutUserActionsInput
}

input UserActionUpdateWithoutCalendarEventsInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutUserActionInput
  schedules: UserActionScheduleUpdateManyWithoutUserActionInput
  user: UserUpdateOneRequiredWithoutUserActionsInput
}

input UserActionUpdateWithoutGoalsInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutUserActionInput
  schedules: UserActionScheduleUpdateManyWithoutUserActionInput
  user: UserUpdateOneRequiredWithoutUserActionsInput
}

input UserActionUpdateWithoutSchedulesInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutUserActionInput
  goals: GoalUpdateManyWithoutUserActionInput
  user: UserUpdateOneRequiredWithoutUserActionsInput
}

input UserActionUpdateWithoutUserInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutUserActionInput
  goals: GoalUpdateManyWithoutUserActionInput
  schedules: UserActionScheduleUpdateManyWithoutUserActionInput
}

input UserActionUpsertWithWhereUniqueWithoutActionInput {
  create: UserActionCreateWithoutActionInput!
  update: UserActionUpdateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpsertWithWhereUniqueWithoutUserInput {
  create: UserActionCreateWithoutUserInput!
  update: UserActionUpdateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpsertWithoutCalendarEventsInput {
  create: UserActionCreateWithoutCalendarEventsInput!
  update: UserActionUpdateWithoutCalendarEventsInput!
}

input UserActionUpsertWithoutGoalsInput {
  create: UserActionCreateWithoutGoalsInput!
  update: UserActionUpdateWithoutGoalsInput!
}

input UserActionUpsertWithoutSchedulesInput {
  create: UserActionCreateWithoutSchedulesInput!
  update: UserActionUpdateWithoutSchedulesInput!
}

input UserActionUserIdActionIdCompoundUniqueInput {
  actionId: Int!
  userId: String!
}

input UserActionWhereInput {
  AND: [UserActionWhereInput!]
  NOT: [UserActionWhereInput!]
  OR: [UserActionWhereInput!]
  abandonedAt: DateTimeNullableFilter
  action: ActionRelationFilter
  actionId: IntFilter
  adoptedAt: DateTimeFilter
  calendarEvents: CalendarEventListRelationFilter
  goals: GoalListRelationFilter
  id: IntFilter
  schedules: UserActionScheduleListRelationFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserActionWhereUniqueInput {
  id: Int
  userId_actionId: UserActionUserIdActionIdCompoundUniqueInput
}

type UserBelief {
  belief: Belief!
  beliefId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  user: User!
  userId: String!
}

type UserBeliefAvgAggregate {
  beliefId: Float
  id: Float
}

input UserBeliefAvgOrderByAggregateInput {
  beliefId: SortOrder
  id: SortOrder
}

type UserBeliefCountAggregate {
  _all: Int!
  beliefId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input UserBeliefCountOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserBeliefCreateInput {
  belief: BeliefCreateNestedOneWithoutUserBeliefInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserBeliefsInput!
}

input UserBeliefCreateManyBeliefInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input UserBeliefCreateManyBeliefInputEnvelope {
  data: [UserBeliefCreateManyBeliefInput!]!
  skipDuplicates: Boolean
}

input UserBeliefCreateManyInput {
  beliefId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input UserBeliefCreateManyUserInput {
  beliefId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input UserBeliefCreateManyUserInputEnvelope {
  data: [UserBeliefCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserBeliefCreateNestedManyWithoutBeliefInput {
  connect: [UserBeliefWhereUniqueInput!]
  connectOrCreate: [UserBeliefCreateOrConnectWithoutBeliefInput!]
  create: [UserBeliefCreateWithoutBeliefInput!]
  createMany: UserBeliefCreateManyBeliefInputEnvelope
}

input UserBeliefCreateNestedManyWithoutUserInput {
  connect: [UserBeliefWhereUniqueInput!]
  connectOrCreate: [UserBeliefCreateOrConnectWithoutUserInput!]
  create: [UserBeliefCreateWithoutUserInput!]
  createMany: UserBeliefCreateManyUserInputEnvelope
}

input UserBeliefCreateOrConnectWithoutBeliefInput {
  create: UserBeliefCreateWithoutBeliefInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefCreateOrConnectWithoutUserInput {
  create: UserBeliefCreateWithoutUserInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefCreateWithoutBeliefInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserBeliefsInput!
}

input UserBeliefCreateWithoutUserInput {
  belief: BeliefCreateNestedOneWithoutUserBeliefInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type UserBeliefGroupBy {
  _avg: UserBeliefAvgAggregate
  _count: UserBeliefCountAggregate
  _max: UserBeliefMaxAggregate
  _min: UserBeliefMinAggregate
  _sum: UserBeliefSumAggregate
  beliefId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  userId: String!
}

input UserBeliefListRelationFilter {
  every: UserBeliefWhereInput
  none: UserBeliefWhereInput
  some: UserBeliefWhereInput
}

type UserBeliefMaxAggregate {
  beliefId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
}

input UserBeliefMaxOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserBeliefMinAggregate {
  beliefId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
}

input UserBeliefMinOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserBeliefOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserBeliefOrderByWithAggregationInput {
  _avg: UserBeliefAvgOrderByAggregateInput
  _count: UserBeliefCountOrderByAggregateInput
  _max: UserBeliefMaxOrderByAggregateInput
  _min: UserBeliefMinOrderByAggregateInput
  _sum: UserBeliefSumOrderByAggregateInput
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserBeliefOrderByWithRelationInput {
  belief: BeliefOrderByWithRelationInput
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserBeliefScalarFieldEnum {
  beliefId
  createdAt
  deletedAt
  id
  updatedAt
  userId
}

input UserBeliefScalarWhereInput {
  AND: [UserBeliefScalarWhereInput!]
  NOT: [UserBeliefScalarWhereInput!]
  OR: [UserBeliefScalarWhereInput!]
  beliefId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input UserBeliefScalarWhereWithAggregatesInput {
  AND: [UserBeliefScalarWhereWithAggregatesInput!]
  NOT: [UserBeliefScalarWhereWithAggregatesInput!]
  OR: [UserBeliefScalarWhereWithAggregatesInput!]
  beliefId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserBeliefSumAggregate {
  beliefId: Int
  id: Int
}

input UserBeliefSumOrderByAggregateInput {
  beliefId: SortOrder
  id: SortOrder
}

input UserBeliefUpdateInput {
  belief: BeliefUpdateOneRequiredWithoutUserBeliefInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserBeliefsInput
}

input UserBeliefUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserBeliefUpdateManyWithWhereWithoutBeliefInput {
  data: UserBeliefUpdateManyMutationInput!
  where: UserBeliefScalarWhereInput!
}

input UserBeliefUpdateManyWithWhereWithoutUserInput {
  data: UserBeliefUpdateManyMutationInput!
  where: UserBeliefScalarWhereInput!
}

input UserBeliefUpdateManyWithoutBeliefInput {
  connect: [UserBeliefWhereUniqueInput!]
  connectOrCreate: [UserBeliefCreateOrConnectWithoutBeliefInput!]
  create: [UserBeliefCreateWithoutBeliefInput!]
  createMany: UserBeliefCreateManyBeliefInputEnvelope
  delete: [UserBeliefWhereUniqueInput!]
  deleteMany: [UserBeliefScalarWhereInput!]
  disconnect: [UserBeliefWhereUniqueInput!]
  set: [UserBeliefWhereUniqueInput!]
  update: [UserBeliefUpdateWithWhereUniqueWithoutBeliefInput!]
  updateMany: [UserBeliefUpdateManyWithWhereWithoutBeliefInput!]
  upsert: [UserBeliefUpsertWithWhereUniqueWithoutBeliefInput!]
}

input UserBeliefUpdateManyWithoutUserInput {
  connect: [UserBeliefWhereUniqueInput!]
  connectOrCreate: [UserBeliefCreateOrConnectWithoutUserInput!]
  create: [UserBeliefCreateWithoutUserInput!]
  createMany: UserBeliefCreateManyUserInputEnvelope
  delete: [UserBeliefWhereUniqueInput!]
  deleteMany: [UserBeliefScalarWhereInput!]
  disconnect: [UserBeliefWhereUniqueInput!]
  set: [UserBeliefWhereUniqueInput!]
  update: [UserBeliefUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserBeliefUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserBeliefUpsertWithWhereUniqueWithoutUserInput!]
}

input UserBeliefUpdateWithWhereUniqueWithoutBeliefInput {
  data: UserBeliefUpdateWithoutBeliefInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefUpdateWithWhereUniqueWithoutUserInput {
  data: UserBeliefUpdateWithoutUserInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefUpdateWithoutBeliefInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserBeliefsInput
}

input UserBeliefUpdateWithoutUserInput {
  belief: BeliefUpdateOneRequiredWithoutUserBeliefInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserBeliefUpsertWithWhereUniqueWithoutBeliefInput {
  create: UserBeliefCreateWithoutBeliefInput!
  update: UserBeliefUpdateWithoutBeliefInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefUpsertWithWhereUniqueWithoutUserInput {
  create: UserBeliefCreateWithoutUserInput!
  update: UserBeliefUpdateWithoutUserInput!
  where: UserBeliefWhereUniqueInput!
}

input UserBeliefUserIdBeliefIdCompoundUniqueInput {
  beliefId: Int!
  userId: String!
}

input UserBeliefWhereInput {
  AND: [UserBeliefWhereInput!]
  NOT: [UserBeliefWhereInput!]
  OR: [UserBeliefWhereInput!]
  belief: BeliefRelationFilter
  beliefId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserBeliefWhereUniqueInput {
  id: Int
  userId_beliefId: UserBeliefUserIdBeliefIdCompoundUniqueInput
}

type UserCount {
  accounts: Int!
  actionCompletions: Int!
  calendars: Int!
  userActions: Int!
  userBeliefs: Int!
  userIdentities: Int!
  userValues: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  isAdmin: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutActionCompletionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionCompletionsInput
  create: UserCreateWithoutActionCompletionsInput
}

input UserCreateNestedOneWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
}

input UserCreateNestedOneWithoutUserActionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserActionsInput
  create: UserCreateWithoutUserActionsInput
}

input UserCreateNestedOneWithoutUserBeliefsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserBeliefsInput
  create: UserCreateWithoutUserBeliefsInput
}

input UserCreateNestedOneWithoutUserIdentitiesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserIdentitiesInput
  create: UserCreateWithoutUserIdentitiesInput
}

input UserCreateNestedOneWithoutUserValuesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserValuesInput
  create: UserCreateWithoutUserValuesInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutActionCompletionsInput {
  create: UserCreateWithoutActionCompletionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserActionsInput {
  create: UserCreateWithoutUserActionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserBeliefsInput {
  create: UserCreateWithoutUserBeliefsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserIdentitiesInput {
  create: UserCreateWithoutUserIdentitiesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserValuesInput {
  create: UserCreateWithoutUserValuesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutActionCompletionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutCalendarsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserActionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserBeliefsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserIdentitiesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userValues: UserValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserValuesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  userActions: UserActionCreateNestedManyWithoutUserInput
  userBeliefs: UserBeliefCreateNestedManyWithoutUserInput
  userIdentities: UserIdentityCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email: String!
  emailVerified: DateTime
  id: String!
  image: String
  isAdmin: Boolean!
  name: String
}

type UserIdentity {
  deleted: DateTime
  id: Int!
  identity: Identity!
  identityId: Int!
  user: User!
  userId: String!
}

type UserIdentityAvgAggregate {
  id: Float
  identityId: Float
}

input UserIdentityAvgOrderByAggregateInput {
  id: SortOrder
  identityId: SortOrder
}

type UserIdentityCountAggregate {
  _all: Int!
  deleted: Int!
  id: Int!
  identityId: Int!
  userId: Int!
}

input UserIdentityCountOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input UserIdentityCreateInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutUserIdentitiesInput!
  user: UserCreateNestedOneWithoutUserIdentitiesInput!
}

input UserIdentityCreateManyIdentityInput {
  deleted: DateTime
  id: Int
  userId: String!
}

input UserIdentityCreateManyIdentityInputEnvelope {
  data: [UserIdentityCreateManyIdentityInput!]!
  skipDuplicates: Boolean
}

input UserIdentityCreateManyInput {
  deleted: DateTime
  id: Int
  identityId: Int!
  userId: String!
}

input UserIdentityCreateManyUserInput {
  deleted: DateTime
  id: Int
  identityId: Int!
}

input UserIdentityCreateManyUserInputEnvelope {
  data: [UserIdentityCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserIdentityCreateNestedManyWithoutIdentityInput {
  connect: [UserIdentityWhereUniqueInput!]
  connectOrCreate: [UserIdentityCreateOrConnectWithoutIdentityInput!]
  create: [UserIdentityCreateWithoutIdentityInput!]
  createMany: UserIdentityCreateManyIdentityInputEnvelope
}

input UserIdentityCreateNestedManyWithoutUserInput {
  connect: [UserIdentityWhereUniqueInput!]
  connectOrCreate: [UserIdentityCreateOrConnectWithoutUserInput!]
  create: [UserIdentityCreateWithoutUserInput!]
  createMany: UserIdentityCreateManyUserInputEnvelope
}

input UserIdentityCreateOrConnectWithoutIdentityInput {
  create: UserIdentityCreateWithoutIdentityInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityCreateOrConnectWithoutUserInput {
  create: UserIdentityCreateWithoutUserInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityCreateWithoutIdentityInput {
  deleted: DateTime
  user: UserCreateNestedOneWithoutUserIdentitiesInput!
}

input UserIdentityCreateWithoutUserInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutUserIdentitiesInput!
}

type UserIdentityGroupBy {
  _avg: UserIdentityAvgAggregate
  _count: UserIdentityCountAggregate
  _max: UserIdentityMaxAggregate
  _min: UserIdentityMinAggregate
  _sum: UserIdentitySumAggregate
  deleted: DateTime
  id: Int!
  identityId: Int!
  userId: String!
}

input UserIdentityListRelationFilter {
  every: UserIdentityWhereInput
  none: UserIdentityWhereInput
  some: UserIdentityWhereInput
}

type UserIdentityMaxAggregate {
  deleted: DateTime
  id: Int
  identityId: Int
  userId: String
}

input UserIdentityMaxOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

type UserIdentityMinAggregate {
  deleted: DateTime
  id: Int
  identityId: Int
  userId: String
}

input UserIdentityMinOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input UserIdentityOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserIdentityOrderByWithAggregationInput {
  _avg: UserIdentityAvgOrderByAggregateInput
  _count: UserIdentityCountOrderByAggregateInput
  _max: UserIdentityMaxOrderByAggregateInput
  _min: UserIdentityMinOrderByAggregateInput
  _sum: UserIdentitySumOrderByAggregateInput
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input UserIdentityOrderByWithRelationInput {
  deleted: SortOrder
  id: SortOrder
  identity: IdentityOrderByWithRelationInput
  identityId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserIdentityScalarFieldEnum {
  deleted
  id
  identityId
  userId
}

input UserIdentityScalarWhereInput {
  AND: [UserIdentityScalarWhereInput!]
  NOT: [UserIdentityScalarWhereInput!]
  OR: [UserIdentityScalarWhereInput!]
  deleted: DateTimeNullableFilter
  id: IntFilter
  identityId: IntFilter
  userId: StringFilter
}

input UserIdentityScalarWhereWithAggregatesInput {
  AND: [UserIdentityScalarWhereWithAggregatesInput!]
  NOT: [UserIdentityScalarWhereWithAggregatesInput!]
  OR: [UserIdentityScalarWhereWithAggregatesInput!]
  deleted: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  identityId: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserIdentitySumAggregate {
  id: Int
  identityId: Int
}

input UserIdentitySumOrderByAggregateInput {
  id: SortOrder
  identityId: SortOrder
}

input UserIdentityUpdateInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutUserIdentitiesInput
  user: UserUpdateOneRequiredWithoutUserIdentitiesInput
}

input UserIdentityUpdateManyMutationInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input UserIdentityUpdateManyWithWhereWithoutIdentityInput {
  data: UserIdentityUpdateManyMutationInput!
  where: UserIdentityScalarWhereInput!
}

input UserIdentityUpdateManyWithWhereWithoutUserInput {
  data: UserIdentityUpdateManyMutationInput!
  where: UserIdentityScalarWhereInput!
}

input UserIdentityUpdateManyWithoutIdentityInput {
  connect: [UserIdentityWhereUniqueInput!]
  connectOrCreate: [UserIdentityCreateOrConnectWithoutIdentityInput!]
  create: [UserIdentityCreateWithoutIdentityInput!]
  createMany: UserIdentityCreateManyIdentityInputEnvelope
  delete: [UserIdentityWhereUniqueInput!]
  deleteMany: [UserIdentityScalarWhereInput!]
  disconnect: [UserIdentityWhereUniqueInput!]
  set: [UserIdentityWhereUniqueInput!]
  update: [UserIdentityUpdateWithWhereUniqueWithoutIdentityInput!]
  updateMany: [UserIdentityUpdateManyWithWhereWithoutIdentityInput!]
  upsert: [UserIdentityUpsertWithWhereUniqueWithoutIdentityInput!]
}

input UserIdentityUpdateManyWithoutUserInput {
  connect: [UserIdentityWhereUniqueInput!]
  connectOrCreate: [UserIdentityCreateOrConnectWithoutUserInput!]
  create: [UserIdentityCreateWithoutUserInput!]
  createMany: UserIdentityCreateManyUserInputEnvelope
  delete: [UserIdentityWhereUniqueInput!]
  deleteMany: [UserIdentityScalarWhereInput!]
  disconnect: [UserIdentityWhereUniqueInput!]
  set: [UserIdentityWhereUniqueInput!]
  update: [UserIdentityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserIdentityUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserIdentityUpsertWithWhereUniqueWithoutUserInput!]
}

input UserIdentityUpdateWithWhereUniqueWithoutIdentityInput {
  data: UserIdentityUpdateWithoutIdentityInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityUpdateWithWhereUniqueWithoutUserInput {
  data: UserIdentityUpdateWithoutUserInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityUpdateWithoutIdentityInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserIdentitiesInput
}

input UserIdentityUpdateWithoutUserInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutUserIdentitiesInput
}

input UserIdentityUpsertWithWhereUniqueWithoutIdentityInput {
  create: UserIdentityCreateWithoutIdentityInput!
  update: UserIdentityUpdateWithoutIdentityInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityUpsertWithWhereUniqueWithoutUserInput {
  create: UserIdentityCreateWithoutUserInput!
  update: UserIdentityUpdateWithoutUserInput!
  where: UserIdentityWhereUniqueInput!
}

input UserIdentityUserIdIdentityIdCompoundUniqueInput {
  identityId: Int!
  userId: String!
}

input UserIdentityWhereInput {
  AND: [UserIdentityWhereInput!]
  NOT: [UserIdentityWhereInput!]
  OR: [UserIdentityWhereInput!]
  deleted: DateTimeNullableFilter
  id: IntFilter
  identity: IdentityRelationFilter
  identityId: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserIdentityWhereUniqueInput {
  id: Int
  userId_identityId: UserIdentityUserIdIdentityIdCompoundUniqueInput
}

type UserMaxAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  actionCompletions: ActionCompletionOrderByRelationAggregateInput
  calendars: CalendarOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  userActions: UserActionOrderByRelationAggregateInput
  userBeliefs: UserBeliefOrderByRelationAggregateInput
  userIdentities: UserIdentityOrderByRelationAggregateInput
  userValues: UserValueOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  emailVerified
  id
  image
  isAdmin
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutActionCompletionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionCompletionsInput
  create: UserCreateWithoutActionCompletionsInput
  update: UserUpdateWithoutActionCompletionsInput
  upsert: UserUpsertWithoutActionCompletionsInput
}

input UserUpdateOneRequiredWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
  update: UserUpdateWithoutCalendarsInput
  upsert: UserUpsertWithoutCalendarsInput
}

input UserUpdateOneRequiredWithoutUserActionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserActionsInput
  create: UserCreateWithoutUserActionsInput
  update: UserUpdateWithoutUserActionsInput
  upsert: UserUpsertWithoutUserActionsInput
}

input UserUpdateOneRequiredWithoutUserBeliefsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserBeliefsInput
  create: UserCreateWithoutUserBeliefsInput
  update: UserUpdateWithoutUserBeliefsInput
  upsert: UserUpsertWithoutUserBeliefsInput
}

input UserUpdateOneRequiredWithoutUserIdentitiesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserIdentitiesInput
  create: UserCreateWithoutUserIdentitiesInput
  update: UserUpdateWithoutUserIdentitiesInput
  upsert: UserUpsertWithoutUserIdentitiesInput
}

input UserUpdateOneRequiredWithoutUserValuesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserValuesInput
  create: UserCreateWithoutUserValuesInput
  update: UserUpdateWithoutUserValuesInput
  upsert: UserUpsertWithoutUserValuesInput
}

input UserUpdateWithoutAccountsInput {
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutActionCompletionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutCalendarsInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserActionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserBeliefsInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserIdentitiesInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userValues: UserValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserValuesInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  userActions: UserActionUpdateManyWithoutUserInput
  userBeliefs: UserBeliefUpdateManyWithoutUserInput
  userIdentities: UserIdentityUpdateManyWithoutUserInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutActionCompletionsInput {
  create: UserCreateWithoutActionCompletionsInput!
  update: UserUpdateWithoutActionCompletionsInput!
}

input UserUpsertWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  update: UserUpdateWithoutCalendarsInput!
}

input UserUpsertWithoutUserActionsInput {
  create: UserCreateWithoutUserActionsInput!
  update: UserUpdateWithoutUserActionsInput!
}

input UserUpsertWithoutUserBeliefsInput {
  create: UserCreateWithoutUserBeliefsInput!
  update: UserUpdateWithoutUserBeliefsInput!
}

input UserUpsertWithoutUserIdentitiesInput {
  create: UserCreateWithoutUserIdentitiesInput!
  update: UserUpdateWithoutUserIdentitiesInput!
}

input UserUpsertWithoutUserValuesInput {
  create: UserCreateWithoutUserValuesInput!
  update: UserUpdateWithoutUserValuesInput!
}

type UserValue {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  user: User!
  userId: String!
  value: Value!
  valueId: Int!
}

type UserValueAvgAggregate {
  id: Float
  valueId: Float
}

input UserValueAvgOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

type UserValueCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
  valueId: Int!
}

input UserValueCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input UserValueCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserValuesInput!
  value: ValueCreateNestedOneWithoutUserValuesInput!
}

input UserValueCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
  valueId: Int!
}

input UserValueCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  valueId: Int!
}

input UserValueCreateManyUserInputEnvelope {
  data: [UserValueCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserValueCreateManyValueInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input UserValueCreateManyValueInputEnvelope {
  data: [UserValueCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input UserValueCreateNestedManyWithoutUserInput {
  connect: [UserValueWhereUniqueInput!]
  connectOrCreate: [UserValueCreateOrConnectWithoutUserInput!]
  create: [UserValueCreateWithoutUserInput!]
  createMany: UserValueCreateManyUserInputEnvelope
}

input UserValueCreateNestedManyWithoutValueInput {
  connect: [UserValueWhereUniqueInput!]
  connectOrCreate: [UserValueCreateOrConnectWithoutValueInput!]
  create: [UserValueCreateWithoutValueInput!]
  createMany: UserValueCreateManyValueInputEnvelope
}

input UserValueCreateOrConnectWithoutUserInput {
  create: UserValueCreateWithoutUserInput!
  where: UserValueWhereUniqueInput!
}

input UserValueCreateOrConnectWithoutValueInput {
  create: UserValueCreateWithoutValueInput!
  where: UserValueWhereUniqueInput!
}

input UserValueCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  value: ValueCreateNestedOneWithoutUserValuesInput!
}

input UserValueCreateWithoutValueInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserValuesInput!
}

type UserValueGroupBy {
  _avg: UserValueAvgAggregate
  _count: UserValueCountAggregate
  _max: UserValueMaxAggregate
  _min: UserValueMinAggregate
  _sum: UserValueSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  userId: String!
  valueId: Int!
}

input UserValueListRelationFilter {
  every: UserValueWhereInput
  none: UserValueWhereInput
  some: UserValueWhereInput
}

type UserValueMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
  valueId: Int
}

input UserValueMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

type UserValueMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
  valueId: Int
}

input UserValueMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input UserValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserValueOrderByWithAggregationInput {
  _avg: UserValueAvgOrderByAggregateInput
  _count: UserValueCountOrderByAggregateInput
  _max: UserValueMaxOrderByAggregateInput
  _min: UserValueMinOrderByAggregateInput
  _sum: UserValueSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input UserValueOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  value: ValueOrderByWithRelationInput
  valueId: SortOrder
}

enum UserValueScalarFieldEnum {
  createdAt
  deletedAt
  id
  updatedAt
  userId
  valueId
}

input UserValueScalarWhereInput {
  AND: [UserValueScalarWhereInput!]
  NOT: [UserValueScalarWhereInput!]
  OR: [UserValueScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
  valueId: IntFilter
}

input UserValueScalarWhereWithAggregatesInput {
  AND: [UserValueScalarWhereWithAggregatesInput!]
  NOT: [UserValueScalarWhereWithAggregatesInput!]
  OR: [UserValueScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  valueId: IntWithAggregatesFilter
}

type UserValueSumAggregate {
  id: Int
  valueId: Int
}

input UserValueSumOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

input UserValueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserValuesInput
  value: ValueUpdateOneRequiredWithoutUserValuesInput
}

input UserValueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserValueUpdateManyWithWhereWithoutUserInput {
  data: UserValueUpdateManyMutationInput!
  where: UserValueScalarWhereInput!
}

input UserValueUpdateManyWithWhereWithoutValueInput {
  data: UserValueUpdateManyMutationInput!
  where: UserValueScalarWhereInput!
}

input UserValueUpdateManyWithoutUserInput {
  connect: [UserValueWhereUniqueInput!]
  connectOrCreate: [UserValueCreateOrConnectWithoutUserInput!]
  create: [UserValueCreateWithoutUserInput!]
  createMany: UserValueCreateManyUserInputEnvelope
  delete: [UserValueWhereUniqueInput!]
  deleteMany: [UserValueScalarWhereInput!]
  disconnect: [UserValueWhereUniqueInput!]
  set: [UserValueWhereUniqueInput!]
  update: [UserValueUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserValueUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserValueUpsertWithWhereUniqueWithoutUserInput!]
}

input UserValueUpdateManyWithoutValueInput {
  connect: [UserValueWhereUniqueInput!]
  connectOrCreate: [UserValueCreateOrConnectWithoutValueInput!]
  create: [UserValueCreateWithoutValueInput!]
  createMany: UserValueCreateManyValueInputEnvelope
  delete: [UserValueWhereUniqueInput!]
  deleteMany: [UserValueScalarWhereInput!]
  disconnect: [UserValueWhereUniqueInput!]
  set: [UserValueWhereUniqueInput!]
  update: [UserValueUpdateWithWhereUniqueWithoutValueInput!]
  updateMany: [UserValueUpdateManyWithWhereWithoutValueInput!]
  upsert: [UserValueUpsertWithWhereUniqueWithoutValueInput!]
}

input UserValueUpdateWithWhereUniqueWithoutUserInput {
  data: UserValueUpdateWithoutUserInput!
  where: UserValueWhereUniqueInput!
}

input UserValueUpdateWithWhereUniqueWithoutValueInput {
  data: UserValueUpdateWithoutValueInput!
  where: UserValueWhereUniqueInput!
}

input UserValueUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  value: ValueUpdateOneRequiredWithoutUserValuesInput
}

input UserValueUpdateWithoutValueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserValuesInput
}

input UserValueUpsertWithWhereUniqueWithoutUserInput {
  create: UserValueCreateWithoutUserInput!
  update: UserValueUpdateWithoutUserInput!
  where: UserValueWhereUniqueInput!
}

input UserValueUpsertWithWhereUniqueWithoutValueInput {
  create: UserValueCreateWithoutValueInput!
  update: UserValueUpdateWithoutValueInput!
  where: UserValueWhereUniqueInput!
}

input UserValueUserIdValueIdCompoundUniqueInput {
  userId: String!
  valueId: Int!
}

input UserValueWhereInput {
  AND: [UserValueWhereInput!]
  NOT: [UserValueWhereInput!]
  OR: [UserValueWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  value: ValueRelationFilter
  valueId: IntFilter
}

input UserValueWhereUniqueInput {
  id: Int
  userId_valueId: UserValueUserIdValueIdCompoundUniqueInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  actionCompletions: ActionCompletionListRelationFilter
  calendars: CalendarListRelationFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isAdmin: BoolFilter
  name: StringNullableFilter
  userActions: UserActionListRelationFilter
  userBeliefs: UserBeliefListRelationFilter
  userIdentities: UserIdentityListRelationFilter
  userValues: UserValueListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Value {
  _count: ValueCount!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
  userValues(cursor: UserValueWhereUniqueInput, distinct: [UserValueScalarFieldEnum!], orderBy: [UserValueOrderByWithRelationInput!], skip: Int, take: Int, where: UserValueWhereInput): [UserValue!]!
}

type ValueAvgAggregate {
  id: Float
}

input ValueAvgOrderByAggregateInput {
  id: SortOrder
}

type ValueCount {
  userValues: Int!
}

type ValueCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input ValueCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueCreateInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
  userValues: UserValueCreateNestedManyWithoutValueInput
}

input ValueCreateManyInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input ValueCreateNestedOneWithoutUserValuesInput {
  connect: ValueWhereUniqueInput
  connectOrCreate: ValueCreateOrConnectWithoutUserValuesInput
  create: ValueCreateWithoutUserValuesInput
}

input ValueCreateOrConnectWithoutUserValuesInput {
  create: ValueCreateWithoutUserValuesInput!
  where: ValueWhereUniqueInput!
}

input ValueCreateWithoutUserValuesInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
}

type ValueGroupBy {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type ValueMaxAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input ValueMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type ValueMinAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input ValueMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByWithAggregationInput {
  _avg: ValueAvgOrderByAggregateInput
  _count: ValueCountOrderByAggregateInput
  _max: ValueMaxOrderByAggregateInput
  _min: ValueMinOrderByAggregateInput
  _sum: ValueSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
  userValues: UserValueOrderByRelationAggregateInput
}

input ValueRelationFilter {
  is: ValueWhereInput
  isNot: ValueWhereInput
}

enum ValueScalarFieldEnum {
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input ValueScalarWhereWithAggregatesInput {
  AND: [ValueScalarWhereWithAggregatesInput!]
  NOT: [ValueScalarWhereWithAggregatesInput!]
  OR: [ValueScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type ValueSumAggregate {
  id: Int
}

input ValueSumOrderByAggregateInput {
  id: SortOrder
}

input ValueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userValues: UserValueUpdateManyWithoutValueInput
}

input ValueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ValueUpdateOneRequiredWithoutUserValuesInput {
  connect: ValueWhereUniqueInput
  connectOrCreate: ValueCreateOrConnectWithoutUserValuesInput
  create: ValueCreateWithoutUserValuesInput
  update: ValueUpdateWithoutUserValuesInput
  upsert: ValueUpsertWithoutUserValuesInput
}

input ValueUpdateWithoutUserValuesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ValueUpsertWithoutUserValuesInput {
  create: ValueCreateWithoutUserValuesInput!
  update: ValueUpdateWithoutUserValuesInput!
}

input ValueWhereInput {
  AND: [ValueWhereInput!]
  NOT: [ValueWhereInput!]
  OR: [ValueWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeNullableFilter
  userValues: UserValueListRelationFilter
}

input ValueWhereUniqueInput {
  id: Int
  slug: String
}
