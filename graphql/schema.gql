# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  _count: AccountCount
  accessToken: String
  accessTokenExpiry: DateTimeISO
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  createdAt: DateTimeISO!
  id: String!
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]!
  syncToken: String
  user: User!
  userId: String!
}

type AccountAvgAggregate {
  id: String
  userId: String
}

input AccountAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type AccountCount {
  calendars: Int!
}

type AccountCountAggregate {
  _all: Int!
  accessToken: Int!
  accessTokenExpiry: Int!
  createdAt: Int!
  id: String!
  provider: Int!
  refreshToken: Int!
  remoteId: String!
  scopes: Int!
  syncToken: Int!
  userId: String!
}

input AccountCountOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpiry: SortOrder
  createdAt: SortOrder
  id: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  remoteId: SortOrder
  scopes: SortOrder
  syncToken: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  calendars: CalendarCreateNestedManyWithoutAccountInput
  createdAt: DateTimeISO
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: AccountCreatescopesInput
  syncToken: String
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  id: String
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: AccountCreateManyscopesInput
  syncToken: String
  userId: String!
}

input AccountCreateManyUserInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  id: String
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: AccountCreateManyscopesInput
  syncToken: String
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateManyscopesInput {
  set: [String!]!
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateNestedOneWithoutCalendarsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutCalendarsInput
  create: AccountCreateWithoutCalendarsInput
}

input AccountCreateOrConnectWithoutCalendarsInput {
  create: AccountCreateWithoutCalendarsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutCalendarsInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: AccountCreatescopesInput
  syncToken: String
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateWithoutUserInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  calendars: CalendarCreateNestedManyWithoutAccountInput
  createdAt: DateTimeISO
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: AccountCreatescopesInput
  syncToken: String
}

input AccountCreatescopesInput {
  set: [String!]!
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]
  syncToken: String
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  id: String
  provider: String
  refreshToken: String
  remoteId: String
  syncToken: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpiry: SortOrder
  createdAt: SortOrder
  id: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO
  id: String
  provider: String
  refreshToken: String
  remoteId: String
  syncToken: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpiry: SortOrder
  createdAt: SortOrder
  id: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  accessToken: SortOrder
  accessTokenExpiry: SortOrder
  createdAt: SortOrder
  id: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  remoteId: SortOrder
  scopes: SortOrder
  syncToken: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  accessToken: SortOrder
  accessTokenExpiry: SortOrder
  calendars: CalendarOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  remoteId: SortOrder
  scopes: SortOrder
  syncToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderRemoteIdCompoundUniqueInput {
  provider: String!
  remoteId: String!
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

enum AccountScalarFieldEnum {
  accessToken
  accessTokenExpiry
  createdAt
  id
  provider
  refreshToken
  remoteId
  scopes
  syncToken
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  accessToken: StringNullableFilter
  accessTokenExpiry: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  provider: StringFilter
  refreshToken: StringNullableFilter
  remoteId: StringFilter
  scopes: StringNullableListFilter
  syncToken: StringNullableFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  accessToken: StringNullableWithAggregatesFilter
  accessTokenExpiry: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  provider: StringWithAggregatesFilter
  refreshToken: StringNullableWithAggregatesFilter
  remoteId: StringWithAggregatesFilter
  scopes: StringNullableListFilter
  syncToken: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  id: String
  userId: String
}

input AccountSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input AccountUpdateInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpiry: NullableDateTimeFieldUpdateOperationsInput
  calendars: CalendarUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  remoteId: StringFieldUpdateOperationsInput
  scopes: AccountUpdatescopesInput
  syncToken: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpiry: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  remoteId: StringFieldUpdateOperationsInput
  scopes: AccountUpdatescopesInput
  syncToken: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateOneWithoutCalendarsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutCalendarsInput
  create: AccountCreateWithoutCalendarsInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutCalendarsInput
  upsert: AccountUpsertWithoutCalendarsInput
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutCalendarsInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpiry: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  remoteId: StringFieldUpdateOperationsInput
  scopes: AccountUpdatescopesInput
  syncToken: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateWithoutUserInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpiry: NullableDateTimeFieldUpdateOperationsInput
  calendars: CalendarUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  remoteId: StringFieldUpdateOperationsInput
  scopes: AccountUpdatescopesInput
  syncToken: NullableStringFieldUpdateOperationsInput
}

input AccountUpdatescopesInput {
  push: [String!]
  set: [String!]
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpsertWithoutCalendarsInput {
  create: AccountCreateWithoutCalendarsInput!
  update: AccountUpdateWithoutCalendarsInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  accessToken: StringNullableFilter
  accessTokenExpiry: DateTimeNullableFilter
  calendars: CalendarListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  provider: StringFilter
  refreshToken: StringNullableFilter
  remoteId: StringFilter
  scopes: StringNullableListFilter
  syncToken: StringNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_remoteId: AccountProviderRemoteIdCompoundUniqueInput
}

type Act {
  _count: ActCount
  archivedAt: DateTimeISO
  categorizations(cursor: CategorizationWhereUniqueInput, distinct: [CategorizationScalarFieldEnum!], orderBy: [CategorizationOrderByWithRelationInput!], skip: Int, take: Int, where: CategorizationWhereInput): [Categorization!]!
  createdAt: DateTimeISO!
  description: String
  habits(cursor: HabitWhereUniqueInput, distinct: [HabitScalarFieldEnum!], orderBy: [HabitOrderByWithRelationInput!], skip: Int, take: Int, where: HabitWhereInput): [Habit!]!
  id: String!
  identityRelations(cursor: IdentityActRelationWhereUniqueInput, distinct: [IdentityActRelationScalarFieldEnum!], orderBy: [IdentityActRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): [IdentityActRelation!]!
  isPublic: Boolean!
  metricApplications(cursor: MetricApplicationWhereUniqueInput, distinct: [MetricApplicationScalarFieldEnum!], orderBy: [MetricApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): [MetricApplication!]!
  name: String!
  parent: Act
  parentId: String
  scheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  slug: String!
  updatedAt: DateTimeISO!
  variants(cursor: ActWhereUniqueInput, distinct: [ActScalarFieldEnum!], orderBy: [ActOrderByWithRelationInput!], skip: Int, take: Int, where: ActWhereInput): [Act!]!
}

type ActAvgAggregate {
  id: String
  parentId: Float
}

input ActAvgOrderByAggregateInput {
  id: SortOrder
  parentId: SortOrder
}

type ActCount {
  categorizations: Int!
  habits: Int!
  identityRelations: Int!
  metricApplications: Int!
  scheduleTemplates: Int!
  variants: Int!
}

type ActCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  id: String!
  isPublic: Int!
  name: Int!
  parentId: String!
  slug: Int!
  updatedAt: Int!
}

input ActCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  parentId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ActCreateInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String!
  parentId: String
  slug: String!
  updatedAt: DateTimeISO
}

input ActCreateManyParentInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input ActCreateManyParentInputEnvelope {
  data: [ActCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input ActCreateNestedManyWithoutParentInput {
  connect: [ActWhereUniqueInput!]
  connectOrCreate: [ActCreateOrConnectWithoutParentInput!]
  create: [ActCreateWithoutParentInput!]
  createMany: ActCreateManyParentInputEnvelope
}

input ActCreateNestedOneWithoutCategorizationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutCategorizationsInput
  create: ActCreateWithoutCategorizationsInput
}

input ActCreateNestedOneWithoutHabitsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutHabitsInput
  create: ActCreateWithoutHabitsInput
}

input ActCreateNestedOneWithoutIdentityRelationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutIdentityRelationsInput
  create: ActCreateWithoutIdentityRelationsInput
}

input ActCreateNestedOneWithoutMetricApplicationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutMetricApplicationsInput
  create: ActCreateWithoutMetricApplicationsInput
}

input ActCreateNestedOneWithoutScheduleTemplatesInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutScheduleTemplatesInput
  create: ActCreateWithoutScheduleTemplatesInput
}

input ActCreateNestedOneWithoutVariantsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutVariantsInput
  create: ActCreateWithoutVariantsInput
}

input ActCreateOrConnectWithoutCategorizationsInput {
  create: ActCreateWithoutCategorizationsInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutHabitsInput {
  create: ActCreateWithoutHabitsInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutIdentityRelationsInput {
  create: ActCreateWithoutIdentityRelationsInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutMetricApplicationsInput {
  create: ActCreateWithoutMetricApplicationsInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutParentInput {
  create: ActCreateWithoutParentInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutScheduleTemplatesInput {
  create: ActCreateWithoutScheduleTemplatesInput!
  where: ActWhereUniqueInput!
}

input ActCreateOrConnectWithoutVariantsInput {
  create: ActCreateWithoutVariantsInput!
  where: ActWhereUniqueInput!
}

input ActCreateWithoutCategorizationsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutHabitsInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutIdentityRelationsInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutMetricApplicationsInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutParentInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutScheduleTemplatesInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  slug: String!
  updatedAt: DateTimeISO
  variants: ActCreateNestedManyWithoutParentInput
}

input ActCreateWithoutVariantsInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutActInput
  createdAt: DateTimeISO
  description: String
  habits: HabitCreateNestedManyWithoutActInput
  identityRelations: IdentityActRelationCreateNestedManyWithoutActionInput
  isPublic: Boolean
  metricApplications: MetricApplicationCreateNestedManyWithoutActInput
  name: String!
  parent: ActCreateNestedOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutActInput
  slug: String!
  updatedAt: DateTimeISO
}

type ActGroupBy {
  _avg: ActAvgAggregate
  _count: ActCountAggregate
  _max: ActMaxAggregate
  _min: ActMinAggregate
  _sum: ActSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  isPublic: Boolean!
  name: String!
  parentId: String
  slug: String!
  updatedAt: DateTimeISO!
}

input ActListRelationFilter {
  every: ActWhereInput
  none: ActWhereInput
  some: ActWhereInput
}

type ActMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String
  parentId: String
  slug: String
  updatedAt: DateTimeISO
}

input ActMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  parentId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type ActMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String
  parentId: String
  slug: String
  updatedAt: DateTimeISO
}

input ActMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  parentId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ActOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActOrderByWithAggregationInput {
  _avg: ActAvgOrderByAggregateInput
  _count: ActCountOrderByAggregateInput
  _max: ActMaxOrderByAggregateInput
  _min: ActMinOrderByAggregateInput
  _sum: ActSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  parentId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ActOrderByWithRelationInput {
  archivedAt: SortOrder
  categorizations: CategorizationOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  habits: HabitOrderByRelationAggregateInput
  id: SortOrder
  identityRelations: IdentityActRelationOrderByRelationAggregateInput
  isPublic: SortOrder
  metricApplications: MetricApplicationOrderByRelationAggregateInput
  name: SortOrder
  parent: ActOrderByWithRelationInput
  parentId: SortOrder
  scheduleTemplates: ActionScheduleTemplateOrderByRelationAggregateInput
  slug: SortOrder
  updatedAt: SortOrder
  variants: ActOrderByRelationAggregateInput
}

input ActRelationFilter {
  is: ActWhereInput
  isNot: ActWhereInput
}

enum ActScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  isPublic
  name
  parentId
  slug
  updatedAt
}

input ActScalarWhereInput {
  AND: [ActScalarWhereInput!]
  NOT: [ActScalarWhereInput!]
  OR: [ActScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  parentId: StringNullableFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ActScalarWhereWithAggregatesInput {
  AND: [ActScalarWhereWithAggregatesInput!]
  NOT: [ActScalarWhereWithAggregatesInput!]
  OR: [ActScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  parentId: IntNullableWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ActSumAggregate {
  id: String
  parentId: String
}

input ActSumOrderByAggregateInput {
  id: SortOrder
  parentId: SortOrder
}

input ActUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActUpdateManyWithWhereWithoutParentInput {
  data: ActUpdateManyMutationInput!
  where: ActScalarWhereInput!
}

input ActUpdateManyWithoutParentInput {
  connect: [ActWhereUniqueInput!]
  connectOrCreate: [ActCreateOrConnectWithoutParentInput!]
  create: [ActCreateWithoutParentInput!]
  createMany: ActCreateManyParentInputEnvelope
  delete: [ActWhereUniqueInput!]
  deleteMany: [ActScalarWhereInput!]
  disconnect: [ActWhereUniqueInput!]
  set: [ActWhereUniqueInput!]
  update: [ActUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [ActUpdateManyWithWhereWithoutParentInput!]
  upsert: [ActUpsertWithWhereUniqueWithoutParentInput!]
}

input ActUpdateOneRequiredWithoutCategorizationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutCategorizationsInput
  create: ActCreateWithoutCategorizationsInput
  update: ActUpdateWithoutCategorizationsInput
  upsert: ActUpsertWithoutCategorizationsInput
}

input ActUpdateOneRequiredWithoutHabitsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutHabitsInput
  create: ActCreateWithoutHabitsInput
  update: ActUpdateWithoutHabitsInput
  upsert: ActUpsertWithoutHabitsInput
}

input ActUpdateOneRequiredWithoutIdentityRelationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutIdentityRelationsInput
  create: ActCreateWithoutIdentityRelationsInput
  update: ActUpdateWithoutIdentityRelationsInput
  upsert: ActUpsertWithoutIdentityRelationsInput
}

input ActUpdateOneRequiredWithoutMetricApplicationsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutMetricApplicationsInput
  create: ActCreateWithoutMetricApplicationsInput
  update: ActUpdateWithoutMetricApplicationsInput
  upsert: ActUpsertWithoutMetricApplicationsInput
}

input ActUpdateOneRequiredWithoutScheduleTemplatesInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutScheduleTemplatesInput
  create: ActCreateWithoutScheduleTemplatesInput
  update: ActUpdateWithoutScheduleTemplatesInput
  upsert: ActUpsertWithoutScheduleTemplatesInput
}

input ActUpdateOneWithoutVariantsInput {
  connect: ActWhereUniqueInput
  connectOrCreate: ActCreateOrConnectWithoutVariantsInput
  create: ActCreateWithoutVariantsInput
  delete: Boolean
  disconnect: Boolean
  update: ActUpdateWithoutVariantsInput
  upsert: ActUpsertWithoutVariantsInput
}

input ActUpdateWithWhereUniqueWithoutParentInput {
  data: ActUpdateWithoutParentInput!
  where: ActWhereUniqueInput!
}

input ActUpdateWithoutCategorizationsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutHabitsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutIdentityRelationsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutMetricApplicationsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutParentInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutScheduleTemplatesInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ActUpdateManyWithoutParentInput
}

input ActUpdateWithoutVariantsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutActInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutActInput
  identityRelations: IdentityActRelationUpdateManyWithoutActionInput
  isPublic: BoolFieldUpdateOperationsInput
  metricApplications: MetricApplicationUpdateManyWithoutActInput
  name: StringFieldUpdateOperationsInput
  parent: ActUpdateOneWithoutVariantsInput
  scheduleTemplates: ActionScheduleTemplateUpdateManyWithoutActInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActUpsertWithWhereUniqueWithoutParentInput {
  create: ActCreateWithoutParentInput!
  update: ActUpdateWithoutParentInput!
  where: ActWhereUniqueInput!
}

input ActUpsertWithoutCategorizationsInput {
  create: ActCreateWithoutCategorizationsInput!
  update: ActUpdateWithoutCategorizationsInput!
}

input ActUpsertWithoutHabitsInput {
  create: ActCreateWithoutHabitsInput!
  update: ActUpdateWithoutHabitsInput!
}

input ActUpsertWithoutIdentityRelationsInput {
  create: ActCreateWithoutIdentityRelationsInput!
  update: ActUpdateWithoutIdentityRelationsInput!
}

input ActUpsertWithoutMetricApplicationsInput {
  create: ActCreateWithoutMetricApplicationsInput!
  update: ActUpdateWithoutMetricApplicationsInput!
}

input ActUpsertWithoutScheduleTemplatesInput {
  create: ActCreateWithoutScheduleTemplatesInput!
  update: ActUpdateWithoutScheduleTemplatesInput!
}

input ActUpsertWithoutVariantsInput {
  create: ActCreateWithoutVariantsInput!
  update: ActUpdateWithoutVariantsInput!
}

input ActWhereInput {
  AND: [ActWhereInput!]
  NOT: [ActWhereInput!]
  OR: [ActWhereInput!]
  archivedAt: DateTimeNullableFilter
  categorizations: CategorizationListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  habits: HabitListRelationFilter
  id: StringFilter
  identityRelations: IdentityActRelationListRelationFilter
  isPublic: BoolFilter
  metricApplications: MetricApplicationListRelationFilter
  name: StringFilter
  parent: ActRelationFilter
  parentId: StringNullableFilter
  scheduleTemplates: ActionScheduleTemplateListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
  variants: ActListRelationFilter
}

input ActWhereUniqueInput {
  id: String
  slug: String
}

type Action {
  _count: ActionCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  end: DateTimeISO!
  habit: Habit
  habitId: String
  id: String!
  metricRecords(cursor: MetricRecordWhereUniqueInput, distinct: [MetricRecordScalarFieldEnum!], orderBy: [MetricRecordOrderByWithRelationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): [MetricRecord!]!
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO!
}

type ActionAvgAggregate {
  habitId: String
  id: String
}

input ActionAvgOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
}

type ActionCount {
  metricRecords: Int!
}

type ActionCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  end: Int!
  habitId: String!
  id: String!
  notes: Int!
  start: Int!
  updatedAt: Int!
}

input ActionCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  start: SortOrder
  updatedAt: SortOrder
}

input ActionCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO!
  habit: HabitCreateNestedOneWithoutActionsInput
  metricRecords: MetricRecordCreateNestedManyWithoutActionInput
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO
}

input ActionCreateManyHabitInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO!
  id: String
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO
}

input ActionCreateManyHabitInputEnvelope {
  data: [ActionCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input ActionCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO!
  habitId: String
  id: String
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO
}

input ActionCreateNestedManyWithoutHabitInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutHabitInput!]
  create: [ActionCreateWithoutHabitInput!]
  createMany: ActionCreateManyHabitInputEnvelope
}

input ActionCreateNestedOneWithoutMetricRecordsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutMetricRecordsInput
  create: ActionCreateWithoutMetricRecordsInput
}

input ActionCreateOrConnectWithoutHabitInput {
  create: ActionCreateWithoutHabitInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutMetricRecordsInput {
  create: ActionCreateWithoutMetricRecordsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutHabitInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO!
  metricRecords: MetricRecordCreateNestedManyWithoutActionInput
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO
}

input ActionCreateWithoutMetricRecordsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO!
  habit: HabitCreateNestedOneWithoutActionsInput
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO
}

type ActionGroupBy {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  end: DateTimeISO!
  habitId: String
  id: String!
  notes: String
  start: DateTimeISO!
  updatedAt: DateTimeISO!
}

input ActionListRelationFilter {
  every: ActionWhereInput
  none: ActionWhereInput
  some: ActionWhereInput
}

type ActionMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  start: DateTimeISO
  updatedAt: DateTimeISO
}

input ActionMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  start: SortOrder
  updatedAt: SortOrder
}

type ActionMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  start: DateTimeISO
  updatedAt: DateTimeISO
}

input ActionMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  start: SortOrder
  updatedAt: SortOrder
}

input ActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionOrderByWithAggregationInput {
  _avg: ActionAvgOrderByAggregateInput
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  _sum: ActionSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  start: SortOrder
  updatedAt: SortOrder
}

input ActionOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  metricRecords: MetricRecordOrderByRelationAggregateInput
  notes: SortOrder
  start: SortOrder
  updatedAt: SortOrder
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  archivedAt
  createdAt
  end
  habitId
  id
  notes
  start
  updatedAt
}

input ActionScalarWhereInput {
  AND: [ActionScalarWhereInput!]
  NOT: [ActionScalarWhereInput!]
  OR: [ActionScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  end: DateTimeFilter
  habitId: StringNullableFilter
  id: StringFilter
  notes: StringNullableFilter
  start: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  end: DateTimeWithAggregatesFilter
  habitId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  start: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ActionSchedule {
  _count: ActionScheduleCount
  active: Boolean!
  archivedAt: DateTimeISO
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  createdAt: DateTimeISO!
  frequency: FREQUENCY!
  habit: Habit!
  habitId: String!
  id: String!
  multiplier: Int!
  quantity: Int!
  template: ActionScheduleTemplate
  templateId: String
  updatedAt: DateTimeISO!
}

type ActionScheduleAvgAggregate {
  habitId: String
  id: String
  multiplier: Float
  quantity: Float
  templateId: String
}

input ActionScheduleAvgOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
}

type ActionScheduleCount {
  calendarEvents: Int!
}

type ActionScheduleCountAggregate {
  _all: Int!
  active: Int!
  archivedAt: Int!
  createdAt: Int!
  frequency: Int!
  habitId: String!
  id: String!
  multiplier: Int!
  quantity: Int!
  templateId: String!
  updatedAt: Int!
}

input ActionScheduleCountOrderByAggregateInput {
  active: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  frequency: SortOrder
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
  updatedAt: SortOrder
}

input ActionScheduleCreateInput {
  active: Boolean
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habit: HabitCreateNestedOneWithoutSchedulesInput!
  multiplier: Int
  quantity: Int
  template: ActionScheduleTemplateCreateNestedOneWithoutActionSchedulesInput
  updatedAt: DateTimeISO
}

input ActionScheduleCreateManyHabitInput {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
  templateId: String
  updatedAt: DateTimeISO
}

input ActionScheduleCreateManyHabitInputEnvelope {
  data: [ActionScheduleCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleCreateManyInput {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habitId: String!
  id: String
  multiplier: Int
  quantity: Int
  templateId: String
  updatedAt: DateTimeISO
}

input ActionScheduleCreateManyTemplateInput {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habitId: String!
  id: String
  multiplier: Int
  quantity: Int
  updatedAt: DateTimeISO
}

input ActionScheduleCreateManyTemplateInputEnvelope {
  data: [ActionScheduleCreateManyTemplateInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleCreateNestedManyWithoutHabitInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutHabitInput!]
  create: [ActionScheduleCreateWithoutHabitInput!]
  createMany: ActionScheduleCreateManyHabitInputEnvelope
}

input ActionScheduleCreateNestedManyWithoutTemplateInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutTemplateInput!]
  create: [ActionScheduleCreateWithoutTemplateInput!]
  createMany: ActionScheduleCreateManyTemplateInputEnvelope
}

input ActionScheduleCreateNestedOneWithoutCalendarEventsInput {
  connect: ActionScheduleWhereUniqueInput
  connectOrCreate: ActionScheduleCreateOrConnectWithoutCalendarEventsInput
  create: ActionScheduleCreateWithoutCalendarEventsInput
}

input ActionScheduleCreateOrConnectWithoutCalendarEventsInput {
  create: ActionScheduleCreateWithoutCalendarEventsInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateOrConnectWithoutHabitInput {
  create: ActionScheduleCreateWithoutHabitInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateOrConnectWithoutTemplateInput {
  create: ActionScheduleCreateWithoutTemplateInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateWithoutCalendarEventsInput {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habit: HabitCreateNestedOneWithoutSchedulesInput!
  multiplier: Int
  quantity: Int
  template: ActionScheduleTemplateCreateNestedOneWithoutActionSchedulesInput
  updatedAt: DateTimeISO
}

input ActionScheduleCreateWithoutHabitInput {
  active: Boolean
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  createdAt: DateTimeISO
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  template: ActionScheduleTemplateCreateNestedOneWithoutActionSchedulesInput
  updatedAt: DateTimeISO
}

input ActionScheduleCreateWithoutTemplateInput {
  active: Boolean
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habit: HabitCreateNestedOneWithoutSchedulesInput!
  multiplier: Int
  quantity: Int
  updatedAt: DateTimeISO
}

type ActionScheduleGroupBy {
  _avg: ActionScheduleAvgAggregate
  _count: ActionScheduleCountAggregate
  _max: ActionScheduleMaxAggregate
  _min: ActionScheduleMinAggregate
  _sum: ActionScheduleSumAggregate
  active: Boolean!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  frequency: FREQUENCY!
  habitId: String!
  id: String!
  multiplier: Int!
  quantity: Int!
  templateId: String
  updatedAt: DateTimeISO!
}

input ActionScheduleListRelationFilter {
  every: ActionScheduleWhereInput
  none: ActionScheduleWhereInput
  some: ActionScheduleWhereInput
}

type ActionScheduleMaxAggregate {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habitId: String
  id: String
  multiplier: Int
  quantity: Int
  templateId: String
  updatedAt: DateTimeISO
}

input ActionScheduleMaxOrderByAggregateInput {
  active: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  frequency: SortOrder
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
  updatedAt: SortOrder
}

type ActionScheduleMinAggregate {
  active: Boolean
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  frequency: FREQUENCY
  habitId: String
  id: String
  multiplier: Int
  quantity: Int
  templateId: String
  updatedAt: DateTimeISO
}

input ActionScheduleMinOrderByAggregateInput {
  active: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  frequency: SortOrder
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
  updatedAt: SortOrder
}

input ActionScheduleOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionScheduleOrderByWithAggregationInput {
  _avg: ActionScheduleAvgOrderByAggregateInput
  _count: ActionScheduleCountOrderByAggregateInput
  _max: ActionScheduleMaxOrderByAggregateInput
  _min: ActionScheduleMinOrderByAggregateInput
  _sum: ActionScheduleSumOrderByAggregateInput
  active: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  frequency: SortOrder
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
  updatedAt: SortOrder
}

input ActionScheduleOrderByWithRelationInput {
  active: SortOrder
  archivedAt: SortOrder
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  createdAt: SortOrder
  frequency: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  template: ActionScheduleTemplateOrderByWithRelationInput
  templateId: SortOrder
  updatedAt: SortOrder
}

input ActionScheduleRelationFilter {
  is: ActionScheduleWhereInput
  isNot: ActionScheduleWhereInput
}

enum ActionScheduleScalarFieldEnum {
  active
  archivedAt
  createdAt
  frequency
  habitId
  id
  multiplier
  quantity
  templateId
  updatedAt
}

input ActionScheduleScalarWhereInput {
  AND: [ActionScheduleScalarWhereInput!]
  NOT: [ActionScheduleScalarWhereInput!]
  OR: [ActionScheduleScalarWhereInput!]
  active: BoolFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  frequency: EnumFREQUENCYFilter
  habitId: StringFilter
  id: StringFilter
  multiplier: IntFilter
  quantity: IntFilter
  templateId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ActionScheduleScalarWhereWithAggregatesInput {
  AND: [ActionScheduleScalarWhereWithAggregatesInput!]
  NOT: [ActionScheduleScalarWhereWithAggregatesInput!]
  OR: [ActionScheduleScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  habitId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  templateId: IntNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ActionScheduleSumAggregate {
  habitId: String
  id: String
  multiplier: Int
  quantity: Int
  templateId: String
}

input ActionScheduleSumOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  templateId: SortOrder
}

type ActionScheduleTemplate {
  _count: ActionScheduleTemplateCount
  act: Act!
  actId: String!
  actionSchedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  frequency: FREQUENCY!
  id: String!
  multiplier: Int!
  quantity: Int!
  scheduleTemplate: ScheduleTemplate!
  scheduleTemplateId: String!
}

input ActionScheduleTemplateActIdFrequencyMultiplierCompoundUniqueInput {
  actId: String!
  frequency: FREQUENCY!
  multiplier: Int!
}

type ActionScheduleTemplateAvgAggregate {
  actId: Float
  id: String
  multiplier: Float
  quantity: Float
  scheduleTemplateId: Float
}

input ActionScheduleTemplateAvgOrderByAggregateInput {
  actId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

type ActionScheduleTemplateCount {
  actionSchedules: Int!
}

type ActionScheduleTemplateCountAggregate {
  _all: Int!
  actId: String!
  frequency: Int!
  id: String!
  multiplier: Int!
  quantity: Int!
  scheduleTemplateId: String!
}

input ActionScheduleTemplateCountOrderByAggregateInput {
  actId: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateCreateInput {
  act: ActCreateNestedOneWithoutScheduleTemplatesInput!
  actionSchedules: ActionScheduleCreateNestedManyWithoutTemplateInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
}

input ActionScheduleTemplateCreateManyActInput {
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
  scheduleTemplateId: String!
}

input ActionScheduleTemplateCreateManyActInputEnvelope {
  data: [ActionScheduleTemplateCreateManyActInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleTemplateCreateManyInput {
  actId: String!
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
  scheduleTemplateId: String!
}

input ActionScheduleTemplateCreateManyScheduleTemplateInput {
  actId: String!
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
}

input ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope {
  data: [ActionScheduleTemplateCreateManyScheduleTemplateInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleTemplateCreateNestedManyWithoutActInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutActInput!]
  create: [ActionScheduleTemplateCreateWithoutActInput!]
  createMany: ActionScheduleTemplateCreateManyActInputEnvelope
}

input ActionScheduleTemplateCreateNestedManyWithoutScheduleTemplateInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput!]
  create: [ActionScheduleTemplateCreateWithoutScheduleTemplateInput!]
  createMany: ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope
}

input ActionScheduleTemplateCreateNestedOneWithoutActionSchedulesInput {
  connect: ActionScheduleTemplateWhereUniqueInput
  connectOrCreate: ActionScheduleTemplateCreateOrConnectWithoutActionSchedulesInput
  create: ActionScheduleTemplateCreateWithoutActionSchedulesInput
}

input ActionScheduleTemplateCreateOrConnectWithoutActInput {
  create: ActionScheduleTemplateCreateWithoutActInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateOrConnectWithoutActionSchedulesInput {
  create: ActionScheduleTemplateCreateWithoutActionSchedulesInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput {
  create: ActionScheduleTemplateCreateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateCreateWithoutActInput {
  actionSchedules: ActionScheduleCreateNestedManyWithoutTemplateInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
}

input ActionScheduleTemplateCreateWithoutActionSchedulesInput {
  act: ActCreateNestedOneWithoutScheduleTemplatesInput!
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
  scheduleTemplate: ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput!
}

input ActionScheduleTemplateCreateWithoutScheduleTemplateInput {
  act: ActCreateNestedOneWithoutScheduleTemplatesInput!
  actionSchedules: ActionScheduleCreateNestedManyWithoutTemplateInput
  frequency: FREQUENCY
  multiplier: Int
  quantity: Int
}

type ActionScheduleTemplateGroupBy {
  _avg: ActionScheduleTemplateAvgAggregate
  _count: ActionScheduleTemplateCountAggregate
  _max: ActionScheduleTemplateMaxAggregate
  _min: ActionScheduleTemplateMinAggregate
  _sum: ActionScheduleTemplateSumAggregate
  actId: String!
  frequency: FREQUENCY!
  id: String!
  multiplier: Int!
  quantity: Int!
  scheduleTemplateId: String!
}

input ActionScheduleTemplateListRelationFilter {
  every: ActionScheduleTemplateWhereInput
  none: ActionScheduleTemplateWhereInput
  some: ActionScheduleTemplateWhereInput
}

type ActionScheduleTemplateMaxAggregate {
  actId: String
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
  scheduleTemplateId: String
}

input ActionScheduleTemplateMaxOrderByAggregateInput {
  actId: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

type ActionScheduleTemplateMinAggregate {
  actId: String
  frequency: FREQUENCY
  id: String
  multiplier: Int
  quantity: Int
  scheduleTemplateId: String
}

input ActionScheduleTemplateMinOrderByAggregateInput {
  actId: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionScheduleTemplateOrderByWithAggregationInput {
  _avg: ActionScheduleTemplateAvgOrderByAggregateInput
  _count: ActionScheduleTemplateCountOrderByAggregateInput
  _max: ActionScheduleTemplateMaxOrderByAggregateInput
  _min: ActionScheduleTemplateMinOrderByAggregateInput
  _sum: ActionScheduleTemplateSumOrderByAggregateInput
  actId: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateOrderByWithRelationInput {
  act: ActOrderByWithRelationInput
  actId: SortOrder
  actionSchedules: ActionScheduleOrderByRelationAggregateInput
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplate: ScheduleTemplateOrderByWithRelationInput
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateRelationFilter {
  is: ActionScheduleTemplateWhereInput
  isNot: ActionScheduleTemplateWhereInput
}

enum ActionScheduleTemplateScalarFieldEnum {
  actId
  frequency
  id
  multiplier
  quantity
  scheduleTemplateId
}

input ActionScheduleTemplateScalarWhereInput {
  AND: [ActionScheduleTemplateScalarWhereInput!]
  NOT: [ActionScheduleTemplateScalarWhereInput!]
  OR: [ActionScheduleTemplateScalarWhereInput!]
  actId: StringFilter
  frequency: EnumFREQUENCYFilter
  id: StringFilter
  multiplier: IntFilter
  quantity: IntFilter
  scheduleTemplateId: StringFilter
}

input ActionScheduleTemplateScalarWhereWithAggregatesInput {
  AND: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  NOT: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  OR: [ActionScheduleTemplateScalarWhereWithAggregatesInput!]
  actId: StringWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  id: StringWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  scheduleTemplateId: StringWithAggregatesFilter
}

type ActionScheduleTemplateSumAggregate {
  actId: String
  id: String
  multiplier: Int
  quantity: Int
  scheduleTemplateId: String
}

input ActionScheduleTemplateSumOrderByAggregateInput {
  actId: SortOrder
  id: SortOrder
  multiplier: SortOrder
  quantity: SortOrder
  scheduleTemplateId: SortOrder
}

input ActionScheduleTemplateUpdateInput {
  act: ActUpdateOneRequiredWithoutScheduleTemplatesInput
  actionSchedules: ActionScheduleUpdateManyWithoutTemplateInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
}

input ActionScheduleTemplateUpdateManyMutationInput {
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input ActionScheduleTemplateUpdateManyWithWhereWithoutActInput {
  data: ActionScheduleTemplateUpdateManyMutationInput!
  where: ActionScheduleTemplateScalarWhereInput!
}

input ActionScheduleTemplateUpdateManyWithWhereWithoutScheduleTemplateInput {
  data: ActionScheduleTemplateUpdateManyMutationInput!
  where: ActionScheduleTemplateScalarWhereInput!
}

input ActionScheduleTemplateUpdateManyWithoutActInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutActInput!]
  create: [ActionScheduleTemplateCreateWithoutActInput!]
  createMany: ActionScheduleTemplateCreateManyActInputEnvelope
  delete: [ActionScheduleTemplateWhereUniqueInput!]
  deleteMany: [ActionScheduleTemplateScalarWhereInput!]
  disconnect: [ActionScheduleTemplateWhereUniqueInput!]
  set: [ActionScheduleTemplateWhereUniqueInput!]
  update: [ActionScheduleTemplateUpdateWithWhereUniqueWithoutActInput!]
  updateMany: [ActionScheduleTemplateUpdateManyWithWhereWithoutActInput!]
  upsert: [ActionScheduleTemplateUpsertWithWhereUniqueWithoutActInput!]
}

input ActionScheduleTemplateUpdateManyWithoutScheduleTemplateInput {
  connect: [ActionScheduleTemplateWhereUniqueInput!]
  connectOrCreate: [ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput!]
  create: [ActionScheduleTemplateCreateWithoutScheduleTemplateInput!]
  createMany: ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope
  delete: [ActionScheduleTemplateWhereUniqueInput!]
  deleteMany: [ActionScheduleTemplateScalarWhereInput!]
  disconnect: [ActionScheduleTemplateWhereUniqueInput!]
  set: [ActionScheduleTemplateWhereUniqueInput!]
  update: [ActionScheduleTemplateUpdateWithWhereUniqueWithoutScheduleTemplateInput!]
  updateMany: [ActionScheduleTemplateUpdateManyWithWhereWithoutScheduleTemplateInput!]
  upsert: [ActionScheduleTemplateUpsertWithWhereUniqueWithoutScheduleTemplateInput!]
}

input ActionScheduleTemplateUpdateOneWithoutActionSchedulesInput {
  connect: ActionScheduleTemplateWhereUniqueInput
  connectOrCreate: ActionScheduleTemplateCreateOrConnectWithoutActionSchedulesInput
  create: ActionScheduleTemplateCreateWithoutActionSchedulesInput
  delete: Boolean
  disconnect: Boolean
  update: ActionScheduleTemplateUpdateWithoutActionSchedulesInput
  upsert: ActionScheduleTemplateUpsertWithoutActionSchedulesInput
}

input ActionScheduleTemplateUpdateWithWhereUniqueWithoutActInput {
  data: ActionScheduleTemplateUpdateWithoutActInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpdateWithWhereUniqueWithoutScheduleTemplateInput {
  data: ActionScheduleTemplateUpdateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpdateWithoutActInput {
  actionSchedules: ActionScheduleUpdateManyWithoutTemplateInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
}

input ActionScheduleTemplateUpdateWithoutActionSchedulesInput {
  act: ActUpdateOneRequiredWithoutScheduleTemplatesInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  scheduleTemplate: ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput
}

input ActionScheduleTemplateUpdateWithoutScheduleTemplateInput {
  act: ActUpdateOneRequiredWithoutScheduleTemplatesInput
  actionSchedules: ActionScheduleUpdateManyWithoutTemplateInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input ActionScheduleTemplateUpsertWithWhereUniqueWithoutActInput {
  create: ActionScheduleTemplateCreateWithoutActInput!
  update: ActionScheduleTemplateUpdateWithoutActInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpsertWithWhereUniqueWithoutScheduleTemplateInput {
  create: ActionScheduleTemplateCreateWithoutScheduleTemplateInput!
  update: ActionScheduleTemplateUpdateWithoutScheduleTemplateInput!
  where: ActionScheduleTemplateWhereUniqueInput!
}

input ActionScheduleTemplateUpsertWithoutActionSchedulesInput {
  create: ActionScheduleTemplateCreateWithoutActionSchedulesInput!
  update: ActionScheduleTemplateUpdateWithoutActionSchedulesInput!
}

input ActionScheduleTemplateWhereInput {
  AND: [ActionScheduleTemplateWhereInput!]
  NOT: [ActionScheduleTemplateWhereInput!]
  OR: [ActionScheduleTemplateWhereInput!]
  act: ActRelationFilter
  actId: StringFilter
  actionSchedules: ActionScheduleListRelationFilter
  frequency: EnumFREQUENCYFilter
  id: StringFilter
  multiplier: IntFilter
  quantity: IntFilter
  scheduleTemplate: ScheduleTemplateRelationFilter
  scheduleTemplateId: StringFilter
}

input ActionScheduleTemplateWhereUniqueInput {
  actId_frequency_multiplier: ActionScheduleTemplateActIdFrequencyMultiplierCompoundUniqueInput
  id: String
}

input ActionScheduleUpdateInput {
  active: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutSchedulesInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  template: ActionScheduleTemplateUpdateOneWithoutActionSchedulesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionScheduleUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionScheduleUpdateManyWithWhereWithoutHabitInput {
  data: ActionScheduleUpdateManyMutationInput!
  where: ActionScheduleScalarWhereInput!
}

input ActionScheduleUpdateManyWithWhereWithoutTemplateInput {
  data: ActionScheduleUpdateManyMutationInput!
  where: ActionScheduleScalarWhereInput!
}

input ActionScheduleUpdateManyWithoutHabitInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutHabitInput!]
  create: [ActionScheduleCreateWithoutHabitInput!]
  createMany: ActionScheduleCreateManyHabitInputEnvelope
  delete: [ActionScheduleWhereUniqueInput!]
  deleteMany: [ActionScheduleScalarWhereInput!]
  disconnect: [ActionScheduleWhereUniqueInput!]
  set: [ActionScheduleWhereUniqueInput!]
  update: [ActionScheduleUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [ActionScheduleUpdateManyWithWhereWithoutHabitInput!]
  upsert: [ActionScheduleUpsertWithWhereUniqueWithoutHabitInput!]
}

input ActionScheduleUpdateManyWithoutTemplateInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutTemplateInput!]
  create: [ActionScheduleCreateWithoutTemplateInput!]
  createMany: ActionScheduleCreateManyTemplateInputEnvelope
  delete: [ActionScheduleWhereUniqueInput!]
  deleteMany: [ActionScheduleScalarWhereInput!]
  disconnect: [ActionScheduleWhereUniqueInput!]
  set: [ActionScheduleWhereUniqueInput!]
  update: [ActionScheduleUpdateWithWhereUniqueWithoutTemplateInput!]
  updateMany: [ActionScheduleUpdateManyWithWhereWithoutTemplateInput!]
  upsert: [ActionScheduleUpsertWithWhereUniqueWithoutTemplateInput!]
}

input ActionScheduleUpdateOneWithoutCalendarEventsInput {
  connect: ActionScheduleWhereUniqueInput
  connectOrCreate: ActionScheduleCreateOrConnectWithoutCalendarEventsInput
  create: ActionScheduleCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: ActionScheduleUpdateWithoutCalendarEventsInput
  upsert: ActionScheduleUpsertWithoutCalendarEventsInput
}

input ActionScheduleUpdateWithWhereUniqueWithoutHabitInput {
  data: ActionScheduleUpdateWithoutHabitInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpdateWithWhereUniqueWithoutTemplateInput {
  data: ActionScheduleUpdateWithoutTemplateInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpdateWithoutCalendarEventsInput {
  active: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutSchedulesInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  template: ActionScheduleTemplateUpdateOneWithoutActionSchedulesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionScheduleUpdateWithoutHabitInput {
  active: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  template: ActionScheduleTemplateUpdateOneWithoutActionSchedulesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionScheduleUpdateWithoutTemplateInput {
  active: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutSchedulesInput
  multiplier: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionScheduleUpsertWithWhereUniqueWithoutHabitInput {
  create: ActionScheduleCreateWithoutHabitInput!
  update: ActionScheduleUpdateWithoutHabitInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpsertWithWhereUniqueWithoutTemplateInput {
  create: ActionScheduleCreateWithoutTemplateInput!
  update: ActionScheduleUpdateWithoutTemplateInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpsertWithoutCalendarEventsInput {
  create: ActionScheduleCreateWithoutCalendarEventsInput!
  update: ActionScheduleUpdateWithoutCalendarEventsInput!
}

input ActionScheduleWhereInput {
  AND: [ActionScheduleWhereInput!]
  NOT: [ActionScheduleWhereInput!]
  OR: [ActionScheduleWhereInput!]
  active: BoolFilter
  archivedAt: DateTimeNullableFilter
  calendarEvents: CalendarEventListRelationFilter
  createdAt: DateTimeFilter
  frequency: EnumFREQUENCYFilter
  habit: HabitRelationFilter
  habitId: StringFilter
  id: StringFilter
  multiplier: IntFilter
  quantity: IntFilter
  template: ActionScheduleTemplateRelationFilter
  templateId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ActionScheduleWhereUniqueInput {
  id: String
}

type ActionSumAggregate {
  habitId: String
  id: String
}

input ActionSumOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
}

input ActionUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutActionsInput
  metricRecords: MetricRecordUpdateManyWithoutActionInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionUpdateManyWithWhereWithoutHabitInput {
  data: ActionUpdateManyMutationInput!
  where: ActionScalarWhereInput!
}

input ActionUpdateManyWithoutHabitInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutHabitInput!]
  create: [ActionCreateWithoutHabitInput!]
  createMany: ActionCreateManyHabitInputEnvelope
  delete: [ActionWhereUniqueInput!]
  deleteMany: [ActionScalarWhereInput!]
  disconnect: [ActionWhereUniqueInput!]
  set: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [ActionUpdateManyWithWhereWithoutHabitInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutHabitInput!]
}

input ActionUpdateOneRequiredWithoutMetricRecordsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutMetricRecordsInput
  create: ActionCreateWithoutMetricRecordsInput
  update: ActionUpdateWithoutMetricRecordsInput
  upsert: ActionUpsertWithoutMetricRecordsInput
}

input ActionUpdateWithWhereUniqueWithoutHabitInput {
  data: ActionUpdateWithoutHabitInput!
  where: ActionWhereUniqueInput!
}

input ActionUpdateWithoutHabitInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  metricRecords: MetricRecordUpdateManyWithoutActionInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionUpdateWithoutMetricRecordsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutActionsInput
  notes: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ActionUpsertWithWhereUniqueWithoutHabitInput {
  create: ActionCreateWithoutHabitInput!
  update: ActionUpdateWithoutHabitInput!
  where: ActionWhereUniqueInput!
}

input ActionUpsertWithoutMetricRecordsInput {
  create: ActionCreateWithoutMetricRecordsInput!
  update: ActionUpdateWithoutMetricRecordsInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  end: DateTimeFilter
  habit: HabitRelationFilter
  habitId: StringNullableFilter
  id: StringFilter
  metricRecords: MetricRecordListRelationFilter
  notes: StringNullableFilter
  start: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ActionWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateAct {
  _avg: ActAvgAggregate
  _count: ActCountAggregate
  _max: ActMaxAggregate
  _min: ActMinAggregate
  _sum: ActSumAggregate
}

type AggregateAction {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
}

type AggregateActionSchedule {
  _avg: ActionScheduleAvgAggregate
  _count: ActionScheduleCountAggregate
  _max: ActionScheduleMaxAggregate
  _min: ActionScheduleMinAggregate
  _sum: ActionScheduleSumAggregate
}

type AggregateActionScheduleTemplate {
  _avg: ActionScheduleTemplateAvgAggregate
  _count: ActionScheduleTemplateCountAggregate
  _max: ActionScheduleTemplateMaxAggregate
  _min: ActionScheduleTemplateMinAggregate
  _sum: ActionScheduleTemplateSumAggregate
}

type AggregateAuthor {
  _avg: AuthorAvgAggregate
  _count: AuthorCountAggregate
  _max: AuthorMaxAggregate
  _min: AuthorMinAggregate
  _sum: AuthorSumAggregate
}

type AggregateAuthorship {
  _avg: AuthorshipAvgAggregate
  _count: AuthorshipCountAggregate
  _max: AuthorshipMaxAggregate
  _min: AuthorshipMinAggregate
  _sum: AuthorshipSumAggregate
}

type AggregateBelief {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
}

type AggregateBook {
  _avg: BookAvgAggregate
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
  _sum: BookSumAggregate
}

type AggregateBookReview {
  _avg: BookReviewAvgAggregate
  _count: BookReviewCountAggregate
  _max: BookReviewMaxAggregate
  _min: BookReviewMinAggregate
  _sum: BookReviewSumAggregate
}

type AggregateBookshelf {
  _avg: BookshelfAvgAggregate
  _count: BookshelfCountAggregate
  _max: BookshelfMaxAggregate
  _min: BookshelfMinAggregate
  _sum: BookshelfSumAggregate
}

type AggregateCalendar {
  _avg: CalendarAvgAggregate
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
  _sum: CalendarSumAggregate
}

type AggregateCalendarEvent {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
}

type AggregateCategorization {
  _avg: CategorizationAvgAggregate
  _count: CategorizationCountAggregate
  _max: CategorizationMaxAggregate
  _min: CategorizationMinAggregate
  _sum: CategorizationSumAggregate
}

type AggregateCategory {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
}

type AggregateDashboard {
  _avg: DashboardAvgAggregate
  _count: DashboardCountAggregate
  _max: DashboardMaxAggregate
  _min: DashboardMinAggregate
  _sum: DashboardSumAggregate
}

type AggregateGoal {
  _avg: GoalAvgAggregate
  _count: GoalCountAggregate
  _max: GoalMaxAggregate
  _min: GoalMinAggregate
  _sum: GoalSumAggregate
}

type AggregateHabit {
  _avg: HabitAvgAggregate
  _count: HabitCountAggregate
  _max: HabitMaxAggregate
  _min: HabitMinAggregate
  _sum: HabitSumAggregate
}

type AggregateIdentity {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
}

type AggregateIdentityActRelation {
  _avg: IdentityActRelationAvgAggregate
  _count: IdentityActRelationCountAggregate
  _max: IdentityActRelationMaxAggregate
  _min: IdentityActRelationMinAggregate
  _sum: IdentityActRelationSumAggregate
}

type AggregateItem {
  _avg: ItemAvgAggregate
  _count: ItemCountAggregate
  _max: ItemMaxAggregate
  _min: ItemMinAggregate
  _sum: ItemSumAggregate
}

type AggregateList {
  _avg: ListAvgAggregate
  _count: ListCountAggregate
  _max: ListMaxAggregate
  _min: ListMinAggregate
  _sum: ListSumAggregate
}

type AggregateMantra {
  _avg: MantraAvgAggregate
  _count: MantraCountAggregate
  _max: MantraMaxAggregate
  _min: MantraMinAggregate
  _sum: MantraSumAggregate
}

type AggregateMetric {
  _avg: MetricAvgAggregate
  _count: MetricCountAggregate
  _max: MetricMaxAggregate
  _min: MetricMinAggregate
  _sum: MetricSumAggregate
}

type AggregateMetricApplication {
  _avg: MetricApplicationAvgAggregate
  _count: MetricApplicationCountAggregate
  _max: MetricApplicationMaxAggregate
  _min: MetricApplicationMinAggregate
  _sum: MetricApplicationSumAggregate
}

type AggregateMetricRecord {
  _avg: MetricRecordAvgAggregate
  _count: MetricRecordCountAggregate
  _max: MetricRecordMaxAggregate
  _min: MetricRecordMinAggregate
  _sum: MetricRecordSumAggregate
}

type AggregateMetricUsage {
  _avg: MetricUsageAvgAggregate
  _count: MetricUsageCountAggregate
  _max: MetricUsageMaxAggregate
  _min: MetricUsageMinAggregate
  _sum: MetricUsageSumAggregate
}

type AggregateNote {
  _avg: NoteAvgAggregate
  _count: NoteCountAggregate
  _max: NoteMaxAggregate
  _min: NoteMinAggregate
  _sum: NoteSumAggregate
}

type AggregateNotebook {
  _avg: NotebookAvgAggregate
  _count: NotebookCountAggregate
  _max: NotebookMaxAggregate
  _min: NotebookMinAggregate
  _sum: NotebookSumAggregate
}

type AggregateNotebookUserPermission {
  _avg: NotebookUserPermissionAvgAggregate
  _count: NotebookUserPermissionCountAggregate
  _max: NotebookUserPermissionMaxAggregate
  _min: NotebookUserPermissionMinAggregate
  _sum: NotebookUserPermissionSumAggregate
}

type AggregateReading {
  _avg: ReadingAvgAggregate
  _count: ReadingCountAggregate
  _max: ReadingMaxAggregate
  _min: ReadingMinAggregate
  _sum: ReadingSumAggregate
}

type AggregateRedirect {
  _avg: RedirectAvgAggregate
  _count: RedirectCountAggregate
  _max: RedirectMaxAggregate
  _min: RedirectMinAggregate
  _sum: RedirectSumAggregate
}

type AggregateRoutine {
  _avg: RoutineAvgAggregate
  _count: RoutineCountAggregate
  _max: RoutineMaxAggregate
  _min: RoutineMinAggregate
  _sum: RoutineSumAggregate
}

type AggregateRoutineHabit {
  _avg: RoutineHabitAvgAggregate
  _count: RoutineHabitCountAggregate
  _max: RoutineHabitMaxAggregate
  _min: RoutineHabitMinAggregate
  _sum: RoutineHabitSumAggregate
}

type AggregateScheduleTemplate {
  _avg: ScheduleTemplateAvgAggregate
  _count: ScheduleTemplateCountAggregate
  _max: ScheduleTemplateMaxAggregate
  _min: ScheduleTemplateMinAggregate
  _sum: ScheduleTemplateSumAggregate
}

type AggregateShelving {
  _avg: ShelvingAvgAggregate
  _count: ShelvingCountAggregate
  _max: ShelvingMaxAggregate
  _min: ShelvingMinAggregate
  _sum: ShelvingSumAggregate
}

type AggregateTask {
  _avg: TaskAvgAggregate
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  _sum: TaskSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AggregateValue {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
}

type Author {
  _count: AuthorCount
  archivedAt: DateTimeISO
  authorships(cursor: AuthorshipWhereUniqueInput, distinct: [AuthorshipScalarFieldEnum!], orderBy: [AuthorshipOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): [Authorship!]!
  createdAt: DateTimeISO!
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
}

type AuthorAvgAggregate {
  id: String
}

input AuthorAvgOrderByAggregateInput {
  id: SortOrder
}

type AuthorCount {
  authorships: Int!
}

type AuthorCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  id: String!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input AuthorCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorCreateInput {
  archivedAt: DateTimeISO
  authorships: AuthorshipCreateNestedManyWithoutAuthorInput
  createdAt: DateTimeISO
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input AuthorCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input AuthorCreateNestedOneWithoutAuthorshipsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutAuthorshipsInput
  create: AuthorCreateWithoutAuthorshipsInput
}

input AuthorCreateOrConnectWithoutAuthorshipsInput {
  create: AuthorCreateWithoutAuthorshipsInput!
  where: AuthorWhereUniqueInput!
}

input AuthorCreateWithoutAuthorshipsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

type AuthorGroupBy {
  _avg: AuthorAvgAggregate
  _count: AuthorCountAggregate
  _max: AuthorMaxAggregate
  _min: AuthorMinAggregate
  _sum: AuthorSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
}

type AuthorMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input AuthorMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type AuthorMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input AuthorMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithAggregationInput {
  _avg: AuthorAvgOrderByAggregateInput
  _count: AuthorCountOrderByAggregateInput
  _max: AuthorMaxOrderByAggregateInput
  _min: AuthorMinOrderByAggregateInput
  _sum: AuthorSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithRelationInput {
  archivedAt: SortOrder
  authorships: AuthorshipOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorRelationFilter {
  is: AuthorWhereInput
  isNot: AuthorWhereInput
}

enum AuthorScalarFieldEnum {
  archivedAt
  createdAt
  id
  name
  slug
  updatedAt
}

input AuthorScalarWhereWithAggregatesInput {
  AND: [AuthorScalarWhereWithAggregatesInput!]
  NOT: [AuthorScalarWhereWithAggregatesInput!]
  OR: [AuthorScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AuthorSumAggregate {
  id: String
}

input AuthorSumOrderByAggregateInput {
  id: SortOrder
}

input AuthorUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorships: AuthorshipUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateOneRequiredWithoutAuthorshipsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutAuthorshipsInput
  create: AuthorCreateWithoutAuthorshipsInput
  update: AuthorUpdateWithoutAuthorshipsInput
  upsert: AuthorUpsertWithoutAuthorshipsInput
}

input AuthorUpdateWithoutAuthorshipsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpsertWithoutAuthorshipsInput {
  create: AuthorCreateWithoutAuthorshipsInput!
  update: AuthorUpdateWithoutAuthorshipsInput!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  archivedAt: DateTimeNullableFilter
  authorships: AuthorshipListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input AuthorWhereUniqueInput {
  id: String
  slug: String
}

type Authorship {
  archivedAt: DateTimeISO
  author: Author!
  authorId: String!
  book: Book!
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  position: Int!
  updatedAt: DateTimeISO!
}

input AuthorshipAuthorIdBookIdCompoundUniqueInput {
  authorId: String!
  bookId: String!
}

type AuthorshipAvgAggregate {
  authorId: Float
  bookId: Float
  id: String
  position: Float
}

input AuthorshipAvgOrderByAggregateInput {
  authorId: SortOrder
  bookId: SortOrder
  id: SortOrder
  position: SortOrder
}

type AuthorshipCountAggregate {
  _all: Int!
  archivedAt: Int!
  authorId: String!
  bookId: String!
  createdAt: Int!
  id: String!
  position: Int!
  updatedAt: Int!
}

input AuthorshipCountOrderByAggregateInput {
  archivedAt: SortOrder
  authorId: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  updatedAt: SortOrder
}

input AuthorshipCreateInput {
  archivedAt: DateTimeISO
  author: AuthorCreateNestedOneWithoutAuthorshipsInput!
  book: BookCreateNestedOneWithoutAuthorshipsInput!
  createdAt: DateTimeISO
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipCreateManyAuthorInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  id: String
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipCreateManyAuthorInputEnvelope {
  data: [AuthorshipCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input AuthorshipCreateManyBookInput {
  archivedAt: DateTimeISO
  authorId: String!
  createdAt: DateTimeISO
  id: String
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipCreateManyBookInputEnvelope {
  data: [AuthorshipCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input AuthorshipCreateManyInput {
  archivedAt: DateTimeISO
  authorId: String!
  bookId: String!
  createdAt: DateTimeISO
  id: String
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipCreateNestedManyWithoutAuthorInput {
  connect: [AuthorshipWhereUniqueInput!]
  connectOrCreate: [AuthorshipCreateOrConnectWithoutAuthorInput!]
  create: [AuthorshipCreateWithoutAuthorInput!]
  createMany: AuthorshipCreateManyAuthorInputEnvelope
}

input AuthorshipCreateNestedManyWithoutBookInput {
  connect: [AuthorshipWhereUniqueInput!]
  connectOrCreate: [AuthorshipCreateOrConnectWithoutBookInput!]
  create: [AuthorshipCreateWithoutBookInput!]
  createMany: AuthorshipCreateManyBookInputEnvelope
}

input AuthorshipCreateOrConnectWithoutAuthorInput {
  create: AuthorshipCreateWithoutAuthorInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipCreateOrConnectWithoutBookInput {
  create: AuthorshipCreateWithoutBookInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipCreateWithoutAuthorInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutAuthorshipsInput!
  createdAt: DateTimeISO
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipCreateWithoutBookInput {
  archivedAt: DateTimeISO
  author: AuthorCreateNestedOneWithoutAuthorshipsInput!
  createdAt: DateTimeISO
  position: Int
  updatedAt: DateTimeISO
}

type AuthorshipGroupBy {
  _avg: AuthorshipAvgAggregate
  _count: AuthorshipCountAggregate
  _max: AuthorshipMaxAggregate
  _min: AuthorshipMinAggregate
  _sum: AuthorshipSumAggregate
  archivedAt: DateTimeISO
  authorId: String!
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  position: Int!
  updatedAt: DateTimeISO!
}

input AuthorshipListRelationFilter {
  every: AuthorshipWhereInput
  none: AuthorshipWhereInput
  some: AuthorshipWhereInput
}

type AuthorshipMaxAggregate {
  archivedAt: DateTimeISO
  authorId: String
  bookId: String
  createdAt: DateTimeISO
  id: String
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipMaxOrderByAggregateInput {
  archivedAt: SortOrder
  authorId: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  updatedAt: SortOrder
}

type AuthorshipMinAggregate {
  archivedAt: DateTimeISO
  authorId: String
  bookId: String
  createdAt: DateTimeISO
  id: String
  position: Int
  updatedAt: DateTimeISO
}

input AuthorshipMinOrderByAggregateInput {
  archivedAt: SortOrder
  authorId: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  updatedAt: SortOrder
}

input AuthorshipOrderByRelationAggregateInput {
  _count: SortOrder
}

input AuthorshipOrderByWithAggregationInput {
  _avg: AuthorshipAvgOrderByAggregateInput
  _count: AuthorshipCountOrderByAggregateInput
  _max: AuthorshipMaxOrderByAggregateInput
  _min: AuthorshipMinOrderByAggregateInput
  _sum: AuthorshipSumOrderByAggregateInput
  archivedAt: SortOrder
  authorId: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  updatedAt: SortOrder
}

input AuthorshipOrderByWithRelationInput {
  archivedAt: SortOrder
  author: AuthorOrderByWithRelationInput
  authorId: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  updatedAt: SortOrder
}

enum AuthorshipScalarFieldEnum {
  archivedAt
  authorId
  bookId
  createdAt
  id
  position
  updatedAt
}

input AuthorshipScalarWhereInput {
  AND: [AuthorshipScalarWhereInput!]
  NOT: [AuthorshipScalarWhereInput!]
  OR: [AuthorshipScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  authorId: StringFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  position: IntFilter
  updatedAt: DateTimeFilter
}

input AuthorshipScalarWhereWithAggregatesInput {
  AND: [AuthorshipScalarWhereWithAggregatesInput!]
  NOT: [AuthorshipScalarWhereWithAggregatesInput!]
  OR: [AuthorshipScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  authorId: StringWithAggregatesFilter
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  position: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AuthorshipSumAggregate {
  authorId: String
  bookId: String
  id: String
  position: Int
}

input AuthorshipSumOrderByAggregateInput {
  authorId: SortOrder
  bookId: SortOrder
  id: SortOrder
  position: SortOrder
}

input AuthorshipUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  author: AuthorUpdateOneRequiredWithoutAuthorshipsInput
  book: BookUpdateOneRequiredWithoutAuthorshipsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorshipUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorshipUpdateManyWithWhereWithoutAuthorInput {
  data: AuthorshipUpdateManyMutationInput!
  where: AuthorshipScalarWhereInput!
}

input AuthorshipUpdateManyWithWhereWithoutBookInput {
  data: AuthorshipUpdateManyMutationInput!
  where: AuthorshipScalarWhereInput!
}

input AuthorshipUpdateManyWithoutAuthorInput {
  connect: [AuthorshipWhereUniqueInput!]
  connectOrCreate: [AuthorshipCreateOrConnectWithoutAuthorInput!]
  create: [AuthorshipCreateWithoutAuthorInput!]
  createMany: AuthorshipCreateManyAuthorInputEnvelope
  delete: [AuthorshipWhereUniqueInput!]
  deleteMany: [AuthorshipScalarWhereInput!]
  disconnect: [AuthorshipWhereUniqueInput!]
  set: [AuthorshipWhereUniqueInput!]
  update: [AuthorshipUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [AuthorshipUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [AuthorshipUpsertWithWhereUniqueWithoutAuthorInput!]
}

input AuthorshipUpdateManyWithoutBookInput {
  connect: [AuthorshipWhereUniqueInput!]
  connectOrCreate: [AuthorshipCreateOrConnectWithoutBookInput!]
  create: [AuthorshipCreateWithoutBookInput!]
  createMany: AuthorshipCreateManyBookInputEnvelope
  delete: [AuthorshipWhereUniqueInput!]
  deleteMany: [AuthorshipScalarWhereInput!]
  disconnect: [AuthorshipWhereUniqueInput!]
  set: [AuthorshipWhereUniqueInput!]
  update: [AuthorshipUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [AuthorshipUpdateManyWithWhereWithoutBookInput!]
  upsert: [AuthorshipUpsertWithWhereUniqueWithoutBookInput!]
}

input AuthorshipUpdateWithWhereUniqueWithoutAuthorInput {
  data: AuthorshipUpdateWithoutAuthorInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipUpdateWithWhereUniqueWithoutBookInput {
  data: AuthorshipUpdateWithoutBookInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipUpdateWithoutAuthorInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutAuthorshipsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorshipUpdateWithoutBookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  author: AuthorUpdateOneRequiredWithoutAuthorshipsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorshipUpsertWithWhereUniqueWithoutAuthorInput {
  create: AuthorshipCreateWithoutAuthorInput!
  update: AuthorshipUpdateWithoutAuthorInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipUpsertWithWhereUniqueWithoutBookInput {
  create: AuthorshipCreateWithoutBookInput!
  update: AuthorshipUpdateWithoutBookInput!
  where: AuthorshipWhereUniqueInput!
}

input AuthorshipWhereInput {
  AND: [AuthorshipWhereInput!]
  NOT: [AuthorshipWhereInput!]
  OR: [AuthorshipWhereInput!]
  archivedAt: DateTimeNullableFilter
  author: AuthorRelationFilter
  authorId: StringFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  position: IntFilter
  updatedAt: DateTimeFilter
}

input AuthorshipWhereUniqueInput {
  authorId_bookId: AuthorshipAuthorIdBookIdCompoundUniqueInput
  id: String
}

type Belief {
  _count: BeliefCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type BeliefAvgAggregate {
  id: String
}

input BeliefAvgOrderByAggregateInput {
  id: SortOrder
}

type BeliefCount {
  belief: Int!
}

type BeliefCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  id: String!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input BeliefCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input BeliefCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input BeliefCreateManyUserInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  id: String
  mantraId: String!
  updatedAt: DateTimeISO
}

input BeliefCreateManyUserInputEnvelope {
  data: [BeliefCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BeliefCreateNestedManyWithoutUserInput {
  connect: [BeliefWhereUniqueInput!]
  connectOrCreate: [BeliefCreateOrConnectWithoutUserInput!]
  create: [BeliefCreateWithoutUserInput!]
  createMany: BeliefCreateManyUserInputEnvelope
}

input BeliefCreateOrConnectWithoutUserInput {
  create: BeliefCreateWithoutUserInput!
  where: BeliefWhereUniqueInput!
}

input BeliefCreateWithoutUserInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

type BeliefGroupBy {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
}

type BeliefMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input BeliefMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type BeliefMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input BeliefMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByRelationAggregateInput {
  _count: SortOrder
}

input BeliefOrderByWithAggregationInput {
  _avg: BeliefAvgOrderByAggregateInput
  _count: BeliefCountOrderByAggregateInput
  _max: BeliefMaxOrderByAggregateInput
  _min: BeliefMinOrderByAggregateInput
  _sum: BeliefSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByWithRelationInput {
  archivedAt: SortOrder
  belief: BeliefOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

enum BeliefScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input BeliefScalarWhereInput {
  AND: [BeliefScalarWhereInput!]
  NOT: [BeliefScalarWhereInput!]
  OR: [BeliefScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mantraId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BeliefScalarWhereWithAggregatesInput {
  AND: [BeliefScalarWhereWithAggregatesInput!]
  NOT: [BeliefScalarWhereWithAggregatesInput!]
  OR: [BeliefScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type BeliefSumAggregate {
  id: String
}

input BeliefSumOrderByAggregateInput {
  id: SortOrder
}

input BeliefUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BeliefUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BeliefUpdateManyWithWhereWithoutUserInput {
  data: BeliefUpdateManyMutationInput!
  where: BeliefScalarWhereInput!
}

input BeliefUpdateManyWithoutUserInput {
  connect: [BeliefWhereUniqueInput!]
  connectOrCreate: [BeliefCreateOrConnectWithoutUserInput!]
  create: [BeliefCreateWithoutUserInput!]
  createMany: BeliefCreateManyUserInputEnvelope
  delete: [BeliefWhereUniqueInput!]
  deleteMany: [BeliefScalarWhereInput!]
  disconnect: [BeliefWhereUniqueInput!]
  set: [BeliefWhereUniqueInput!]
  update: [BeliefUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BeliefUpdateManyWithWhereWithoutUserInput!]
  upsert: [BeliefUpsertWithWhereUniqueWithoutUserInput!]
}

input BeliefUpdateWithWhereUniqueWithoutUserInput {
  data: BeliefUpdateWithoutUserInput!
  where: BeliefWhereUniqueInput!
}

input BeliefUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BeliefUpsertWithWhereUniqueWithoutUserInput {
  create: BeliefCreateWithoutUserInput!
  update: BeliefUpdateWithoutUserInput!
  where: BeliefWhereUniqueInput!
}

input BeliefWhereInput {
  AND: [BeliefWhereInput!]
  NOT: [BeliefWhereInput!]
  OR: [BeliefWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input BeliefWhereUniqueInput {
  id: String
  slug: String
}

type Book {
  BookReview(cursor: BookReviewWhereUniqueInput, distinct: [BookReviewScalarFieldEnum!], orderBy: [BookReviewOrderByWithRelationInput!], skip: Int, take: Int, where: BookReviewWhereInput): [BookReview!]!
  _count: BookCount
  archivedAt: DateTimeISO
  authorNames: [String!]!
  authorNamesLf: [String!]!
  authorships(cursor: AuthorshipWhereUniqueInput, distinct: [AuthorshipScalarFieldEnum!], orderBy: [AuthorshipOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): [Authorship!]!
  createdAt: DateTimeISO!
  description: String
  extra: JSON!
  id: String!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  readings(cursor: ReadingWhereUniqueInput, distinct: [ReadingScalarFieldEnum!], orderBy: [ReadingOrderByWithRelationInput!], skip: Int, take: Int, where: ReadingWhereInput): [Reading!]!
  shelvings(cursor: ShelvingWhereUniqueInput, distinct: [ShelvingScalarFieldEnum!], orderBy: [ShelvingOrderByWithRelationInput!], skip: Int, take: Int, where: ShelvingWhereInput): [Shelving!]!
  slug: String!
  title: String!
  updatedAt: DateTimeISO!
}

type BookAvgAggregate {
  id: String
  originalPublicationYear: Float
  publicationYear: Float
}

input BookAvgOrderByAggregateInput {
  id: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
}

type BookCount {
  BookReview: Int!
  authorships: Int!
  readings: Int!
  shelvings: Int!
}

type BookCountAggregate {
  _all: Int!
  archivedAt: Int!
  authorNames: Int!
  authorNamesLf: Int!
  createdAt: Int!
  description: Int!
  extra: Int!
  id: String!
  ids: Int!
  isbn: Int!
  isbn13: Int!
  originalPublicationYear: Int!
  publicationYear: Int!
  slug: Int!
  title: Int!
  updatedAt: Int!
}

input BookCountOrderByAggregateInput {
  archivedAt: SortOrder
  authorNames: SortOrder
  authorNamesLf: SortOrder
  createdAt: SortOrder
  description: SortOrder
  extra: SortOrder
  id: SortOrder
  ids: SortOrder
  isbn: SortOrder
  isbn13: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input BookCreateInput {
  BookReview: BookReviewCreateNestedManyWithoutBookInput
  archivedAt: DateTimeISO
  authorNames: BookCreateauthorNamesInput
  authorNamesLf: BookCreateauthorNamesLfInput
  authorships: AuthorshipCreateNestedManyWithoutBookInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  readings: ReadingCreateNestedManyWithoutBookInput
  shelvings: ShelvingCreateNestedManyWithoutBookInput
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateManyInput {
  archivedAt: DateTimeISO
  authorNames: BookCreateManyauthorNamesInput
  authorNamesLf: BookCreateManyauthorNamesLfInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  id: String
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateManyauthorNamesInput {
  set: [String!]!
}

input BookCreateManyauthorNamesLfInput {
  set: [String!]!
}

input BookCreateNestedOneWithoutAuthorshipsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutAuthorshipsInput
  create: BookCreateWithoutAuthorshipsInput
}

input BookCreateNestedOneWithoutBookReviewInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookReviewInput
  create: BookCreateWithoutBookReviewInput
}

input BookCreateNestedOneWithoutReadingsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutReadingsInput
  create: BookCreateWithoutReadingsInput
}

input BookCreateNestedOneWithoutShelvingsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutShelvingsInput
  create: BookCreateWithoutShelvingsInput
}

input BookCreateOrConnectWithoutAuthorshipsInput {
  create: BookCreateWithoutAuthorshipsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutBookReviewInput {
  create: BookCreateWithoutBookReviewInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutReadingsInput {
  create: BookCreateWithoutReadingsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutShelvingsInput {
  create: BookCreateWithoutShelvingsInput!
  where: BookWhereUniqueInput!
}

input BookCreateWithoutAuthorshipsInput {
  BookReview: BookReviewCreateNestedManyWithoutBookInput
  archivedAt: DateTimeISO
  authorNames: BookCreateauthorNamesInput
  authorNamesLf: BookCreateauthorNamesLfInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  readings: ReadingCreateNestedManyWithoutBookInput
  shelvings: ShelvingCreateNestedManyWithoutBookInput
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateWithoutBookReviewInput {
  archivedAt: DateTimeISO
  authorNames: BookCreateauthorNamesInput
  authorNamesLf: BookCreateauthorNamesLfInput
  authorships: AuthorshipCreateNestedManyWithoutBookInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  readings: ReadingCreateNestedManyWithoutBookInput
  shelvings: ShelvingCreateNestedManyWithoutBookInput
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateWithoutReadingsInput {
  BookReview: BookReviewCreateNestedManyWithoutBookInput
  archivedAt: DateTimeISO
  authorNames: BookCreateauthorNamesInput
  authorNamesLf: BookCreateauthorNamesLfInput
  authorships: AuthorshipCreateNestedManyWithoutBookInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  shelvings: ShelvingCreateNestedManyWithoutBookInput
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateWithoutShelvingsInput {
  BookReview: BookReviewCreateNestedManyWithoutBookInput
  archivedAt: DateTimeISO
  authorNames: BookCreateauthorNamesInput
  authorNamesLf: BookCreateauthorNamesLfInput
  authorships: AuthorshipCreateNestedManyWithoutBookInput
  createdAt: DateTimeISO
  description: String
  extra: JSON!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  readings: ReadingCreateNestedManyWithoutBookInput
  slug: String!
  title: String!
  updatedAt: DateTimeISO
}

input BookCreateauthorNamesInput {
  set: [String!]!
}

input BookCreateauthorNamesLfInput {
  set: [String!]!
}

type BookGroupBy {
  _avg: BookAvgAggregate
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
  _sum: BookSumAggregate
  archivedAt: DateTimeISO
  authorNames: [String!]
  authorNamesLf: [String!]
  createdAt: DateTimeISO!
  description: String
  extra: JSON!
  id: String!
  ids: JSON!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
  updatedAt: DateTimeISO!
}

type BookMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
  updatedAt: DateTimeISO
}

input BookMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isbn: SortOrder
  isbn13: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type BookMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
  updatedAt: DateTimeISO
}

input BookMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isbn: SortOrder
  isbn13: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input BookOrderByWithAggregationInput {
  _avg: BookAvgOrderByAggregateInput
  _count: BookCountOrderByAggregateInput
  _max: BookMaxOrderByAggregateInput
  _min: BookMinOrderByAggregateInput
  _sum: BookSumOrderByAggregateInput
  archivedAt: SortOrder
  authorNames: SortOrder
  authorNamesLf: SortOrder
  createdAt: SortOrder
  description: SortOrder
  extra: SortOrder
  id: SortOrder
  ids: SortOrder
  isbn: SortOrder
  isbn13: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input BookOrderByWithRelationInput {
  BookReview: BookReviewOrderByRelationAggregateInput
  archivedAt: SortOrder
  authorNames: SortOrder
  authorNamesLf: SortOrder
  authorships: AuthorshipOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  extra: SortOrder
  id: SortOrder
  ids: SortOrder
  isbn: SortOrder
  isbn13: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
  readings: ReadingOrderByRelationAggregateInput
  shelvings: ShelvingOrderByRelationAggregateInput
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

type BookReview {
  archivedAt: DateTimeISO
  book: Book!
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  rating: Int!
  reading: Reading
  readingId: String
  review: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type BookReviewAvgAggregate {
  bookId: Float
  id: String
  rating: Float
  readingId: Float
  userId: String
}

input BookReviewAvgOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  userId: SortOrder
}

type BookReviewCountAggregate {
  _all: Int!
  archivedAt: Int!
  bookId: String!
  createdAt: Int!
  id: String!
  rating: Int!
  readingId: String!
  review: Int!
  updatedAt: Int!
  userId: String!
}

input BookReviewCountOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  review: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookReviewCreateInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutBookReviewInput!
  createdAt: DateTimeISO
  rating: Int!
  reading: ReadingCreateNestedOneWithoutReviewInput
  review: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutBookReviewsInput!
}

input BookReviewCreateManyBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  rating: Int!
  readingId: Int
  review: String!
  updatedAt: DateTimeISO
  userId: String!
}

input BookReviewCreateManyBookInputEnvelope {
  data: [BookReviewCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input BookReviewCreateManyInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  id: String
  rating: Int!
  readingId: Int
  review: String!
  updatedAt: DateTimeISO
  userId: String!
}

input BookReviewCreateManyUserInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  id: String
  rating: Int!
  readingId: Int
  review: String!
  updatedAt: DateTimeISO
}

input BookReviewCreateManyUserInputEnvelope {
  data: [BookReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BookReviewCreateNestedManyWithoutBookInput {
  connect: [BookReviewWhereUniqueInput!]
  connectOrCreate: [BookReviewCreateOrConnectWithoutBookInput!]
  create: [BookReviewCreateWithoutBookInput!]
  createMany: BookReviewCreateManyBookInputEnvelope
}

input BookReviewCreateNestedManyWithoutUserInput {
  connect: [BookReviewWhereUniqueInput!]
  connectOrCreate: [BookReviewCreateOrConnectWithoutUserInput!]
  create: [BookReviewCreateWithoutUserInput!]
  createMany: BookReviewCreateManyUserInputEnvelope
}

input BookReviewCreateNestedOneWithoutReadingInput {
  connect: BookReviewWhereUniqueInput
  connectOrCreate: BookReviewCreateOrConnectWithoutReadingInput
  create: BookReviewCreateWithoutReadingInput
}

input BookReviewCreateOrConnectWithoutBookInput {
  create: BookReviewCreateWithoutBookInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewCreateOrConnectWithoutReadingInput {
  create: BookReviewCreateWithoutReadingInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewCreateOrConnectWithoutUserInput {
  create: BookReviewCreateWithoutUserInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewCreateWithoutBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  rating: Int!
  reading: ReadingCreateNestedOneWithoutReviewInput
  review: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutBookReviewsInput!
}

input BookReviewCreateWithoutReadingInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutBookReviewInput!
  createdAt: DateTimeISO
  rating: Int!
  review: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutBookReviewsInput!
}

input BookReviewCreateWithoutUserInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutBookReviewInput!
  createdAt: DateTimeISO
  rating: Int!
  reading: ReadingCreateNestedOneWithoutReviewInput
  review: String!
  updatedAt: DateTimeISO
}

type BookReviewGroupBy {
  _avg: BookReviewAvgAggregate
  _count: BookReviewCountAggregate
  _max: BookReviewMaxAggregate
  _min: BookReviewMinAggregate
  _sum: BookReviewSumAggregate
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  rating: Int!
  readingId: String
  review: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input BookReviewListRelationFilter {
  every: BookReviewWhereInput
  none: BookReviewWhereInput
  some: BookReviewWhereInput
}

type BookReviewMaxAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  id: String
  rating: Int
  readingId: String
  review: String
  updatedAt: DateTimeISO
  userId: String
}

input BookReviewMaxOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  review: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type BookReviewMinAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  id: String
  rating: Int
  readingId: String
  review: String
  updatedAt: DateTimeISO
  userId: String
}

input BookReviewMinOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  review: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookReviewOrderByWithAggregationInput {
  _avg: BookReviewAvgOrderByAggregateInput
  _count: BookReviewCountOrderByAggregateInput
  _max: BookReviewMaxOrderByAggregateInput
  _min: BookReviewMinOrderByAggregateInput
  _sum: BookReviewSumOrderByAggregateInput
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  review: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookReviewOrderByWithRelationInput {
  archivedAt: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: SortOrder
  reading: ReadingOrderByWithRelationInput
  readingId: SortOrder
  review: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input BookReviewRelationFilter {
  is: BookReviewWhereInput
  isNot: BookReviewWhereInput
}

enum BookReviewScalarFieldEnum {
  archivedAt
  bookId
  createdAt
  id
  rating
  readingId
  review
  updatedAt
  userId
}

input BookReviewScalarWhereInput {
  AND: [BookReviewScalarWhereInput!]
  NOT: [BookReviewScalarWhereInput!]
  OR: [BookReviewScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: IntFilter
  readingId: StringNullableFilter
  review: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BookReviewScalarWhereWithAggregatesInput {
  AND: [BookReviewScalarWhereWithAggregatesInput!]
  NOT: [BookReviewScalarWhereWithAggregatesInput!]
  OR: [BookReviewScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  rating: IntWithAggregatesFilter
  readingId: IntNullableWithAggregatesFilter
  review: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type BookReviewSumAggregate {
  bookId: String
  id: String
  rating: Int
  readingId: String
  userId: String
}

input BookReviewSumOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  rating: SortOrder
  readingId: SortOrder
  userId: SortOrder
}

input BookReviewUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutBookReviewInput
  createdAt: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  reading: ReadingUpdateOneWithoutReviewInput
  review: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookReviewsInput
}

input BookReviewUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  review: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookReviewUpdateManyWithWhereWithoutBookInput {
  data: BookReviewUpdateManyMutationInput!
  where: BookReviewScalarWhereInput!
}

input BookReviewUpdateManyWithWhereWithoutUserInput {
  data: BookReviewUpdateManyMutationInput!
  where: BookReviewScalarWhereInput!
}

input BookReviewUpdateManyWithoutBookInput {
  connect: [BookReviewWhereUniqueInput!]
  connectOrCreate: [BookReviewCreateOrConnectWithoutBookInput!]
  create: [BookReviewCreateWithoutBookInput!]
  createMany: BookReviewCreateManyBookInputEnvelope
  delete: [BookReviewWhereUniqueInput!]
  deleteMany: [BookReviewScalarWhereInput!]
  disconnect: [BookReviewWhereUniqueInput!]
  set: [BookReviewWhereUniqueInput!]
  update: [BookReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [BookReviewUpdateManyWithWhereWithoutBookInput!]
  upsert: [BookReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input BookReviewUpdateManyWithoutUserInput {
  connect: [BookReviewWhereUniqueInput!]
  connectOrCreate: [BookReviewCreateOrConnectWithoutUserInput!]
  create: [BookReviewCreateWithoutUserInput!]
  createMany: BookReviewCreateManyUserInputEnvelope
  delete: [BookReviewWhereUniqueInput!]
  deleteMany: [BookReviewScalarWhereInput!]
  disconnect: [BookReviewWhereUniqueInput!]
  set: [BookReviewWhereUniqueInput!]
  update: [BookReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BookReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [BookReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input BookReviewUpdateOneWithoutReadingInput {
  connect: BookReviewWhereUniqueInput
  connectOrCreate: BookReviewCreateOrConnectWithoutReadingInput
  create: BookReviewCreateWithoutReadingInput
  delete: Boolean
  disconnect: Boolean
  update: BookReviewUpdateWithoutReadingInput
  upsert: BookReviewUpsertWithoutReadingInput
}

input BookReviewUpdateWithWhereUniqueWithoutBookInput {
  data: BookReviewUpdateWithoutBookInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewUpdateWithWhereUniqueWithoutUserInput {
  data: BookReviewUpdateWithoutUserInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewUpdateWithoutBookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  reading: ReadingUpdateOneWithoutReviewInput
  review: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookReviewsInput
}

input BookReviewUpdateWithoutReadingInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutBookReviewInput
  createdAt: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  review: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookReviewsInput
}

input BookReviewUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutBookReviewInput
  createdAt: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  reading: ReadingUpdateOneWithoutReviewInput
  review: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookReviewUpsertWithWhereUniqueWithoutBookInput {
  create: BookReviewCreateWithoutBookInput!
  update: BookReviewUpdateWithoutBookInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewUpsertWithWhereUniqueWithoutUserInput {
  create: BookReviewCreateWithoutUserInput!
  update: BookReviewUpdateWithoutUserInput!
  where: BookReviewWhereUniqueInput!
}

input BookReviewUpsertWithoutReadingInput {
  create: BookReviewCreateWithoutReadingInput!
  update: BookReviewUpdateWithoutReadingInput!
}

input BookReviewWhereInput {
  AND: [BookReviewWhereInput!]
  NOT: [BookReviewWhereInput!]
  OR: [BookReviewWhereInput!]
  archivedAt: DateTimeNullableFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: IntFilter
  reading: ReadingRelationFilter
  readingId: StringNullableFilter
  review: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input BookReviewWhereUniqueInput {
  id: String
  readingId: Int
}

enum BookScalarFieldEnum {
  archivedAt
  authorNames
  authorNamesLf
  createdAt
  description
  extra
  id
  ids
  isbn
  isbn13
  originalPublicationYear
  publicationYear
  slug
  title
  updatedAt
}

input BookScalarWhereWithAggregatesInput {
  AND: [BookScalarWhereWithAggregatesInput!]
  NOT: [BookScalarWhereWithAggregatesInput!]
  OR: [BookScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  authorNames: StringNullableListFilter
  authorNamesLf: StringNullableListFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  extra: JsonWithAggregatesFilter
  id: StringWithAggregatesFilter
  ids: JsonWithAggregatesFilter
  isbn: StringNullableWithAggregatesFilter
  isbn13: StringNullableWithAggregatesFilter
  originalPublicationYear: IntNullableWithAggregatesFilter
  publicationYear: IntNullableWithAggregatesFilter
  slug: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type BookSumAggregate {
  id: String
  originalPublicationYear: Int
  publicationYear: Int
}

input BookSumOrderByAggregateInput {
  id: SortOrder
  originalPublicationYear: SortOrder
  publicationYear: SortOrder
}

input BookUpdateInput {
  BookReview: BookReviewUpdateManyWithoutBookInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  authorships: AuthorshipUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  readings: ReadingUpdateManyWithoutBookInput
  shelvings: ShelvingUpdateManyWithoutBookInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateOneRequiredWithoutAuthorshipsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutAuthorshipsInput
  create: BookCreateWithoutAuthorshipsInput
  update: BookUpdateWithoutAuthorshipsInput
  upsert: BookUpsertWithoutAuthorshipsInput
}

input BookUpdateOneRequiredWithoutBookReviewInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookReviewInput
  create: BookCreateWithoutBookReviewInput
  update: BookUpdateWithoutBookReviewInput
  upsert: BookUpsertWithoutBookReviewInput
}

input BookUpdateOneRequiredWithoutReadingsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutReadingsInput
  create: BookCreateWithoutReadingsInput
  update: BookUpdateWithoutReadingsInput
  upsert: BookUpsertWithoutReadingsInput
}

input BookUpdateOneRequiredWithoutShelvingsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutShelvingsInput
  create: BookCreateWithoutShelvingsInput
  update: BookUpdateWithoutShelvingsInput
  upsert: BookUpsertWithoutShelvingsInput
}

input BookUpdateWithoutAuthorshipsInput {
  BookReview: BookReviewUpdateManyWithoutBookInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  readings: ReadingUpdateManyWithoutBookInput
  shelvings: ShelvingUpdateManyWithoutBookInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateWithoutBookReviewInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  authorships: AuthorshipUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  readings: ReadingUpdateManyWithoutBookInput
  shelvings: ShelvingUpdateManyWithoutBookInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateWithoutReadingsInput {
  BookReview: BookReviewUpdateManyWithoutBookInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  authorships: AuthorshipUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  shelvings: ShelvingUpdateManyWithoutBookInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateWithoutShelvingsInput {
  BookReview: BookReviewUpdateManyWithoutBookInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  authorNames: BookUpdateauthorNamesInput
  authorNamesLf: BookUpdateauthorNamesLfInput
  authorships: AuthorshipUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  extra: JSON
  ids: JSON
  isbn: NullableStringFieldUpdateOperationsInput
  isbn13: NullableStringFieldUpdateOperationsInput
  originalPublicationYear: NullableIntFieldUpdateOperationsInput
  publicationYear: NullableIntFieldUpdateOperationsInput
  readings: ReadingUpdateManyWithoutBookInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookUpdateauthorNamesInput {
  push: [String!]
  set: [String!]
}

input BookUpdateauthorNamesLfInput {
  push: [String!]
  set: [String!]
}

input BookUpsertWithoutAuthorshipsInput {
  create: BookCreateWithoutAuthorshipsInput!
  update: BookUpdateWithoutAuthorshipsInput!
}

input BookUpsertWithoutBookReviewInput {
  create: BookCreateWithoutBookReviewInput!
  update: BookUpdateWithoutBookReviewInput!
}

input BookUpsertWithoutReadingsInput {
  create: BookCreateWithoutReadingsInput!
  update: BookUpdateWithoutReadingsInput!
}

input BookUpsertWithoutShelvingsInput {
  create: BookCreateWithoutShelvingsInput!
  update: BookUpdateWithoutShelvingsInput!
}

input BookWhereInput {
  AND: [BookWhereInput!]
  BookReview: BookReviewListRelationFilter
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  archivedAt: DateTimeNullableFilter
  authorNames: StringNullableListFilter
  authorNamesLf: StringNullableListFilter
  authorships: AuthorshipListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  extra: JsonFilter
  id: StringFilter
  ids: JsonFilter
  isbn: StringNullableFilter
  isbn13: StringNullableFilter
  originalPublicationYear: IntNullableFilter
  publicationYear: IntNullableFilter
  readings: ReadingListRelationFilter
  shelvings: ShelvingListRelationFilter
  slug: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input BookWhereUniqueInput {
  id: String
  slug: String
}

type Bookshelf {
  _count: BookshelfCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  isPublic: Boolean!
  name: String!
  owner: User!
  ownerId: String!
  shelvings(cursor: ShelvingWhereUniqueInput, distinct: [ShelvingScalarFieldEnum!], orderBy: [ShelvingOrderByWithRelationInput!], skip: Int, take: Int, where: ShelvingWhereInput): [Shelving!]!
  slug: String!
  updatedAt: DateTimeISO!
}

type BookshelfAvgAggregate {
  id: String
  ownerId: Float
}

input BookshelfAvgOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

type BookshelfCount {
  shelvings: Int!
}

type BookshelfCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  id: String!
  isPublic: Int!
  name: Int!
  ownerId: String!
  slug: Int!
  updatedAt: Int!
}

input BookshelfCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BookshelfCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  name: String!
  owner: UserCreateNestedOneWithoutBookshelvesInput!
  shelvings: ShelvingCreateNestedManyWithoutShelfInput
  slug: String!
  updatedAt: DateTimeISO
}

input BookshelfCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String!
  ownerId: String!
  slug: String!
  updatedAt: DateTimeISO
}

input BookshelfCreateManyOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input BookshelfCreateManyOwnerInputEnvelope {
  data: [BookshelfCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input BookshelfCreateNestedManyWithoutOwnerInput {
  connect: [BookshelfWhereUniqueInput!]
  connectOrCreate: [BookshelfCreateOrConnectWithoutOwnerInput!]
  create: [BookshelfCreateWithoutOwnerInput!]
  createMany: BookshelfCreateManyOwnerInputEnvelope
}

input BookshelfCreateNestedOneWithoutShelvingsInput {
  connect: BookshelfWhereUniqueInput
  connectOrCreate: BookshelfCreateOrConnectWithoutShelvingsInput
  create: BookshelfCreateWithoutShelvingsInput
}

input BookshelfCreateOrConnectWithoutOwnerInput {
  create: BookshelfCreateWithoutOwnerInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfCreateOrConnectWithoutShelvingsInput {
  create: BookshelfCreateWithoutShelvingsInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfCreateWithoutOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  name: String!
  shelvings: ShelvingCreateNestedManyWithoutShelfInput
  slug: String!
  updatedAt: DateTimeISO
}

input BookshelfCreateWithoutShelvingsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  name: String!
  owner: UserCreateNestedOneWithoutBookshelvesInput!
  slug: String!
  updatedAt: DateTimeISO
}

type BookshelfGroupBy {
  _avg: BookshelfAvgAggregate
  _count: BookshelfCountAggregate
  _max: BookshelfMaxAggregate
  _min: BookshelfMinAggregate
  _sum: BookshelfSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  isPublic: Boolean!
  name: String!
  ownerId: String!
  slug: String!
  updatedAt: DateTimeISO!
}

input BookshelfListRelationFilter {
  every: BookshelfWhereInput
  none: BookshelfWhereInput
  some: BookshelfWhereInput
}

type BookshelfMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String
  ownerId: String
  slug: String
  updatedAt: DateTimeISO
}

input BookshelfMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type BookshelfMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  name: String
  ownerId: String
  slug: String
  updatedAt: DateTimeISO
}

input BookshelfMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BookshelfOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookshelfOrderByWithAggregationInput {
  _avg: BookshelfAvgOrderByAggregateInput
  _count: BookshelfCountOrderByAggregateInput
  _max: BookshelfMaxOrderByAggregateInput
  _min: BookshelfMinOrderByAggregateInput
  _sum: BookshelfSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BookshelfOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  shelvings: ShelvingOrderByRelationAggregateInput
  slug: SortOrder
  updatedAt: SortOrder
}

input BookshelfRelationFilter {
  is: BookshelfWhereInput
  isNot: BookshelfWhereInput
}

enum BookshelfScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  isPublic
  name
  ownerId
  slug
  updatedAt
}

input BookshelfScalarWhereInput {
  AND: [BookshelfScalarWhereInput!]
  NOT: [BookshelfScalarWhereInput!]
  OR: [BookshelfScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  ownerId: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input BookshelfScalarWhereWithAggregatesInput {
  AND: [BookshelfScalarWhereWithAggregatesInput!]
  NOT: [BookshelfScalarWhereWithAggregatesInput!]
  OR: [BookshelfScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  ownerId: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type BookshelfSumAggregate {
  id: String
  ownerId: String
}

input BookshelfSumOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

input BookshelfUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBookshelvesInput
  shelvings: ShelvingUpdateManyWithoutShelfInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpdateManyWithWhereWithoutOwnerInput {
  data: BookshelfUpdateManyMutationInput!
  where: BookshelfScalarWhereInput!
}

input BookshelfUpdateManyWithoutOwnerInput {
  connect: [BookshelfWhereUniqueInput!]
  connectOrCreate: [BookshelfCreateOrConnectWithoutOwnerInput!]
  create: [BookshelfCreateWithoutOwnerInput!]
  createMany: BookshelfCreateManyOwnerInputEnvelope
  delete: [BookshelfWhereUniqueInput!]
  deleteMany: [BookshelfScalarWhereInput!]
  disconnect: [BookshelfWhereUniqueInput!]
  set: [BookshelfWhereUniqueInput!]
  update: [BookshelfUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [BookshelfUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [BookshelfUpsertWithWhereUniqueWithoutOwnerInput!]
}

input BookshelfUpdateOneRequiredWithoutShelvingsInput {
  connect: BookshelfWhereUniqueInput
  connectOrCreate: BookshelfCreateOrConnectWithoutShelvingsInput
  create: BookshelfCreateWithoutShelvingsInput
  update: BookshelfUpdateWithoutShelvingsInput
  upsert: BookshelfUpsertWithoutShelvingsInput
}

input BookshelfUpdateWithWhereUniqueWithoutOwnerInput {
  data: BookshelfUpdateWithoutOwnerInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfUpdateWithoutOwnerInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shelvings: ShelvingUpdateManyWithoutShelfInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpdateWithoutShelvingsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBookshelvesInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpsertWithWhereUniqueWithoutOwnerInput {
  create: BookshelfCreateWithoutOwnerInput!
  update: BookshelfUpdateWithoutOwnerInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfUpsertWithoutShelvingsInput {
  create: BookshelfCreateWithoutShelvingsInput!
  update: BookshelfUpdateWithoutShelvingsInput!
}

input BookshelfWhereInput {
  AND: [BookshelfWhereInput!]
  NOT: [BookshelfWhereInput!]
  OR: [BookshelfWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  shelvings: ShelvingListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input BookshelfWhereUniqueInput {
  id: String
  slug: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Calendar {
  _count: CalendarCount
  account: Account
  accountId: String
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO!
  enabled: Boolean
  events(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  id: String!
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type CalendarAvgAggregate {
  accountId: Float
  id: String
  userId: String
}

input CalendarAvgOrderByAggregateInput {
  accountId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type CalendarCount {
  events: Int!
}

type CalendarCountAggregate {
  _all: Int!
  accountId: String!
  archivedAt: Int!
  color: Int!
  createdAt: Int!
  enabled: Int!
  id: String!
  name: Int!
  primary: Int!
  provider: Int!
  public: Int!
  remoteId: String!
  syncToken: Int!
  uid: Int!
  updatedAt: Int!
  userId: String!
}

input CalendarCountOrderByAggregateInput {
  accountId: SortOrder
  archivedAt: SortOrder
  color: SortOrder
  createdAt: SortOrder
  enabled: SortOrder
  id: SortOrder
  name: SortOrder
  primary: SortOrder
  provider: SortOrder
  public: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CalendarCreateInput {
  account: AccountCreateNestedOneWithoutCalendarsInput
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateManyAccountInput {
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  userId: String!
}

input CalendarCreateManyAccountInputEnvelope {
  data: [CalendarCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input CalendarCreateManyInput {
  accountId: Int
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  userId: String!
}

input CalendarCreateManyUserInput {
  accountId: Int
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
}

input CalendarCreateManyUserInputEnvelope {
  data: [CalendarCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CalendarCreateNestedManyWithoutAccountInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutAccountInput!]
  create: [CalendarCreateWithoutAccountInput!]
  createMany: CalendarCreateManyAccountInputEnvelope
}

input CalendarCreateNestedManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
}

input CalendarCreateNestedOneWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
}

input CalendarCreateOrConnectWithoutAccountInput {
  create: CalendarCreateWithoutAccountInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateOrConnectWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateOrConnectWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateWithoutAccountInput {
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateWithoutEventsInput {
  account: AccountCreateNestedOneWithoutCalendarsInput
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateWithoutUserInput {
  account: AccountCreateNestedOneWithoutCalendarsInput
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO
}

type CalendarEvent {
  allDay: Boolean!
  archivedAt: DateTimeISO
  calendar: Calendar!
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO!
  end: DateTimeISO
  habit: Habit
  habitId: String
  id: String!
  notes: String
  remoteId: String
  schedule: ActionSchedule
  scheduleId: String
  start: DateTimeISO!
  task: Task
  taskId: String
  title: String!
  updatedAt: DateTimeISO!
}

type CalendarEventAvgAggregate {
  calendarId: Float
  habitId: String
  id: String
  scheduleId: Float
  taskId: Float
}

input CalendarEventAvgOrderByAggregateInput {
  calendarId: SortOrder
  habitId: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  taskId: SortOrder
}

type CalendarEventCountAggregate {
  _all: Int!
  allDay: Int!
  archivedAt: Int!
  calendarId: String!
  canceled: Int!
  createdAt: Int!
  end: Int!
  habitId: String!
  id: String!
  notes: Int!
  remoteId: String!
  scheduleId: String!
  start: Int!
  taskId: String!
  title: Int!
  uid: Int!
  updatedAt: Int!
}

input CalendarEventCountOrderByAggregateInput {
  allDay: SortOrder
  archivedAt: SortOrder
  calendarId: SortOrder
  canceled: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  remoteId: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventCreateInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habit: HabitCreateNestedOneWithoutCalendarEventsInput
  id: String
  notes: String
  remoteId: String
  schedule: ActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTimeISO!
  task: TaskCreateNestedOneWithoutCalendarEventsInput
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyCalendarInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  scheduleId: Int
  start: DateTimeISO!
  taskId: String
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyCalendarInputEnvelope {
  data: [CalendarEventCreateManyCalendarInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyHabitInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  id: String
  notes: String
  remoteId: String
  scheduleId: Int
  start: DateTimeISO!
  taskId: String
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyHabitInputEnvelope {
  data: [CalendarEventCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  scheduleId: Int
  start: DateTimeISO!
  taskId: String
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyScheduleInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  start: DateTimeISO!
  taskId: String
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyScheduleInputEnvelope {
  data: [CalendarEventCreateManyScheduleInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyTaskInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  scheduleId: Int
  start: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateManyTaskInputEnvelope {
  data: [CalendarEventCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateNestedManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
}

input CalendarEventCreateNestedManyWithoutHabitInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutHabitInput!]
  create: [CalendarEventCreateWithoutHabitInput!]
  createMany: CalendarEventCreateManyHabitInputEnvelope
}

input CalendarEventCreateNestedManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
}

input CalendarEventCreateNestedManyWithoutTaskInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutTaskInput!]
  create: [CalendarEventCreateWithoutTaskInput!]
  createMany: CalendarEventCreateManyTaskInputEnvelope
}

input CalendarEventCreateOrConnectWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutHabitInput {
  create: CalendarEventCreateWithoutHabitInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutTaskInput {
  create: CalendarEventCreateWithoutTaskInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateWithoutCalendarInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habit: HabitCreateNestedOneWithoutCalendarEventsInput
  id: String
  notes: String
  remoteId: String
  schedule: ActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTimeISO!
  task: TaskCreateNestedOneWithoutCalendarEventsInput
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateWithoutHabitInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  id: String
  notes: String
  remoteId: String
  schedule: ActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTimeISO!
  task: TaskCreateNestedOneWithoutCalendarEventsInput
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateWithoutScheduleInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habit: HabitCreateNestedOneWithoutCalendarEventsInput
  id: String
  notes: String
  remoteId: String
  start: DateTimeISO!
  task: TaskCreateNestedOneWithoutCalendarEventsInput
  title: String!
  updatedAt: DateTimeISO
}

input CalendarEventCreateWithoutTaskInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habit: HabitCreateNestedOneWithoutCalendarEventsInput
  id: String
  notes: String
  remoteId: String
  schedule: ActionScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO
}

type CalendarEventGroupBy {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
  allDay: Boolean!
  archivedAt: DateTimeISO
  calendarId: String!
  canceled: Boolean
  createdAt: DateTimeISO!
  end: DateTimeISO
  habitId: String
  id: String!
  notes: String
  remoteId: String
  scheduleId: String
  start: DateTimeISO!
  taskId: String
  title: String!
  uid: String!
  updatedAt: DateTimeISO!
}

input CalendarEventListRelationFilter {
  every: CalendarEventWhereInput
  none: CalendarEventWhereInput
  some: CalendarEventWhereInput
}

type CalendarEventMaxAggregate {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  scheduleId: String
  start: DateTimeISO
  taskId: String
  title: String
  uid: String
  updatedAt: DateTimeISO
}

input CalendarEventMaxOrderByAggregateInput {
  allDay: SortOrder
  archivedAt: SortOrder
  calendarId: SortOrder
  canceled: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  remoteId: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type CalendarEventMinAggregate {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: String
  canceled: Boolean
  createdAt: DateTimeISO
  end: DateTimeISO
  habitId: String
  id: String
  notes: String
  remoteId: String
  scheduleId: String
  start: DateTimeISO
  taskId: String
  title: String
  uid: String
  updatedAt: DateTimeISO
}

input CalendarEventMinOrderByAggregateInput {
  allDay: SortOrder
  archivedAt: SortOrder
  calendarId: SortOrder
  canceled: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  remoteId: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarEventOrderByWithAggregationInput {
  _avg: CalendarEventAvgOrderByAggregateInput
  _count: CalendarEventCountOrderByAggregateInput
  _max: CalendarEventMaxOrderByAggregateInput
  _min: CalendarEventMinOrderByAggregateInput
  _sum: CalendarEventSumOrderByAggregateInput
  allDay: SortOrder
  archivedAt: SortOrder
  calendarId: SortOrder
  canceled: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  remoteId: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventOrderByWithRelationInput {
  allDay: SortOrder
  archivedAt: SortOrder
  calendar: CalendarOrderByWithRelationInput
  calendarId: SortOrder
  canceled: SortOrder
  createdAt: SortOrder
  end: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  notes: SortOrder
  remoteId: SortOrder
  schedule: ActionScheduleOrderByWithRelationInput
  scheduleId: SortOrder
  start: SortOrder
  task: TaskOrderByWithRelationInput
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventRemoteIdCalendarIdCompoundUniqueInput {
  calendarId: String!
  remoteId: String!
}

enum CalendarEventScalarFieldEnum {
  allDay
  archivedAt
  calendarId
  canceled
  createdAt
  end
  habitId
  id
  notes
  remoteId
  scheduleId
  start
  taskId
  title
  uid
  updatedAt
}

input CalendarEventScalarWhereInput {
  AND: [CalendarEventScalarWhereInput!]
  NOT: [CalendarEventScalarWhereInput!]
  OR: [CalendarEventScalarWhereInput!]
  allDay: BoolFilter
  archivedAt: DateTimeNullableFilter
  calendarId: StringFilter
  canceled: BoolNullableFilter
  createdAt: DateTimeFilter
  end: DateTimeNullableFilter
  habitId: StringNullableFilter
  id: StringFilter
  notes: StringNullableFilter
  remoteId: StringNullableFilter
  scheduleId: StringNullableFilter
  start: DateTimeFilter
  taskId: StringNullableFilter
  title: StringFilter
  uid: StringFilter
  updatedAt: DateTimeFilter
}

input CalendarEventScalarWhereWithAggregatesInput {
  AND: [CalendarEventScalarWhereWithAggregatesInput!]
  NOT: [CalendarEventScalarWhereWithAggregatesInput!]
  OR: [CalendarEventScalarWhereWithAggregatesInput!]
  allDay: BoolWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  calendarId: StringWithAggregatesFilter
  canceled: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  end: DateTimeNullableWithAggregatesFilter
  habitId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  remoteId: StringNullableWithAggregatesFilter
  scheduleId: IntNullableWithAggregatesFilter
  start: DateTimeWithAggregatesFilter
  taskId: IntNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
  uid: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CalendarEventSumAggregate {
  calendarId: String
  habitId: String
  id: String
  scheduleId: String
  taskId: String
}

input CalendarEventSumOrderByAggregateInput {
  calendarId: SortOrder
  habitId: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  taskId: SortOrder
}

input CalendarEventUpdateInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutCalendarEventsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  schedule: ActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCalendarEventsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateManyMutationInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateManyWithWhereWithoutCalendarInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutHabitInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutScheduleInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutTaskInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutCalendarInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutCalendarInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutCalendarInput!]
}

input CalendarEventUpdateManyWithoutHabitInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutHabitInput!]
  create: [CalendarEventCreateWithoutHabitInput!]
  createMany: CalendarEventCreateManyHabitInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutHabitInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutHabitInput!]
}

input CalendarEventUpdateManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutScheduleInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutScheduleInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutScheduleInput!]
}

input CalendarEventUpdateManyWithoutTaskInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutTaskInput!]
  create: [CalendarEventCreateWithoutTaskInput!]
  createMany: CalendarEventCreateManyTaskInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutTaskInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutTaskInput!]
}

input CalendarEventUpdateWithWhereUniqueWithoutCalendarInput {
  data: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutHabitInput {
  data: CalendarEventUpdateWithoutHabitInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutScheduleInput {
  data: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutTaskInput {
  data: CalendarEventUpdateWithoutTaskInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithoutCalendarInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutCalendarEventsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  schedule: ActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCalendarEventsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateWithoutHabitInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  schedule: ActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCalendarEventsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateWithoutScheduleInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutCalendarEventsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCalendarEventsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateWithoutTaskInput {
  allDay: BoolFieldUpdateOperationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  canceled: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutCalendarEventsInput
  notes: NullableStringFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  schedule: ActionScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarEventUpsertWithWhereUniqueWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  update: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutHabitInput {
  create: CalendarEventCreateWithoutHabitInput!
  update: CalendarEventUpdateWithoutHabitInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  update: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutTaskInput {
  create: CalendarEventCreateWithoutTaskInput!
  update: CalendarEventUpdateWithoutTaskInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventWhereInput {
  AND: [CalendarEventWhereInput!]
  NOT: [CalendarEventWhereInput!]
  OR: [CalendarEventWhereInput!]
  allDay: BoolFilter
  archivedAt: DateTimeNullableFilter
  calendar: CalendarRelationFilter
  calendarId: StringFilter
  canceled: BoolNullableFilter
  createdAt: DateTimeFilter
  end: DateTimeNullableFilter
  habit: HabitRelationFilter
  habitId: StringNullableFilter
  id: StringFilter
  notes: StringNullableFilter
  remoteId: StringNullableFilter
  schedule: ActionScheduleRelationFilter
  scheduleId: StringNullableFilter
  start: DateTimeFilter
  task: TaskRelationFilter
  taskId: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CalendarEventWhereUniqueInput {
  id: String
  remoteId_calendarId: CalendarEventRemoteIdCalendarIdCompoundUniqueInput
}

type CalendarGroupBy {
  _avg: CalendarAvgAggregate
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
  _sum: CalendarSumAggregate
  accountId: String
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO!
  enabled: Boolean
  id: String!
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  uid: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input CalendarListRelationFilter {
  every: CalendarWhereInput
  none: CalendarWhereInput
  some: CalendarWhereInput
}

type CalendarMaxAggregate {
  accountId: String
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  uid: String
  updatedAt: DateTimeISO
  userId: String
}

input CalendarMaxOrderByAggregateInput {
  accountId: SortOrder
  archivedAt: SortOrder
  color: SortOrder
  createdAt: SortOrder
  enabled: SortOrder
  id: SortOrder
  name: SortOrder
  primary: SortOrder
  provider: SortOrder
  public: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type CalendarMinAggregate {
  accountId: String
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO
  enabled: Boolean
  id: String
  name: String
  primary: Boolean
  provider: CalendarProvider
  public: Boolean
  remoteId: String
  syncToken: String
  uid: String
  updatedAt: DateTimeISO
  userId: String
}

input CalendarMinOrderByAggregateInput {
  accountId: SortOrder
  archivedAt: SortOrder
  color: SortOrder
  createdAt: SortOrder
  enabled: SortOrder
  id: SortOrder
  name: SortOrder
  primary: SortOrder
  provider: SortOrder
  public: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CalendarOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarOrderByWithAggregationInput {
  _avg: CalendarAvgOrderByAggregateInput
  _count: CalendarCountOrderByAggregateInput
  _max: CalendarMaxOrderByAggregateInput
  _min: CalendarMinOrderByAggregateInput
  _sum: CalendarSumOrderByAggregateInput
  accountId: SortOrder
  archivedAt: SortOrder
  color: SortOrder
  createdAt: SortOrder
  enabled: SortOrder
  id: SortOrder
  name: SortOrder
  primary: SortOrder
  provider: SortOrder
  public: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CalendarOrderByWithRelationInput {
  account: AccountOrderByWithRelationInput
  accountId: SortOrder
  archivedAt: SortOrder
  color: SortOrder
  createdAt: SortOrder
  enabled: SortOrder
  events: CalendarEventOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  primary: SortOrder
  provider: SortOrder
  public: SortOrder
  remoteId: SortOrder
  syncToken: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum CalendarProvider {
  apple
  google
}

input CalendarRelationFilter {
  is: CalendarWhereInput
  isNot: CalendarWhereInput
}

input CalendarRemoteIdAccountIdCompoundUniqueInput {
  accountId: String!
  remoteId: String!
}

enum CalendarScalarFieldEnum {
  accountId
  archivedAt
  color
  createdAt
  enabled
  id
  name
  primary
  provider
  public
  remoteId
  syncToken
  uid
  updatedAt
  userId
}

input CalendarScalarWhereInput {
  AND: [CalendarScalarWhereInput!]
  NOT: [CalendarScalarWhereInput!]
  OR: [CalendarScalarWhereInput!]
  accountId: StringNullableFilter
  archivedAt: DateTimeNullableFilter
  color: StringNullableFilter
  createdAt: DateTimeFilter
  enabled: BoolNullableFilter
  id: StringFilter
  name: StringNullableFilter
  primary: BoolNullableFilter
  provider: EnumCalendarProviderNullableFilter
  public: BoolNullableFilter
  remoteId: StringNullableFilter
  syncToken: StringNullableFilter
  uid: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CalendarScalarWhereWithAggregatesInput {
  AND: [CalendarScalarWhereWithAggregatesInput!]
  NOT: [CalendarScalarWhereWithAggregatesInput!]
  OR: [CalendarScalarWhereWithAggregatesInput!]
  accountId: IntNullableWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  color: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  enabled: BoolNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  primary: BoolNullableWithAggregatesFilter
  provider: EnumCalendarProviderNullableWithAggregatesFilter
  public: BoolNullableWithAggregatesFilter
  remoteId: StringNullableWithAggregatesFilter
  syncToken: StringNullableWithAggregatesFilter
  uid: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type CalendarSumAggregate {
  accountId: String
  id: String
  userId: String
}

input CalendarSumOrderByAggregateInput {
  accountId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input CalendarUpdateInput {
  account: AccountUpdateOneWithoutCalendarsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  enabled: NullableBoolFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  name: NullableStringFieldUpdateOperationsInput
  primary: NullableBoolFieldUpdateOperationsInput
  provider: NullableEnumCalendarProviderFieldUpdateOperationsInput
  public: NullableBoolFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  syncToken: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  enabled: NullableBoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  primary: NullableBoolFieldUpdateOperationsInput
  provider: NullableEnumCalendarProviderFieldUpdateOperationsInput
  public: NullableBoolFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  syncToken: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarUpdateManyWithWhereWithoutAccountInput {
  data: CalendarUpdateManyMutationInput!
  where: CalendarScalarWhereInput!
}

input CalendarUpdateManyWithWhereWithoutUserInput {
  data: CalendarUpdateManyMutationInput!
  where: CalendarScalarWhereInput!
}

input CalendarUpdateManyWithoutAccountInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutAccountInput!]
  create: [CalendarCreateWithoutAccountInput!]
  createMany: CalendarCreateManyAccountInputEnvelope
  delete: [CalendarWhereUniqueInput!]
  deleteMany: [CalendarScalarWhereInput!]
  disconnect: [CalendarWhereUniqueInput!]
  set: [CalendarWhereUniqueInput!]
  update: [CalendarUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [CalendarUpdateManyWithWhereWithoutAccountInput!]
  upsert: [CalendarUpsertWithWhereUniqueWithoutAccountInput!]
}

input CalendarUpdateManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
  delete: [CalendarWhereUniqueInput!]
  deleteMany: [CalendarScalarWhereInput!]
  disconnect: [CalendarWhereUniqueInput!]
  set: [CalendarWhereUniqueInput!]
  update: [CalendarUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CalendarUpdateManyWithWhereWithoutUserInput!]
  upsert: [CalendarUpsertWithWhereUniqueWithoutUserInput!]
}

input CalendarUpdateOneRequiredWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
  update: CalendarUpdateWithoutEventsInput
  upsert: CalendarUpsertWithoutEventsInput
}

input CalendarUpdateWithWhereUniqueWithoutAccountInput {
  data: CalendarUpdateWithoutAccountInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpdateWithWhereUniqueWithoutUserInput {
  data: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpdateWithoutAccountInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  enabled: NullableBoolFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  name: NullableStringFieldUpdateOperationsInput
  primary: NullableBoolFieldUpdateOperationsInput
  provider: NullableEnumCalendarProviderFieldUpdateOperationsInput
  public: NullableBoolFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  syncToken: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateWithoutEventsInput {
  account: AccountUpdateOneWithoutCalendarsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  enabled: NullableBoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  primary: NullableBoolFieldUpdateOperationsInput
  provider: NullableEnumCalendarProviderFieldUpdateOperationsInput
  public: NullableBoolFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  syncToken: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateWithoutUserInput {
  account: AccountUpdateOneWithoutCalendarsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  enabled: NullableBoolFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  name: NullableStringFieldUpdateOperationsInput
  primary: NullableBoolFieldUpdateOperationsInput
  provider: NullableEnumCalendarProviderFieldUpdateOperationsInput
  public: NullableBoolFieldUpdateOperationsInput
  remoteId: NullableStringFieldUpdateOperationsInput
  syncToken: NullableStringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CalendarUpsertWithWhereUniqueWithoutAccountInput {
  create: CalendarCreateWithoutAccountInput!
  update: CalendarUpdateWithoutAccountInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpsertWithWhereUniqueWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  update: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpsertWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  update: CalendarUpdateWithoutEventsInput!
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  account: AccountRelationFilter
  accountId: StringNullableFilter
  archivedAt: DateTimeNullableFilter
  color: StringNullableFilter
  createdAt: DateTimeFilter
  enabled: BoolNullableFilter
  events: CalendarEventListRelationFilter
  id: StringFilter
  name: StringNullableFilter
  primary: BoolNullableFilter
  provider: EnumCalendarProviderNullableFilter
  public: BoolNullableFilter
  remoteId: StringNullableFilter
  syncToken: StringNullableFilter
  uid: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CalendarWhereUniqueInput {
  id: String
  remoteId_accountId: CalendarRemoteIdAccountIdCompoundUniqueInput
}

type Categorization {
  act: Act!
  actId: String!
  archivedAt: DateTimeISO
  category: Category!
  categoryId: String!
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
}

type CategorizationAvgAggregate {
  actId: Float
  categoryId: Float
  id: String
}

input CategorizationAvgOrderByAggregateInput {
  actId: SortOrder
  categoryId: SortOrder
  id: SortOrder
}

type CategorizationCountAggregate {
  _all: Int!
  actId: String!
  archivedAt: Int!
  categoryId: String!
  createdAt: Int!
  id: String!
  updatedAt: Int!
}

input CategorizationCountOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CategorizationCreateInput {
  act: ActCreateNestedOneWithoutCategorizationsInput!
  archivedAt: DateTimeISO
  category: CategoryCreateNestedOneWithoutCategorizationsInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

input CategorizationCreateManyActInput {
  archivedAt: DateTimeISO
  categoryId: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input CategorizationCreateManyActInputEnvelope {
  data: [CategorizationCreateManyActInput!]!
  skipDuplicates: Boolean
}

input CategorizationCreateManyCategoryInput {
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input CategorizationCreateManyCategoryInputEnvelope {
  data: [CategorizationCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input CategorizationCreateManyInput {
  actId: String!
  archivedAt: DateTimeISO
  categoryId: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input CategorizationCreateNestedManyWithoutActInput {
  connect: [CategorizationWhereUniqueInput!]
  connectOrCreate: [CategorizationCreateOrConnectWithoutActInput!]
  create: [CategorizationCreateWithoutActInput!]
  createMany: CategorizationCreateManyActInputEnvelope
}

input CategorizationCreateNestedManyWithoutCategoryInput {
  connect: [CategorizationWhereUniqueInput!]
  connectOrCreate: [CategorizationCreateOrConnectWithoutCategoryInput!]
  create: [CategorizationCreateWithoutCategoryInput!]
  createMany: CategorizationCreateManyCategoryInputEnvelope
}

input CategorizationCreateOrConnectWithoutActInput {
  create: CategorizationCreateWithoutActInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationCreateOrConnectWithoutCategoryInput {
  create: CategorizationCreateWithoutCategoryInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationCreateWithoutActInput {
  archivedAt: DateTimeISO
  category: CategoryCreateNestedOneWithoutCategorizationsInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

input CategorizationCreateWithoutCategoryInput {
  act: ActCreateNestedOneWithoutCategorizationsInput!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

type CategorizationGroupBy {
  _avg: CategorizationAvgAggregate
  _count: CategorizationCountAggregate
  _max: CategorizationMaxAggregate
  _min: CategorizationMinAggregate
  _sum: CategorizationSumAggregate
  actId: String!
  archivedAt: DateTimeISO
  categoryId: String!
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
}

input CategorizationListRelationFilter {
  every: CategorizationWhereInput
  none: CategorizationWhereInput
  some: CategorizationWhereInput
}

type CategorizationMaxAggregate {
  actId: String
  archivedAt: DateTimeISO
  categoryId: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input CategorizationMaxOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type CategorizationMinAggregate {
  actId: String
  archivedAt: DateTimeISO
  categoryId: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input CategorizationMinOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CategorizationOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategorizationOrderByWithAggregationInput {
  _avg: CategorizationAvgOrderByAggregateInput
  _count: CategorizationCountOrderByAggregateInput
  _max: CategorizationMaxOrderByAggregateInput
  _min: CategorizationMinOrderByAggregateInput
  _sum: CategorizationSumOrderByAggregateInput
  actId: SortOrder
  archivedAt: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CategorizationOrderByWithRelationInput {
  act: ActOrderByWithRelationInput
  actId: SortOrder
  archivedAt: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum CategorizationScalarFieldEnum {
  actId
  archivedAt
  categoryId
  createdAt
  id
  updatedAt
}

input CategorizationScalarWhereInput {
  AND: [CategorizationScalarWhereInput!]
  NOT: [CategorizationScalarWhereInput!]
  OR: [CategorizationScalarWhereInput!]
  actId: StringFilter
  archivedAt: DateTimeNullableFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input CategorizationScalarWhereWithAggregatesInput {
  AND: [CategorizationScalarWhereWithAggregatesInput!]
  NOT: [CategorizationScalarWhereWithAggregatesInput!]
  OR: [CategorizationScalarWhereWithAggregatesInput!]
  actId: StringWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  categoryId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CategorizationSumAggregate {
  actId: String
  categoryId: String
  id: String
}

input CategorizationSumOrderByAggregateInput {
  actId: SortOrder
  categoryId: SortOrder
  id: SortOrder
}

input CategorizationUpdateInput {
  act: ActUpdateOneRequiredWithoutCategorizationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutCategorizationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategorizationUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategorizationUpdateManyWithWhereWithoutActInput {
  data: CategorizationUpdateManyMutationInput!
  where: CategorizationScalarWhereInput!
}

input CategorizationUpdateManyWithWhereWithoutCategoryInput {
  data: CategorizationUpdateManyMutationInput!
  where: CategorizationScalarWhereInput!
}

input CategorizationUpdateManyWithoutActInput {
  connect: [CategorizationWhereUniqueInput!]
  connectOrCreate: [CategorizationCreateOrConnectWithoutActInput!]
  create: [CategorizationCreateWithoutActInput!]
  createMany: CategorizationCreateManyActInputEnvelope
  delete: [CategorizationWhereUniqueInput!]
  deleteMany: [CategorizationScalarWhereInput!]
  disconnect: [CategorizationWhereUniqueInput!]
  set: [CategorizationWhereUniqueInput!]
  update: [CategorizationUpdateWithWhereUniqueWithoutActInput!]
  updateMany: [CategorizationUpdateManyWithWhereWithoutActInput!]
  upsert: [CategorizationUpsertWithWhereUniqueWithoutActInput!]
}

input CategorizationUpdateManyWithoutCategoryInput {
  connect: [CategorizationWhereUniqueInput!]
  connectOrCreate: [CategorizationCreateOrConnectWithoutCategoryInput!]
  create: [CategorizationCreateWithoutCategoryInput!]
  createMany: CategorizationCreateManyCategoryInputEnvelope
  delete: [CategorizationWhereUniqueInput!]
  deleteMany: [CategorizationScalarWhereInput!]
  disconnect: [CategorizationWhereUniqueInput!]
  set: [CategorizationWhereUniqueInput!]
  update: [CategorizationUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategorizationUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [CategorizationUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CategorizationUpdateWithWhereUniqueWithoutActInput {
  data: CategorizationUpdateWithoutActInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationUpdateWithWhereUniqueWithoutCategoryInput {
  data: CategorizationUpdateWithoutCategoryInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationUpdateWithoutActInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutCategorizationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategorizationUpdateWithoutCategoryInput {
  act: ActUpdateOneRequiredWithoutCategorizationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategorizationUpsertWithWhereUniqueWithoutActInput {
  create: CategorizationCreateWithoutActInput!
  update: CategorizationUpdateWithoutActInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationUpsertWithWhereUniqueWithoutCategoryInput {
  create: CategorizationCreateWithoutCategoryInput!
  update: CategorizationUpdateWithoutCategoryInput!
  where: CategorizationWhereUniqueInput!
}

input CategorizationWhereInput {
  AND: [CategorizationWhereInput!]
  NOT: [CategorizationWhereInput!]
  OR: [CategorizationWhereInput!]
  act: ActRelationFilter
  actId: StringFilter
  archivedAt: DateTimeNullableFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input CategorizationWhereUniqueInput {
  id: String
}

type Category {
  _count: CategoryCount
  archivedAt: DateTimeISO
  categorizations(cursor: CategorizationWhereUniqueInput, distinct: [CategorizationScalarFieldEnum!], orderBy: [CategorizationOrderByWithRelationInput!], skip: Int, take: Int, where: CategorizationWhereInput): [Categorization!]!
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

type CategoryAvgAggregate {
  id: String
}

input CategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type CategoryCount {
  categorizations: Int!
}

type CategoryCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  id: String!
  name: Int!
  updatedAt: Int!
}

input CategoryCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryCreateInput {
  archivedAt: DateTimeISO
  categorizations: CategorizationCreateNestedManyWithoutCategoryInput
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

input CategoryCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input CategoryCreateNestedOneWithoutCategorizationsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutCategorizationsInput
  create: CategoryCreateWithoutCategorizationsInput
}

input CategoryCreateOrConnectWithoutCategorizationsInput {
  create: CategoryCreateWithoutCategorizationsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutCategorizationsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

type CategoryGroupBy {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

type CategoryMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CategoryMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CategoryMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CategoryMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _avg: CategoryAvgOrderByAggregateInput
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  _sum: CategorySumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithRelationInput {
  archivedAt: SortOrder
  categorizations: CategorizationOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  archivedAt
  createdAt
  id
  name
  updatedAt
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CategorySumAggregate {
  id: String
}

input CategorySumOrderByAggregateInput {
  id: SortOrder
}

input CategoryUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  categorizations: CategorizationUpdateManyWithoutCategoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutCategorizationsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutCategorizationsInput
  create: CategoryCreateWithoutCategorizationsInput
  update: CategoryUpdateWithoutCategorizationsInput
  upsert: CategoryUpsertWithoutCategorizationsInput
}

input CategoryUpdateWithoutCategorizationsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutCategorizationsInput {
  create: CategoryCreateWithoutCategorizationsInput!
  update: CategoryUpdateWithoutCategorizationsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  archivedAt: DateTimeNullableFilter
  categorizations: CategorizationListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
}

type Dashboard {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  isDefault: Boolean!
  isPublic: Boolean!
  layouts: JSON!
  name: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type DashboardAvgAggregate {
  id: String
  userId: String
}

input DashboardAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type DashboardCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  id: String!
  isDefault: Int!
  isPublic: Int!
  layouts: Int!
  name: Int!
  updatedAt: Int!
  userId: String!
}

input DashboardCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isDefault: SortOrder
  isPublic: SortOrder
  layouts: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input DashboardCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  isDefault: Boolean
  isPublic: Boolean
  layouts: JSON
  name: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutDashboardsInput!
}

input DashboardCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isDefault: Boolean
  isPublic: Boolean
  layouts: JSON
  name: String!
  updatedAt: DateTimeISO
  userId: String!
}

input DashboardCreateManyUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isDefault: Boolean
  isPublic: Boolean
  layouts: JSON
  name: String!
  updatedAt: DateTimeISO
}

input DashboardCreateManyUserInputEnvelope {
  data: [DashboardCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input DashboardCreateNestedManyWithoutUserInput {
  connect: [DashboardWhereUniqueInput!]
  connectOrCreate: [DashboardCreateOrConnectWithoutUserInput!]
  create: [DashboardCreateWithoutUserInput!]
  createMany: DashboardCreateManyUserInputEnvelope
}

input DashboardCreateOrConnectWithoutUserInput {
  create: DashboardCreateWithoutUserInput!
  where: DashboardWhereUniqueInput!
}

input DashboardCreateWithoutUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  isDefault: Boolean
  isPublic: Boolean
  layouts: JSON
  name: String!
  updatedAt: DateTimeISO
}

type DashboardGroupBy {
  _avg: DashboardAvgAggregate
  _count: DashboardCountAggregate
  _max: DashboardMaxAggregate
  _min: DashboardMinAggregate
  _sum: DashboardSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  isDefault: Boolean!
  isPublic: Boolean!
  layouts: JSON!
  name: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input DashboardListRelationFilter {
  every: DashboardWhereInput
  none: DashboardWhereInput
  some: DashboardWhereInput
}

type DashboardMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isDefault: Boolean
  isPublic: Boolean
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input DashboardMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isDefault: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type DashboardMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isDefault: Boolean
  isPublic: Boolean
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input DashboardMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isDefault: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input DashboardNameUserIdCompoundUniqueInput {
  name: String!
  userId: String!
}

input DashboardOrderByRelationAggregateInput {
  _count: SortOrder
}

input DashboardOrderByWithAggregationInput {
  _avg: DashboardAvgOrderByAggregateInput
  _count: DashboardCountOrderByAggregateInput
  _max: DashboardMaxOrderByAggregateInput
  _min: DashboardMinOrderByAggregateInput
  _sum: DashboardSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isDefault: SortOrder
  isPublic: SortOrder
  layouts: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input DashboardOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isDefault: SortOrder
  isPublic: SortOrder
  layouts: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum DashboardScalarFieldEnum {
  archivedAt
  createdAt
  id
  isDefault
  isPublic
  layouts
  name
  updatedAt
  userId
}

input DashboardScalarWhereInput {
  AND: [DashboardScalarWhereInput!]
  NOT: [DashboardScalarWhereInput!]
  OR: [DashboardScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isDefault: BoolFilter
  isPublic: BoolFilter
  layouts: JsonFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input DashboardScalarWhereWithAggregatesInput {
  AND: [DashboardScalarWhereWithAggregatesInput!]
  NOT: [DashboardScalarWhereWithAggregatesInput!]
  OR: [DashboardScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isDefault: BoolWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  layouts: JsonWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type DashboardSumAggregate {
  id: String
  userId: String
}

input DashboardSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input DashboardUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isDefault: BoolFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  layouts: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutDashboardsInput
}

input DashboardUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isDefault: BoolFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  layouts: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DashboardUpdateManyWithWhereWithoutUserInput {
  data: DashboardUpdateManyMutationInput!
  where: DashboardScalarWhereInput!
}

input DashboardUpdateManyWithoutUserInput {
  connect: [DashboardWhereUniqueInput!]
  connectOrCreate: [DashboardCreateOrConnectWithoutUserInput!]
  create: [DashboardCreateWithoutUserInput!]
  createMany: DashboardCreateManyUserInputEnvelope
  delete: [DashboardWhereUniqueInput!]
  deleteMany: [DashboardScalarWhereInput!]
  disconnect: [DashboardWhereUniqueInput!]
  set: [DashboardWhereUniqueInput!]
  update: [DashboardUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DashboardUpdateManyWithWhereWithoutUserInput!]
  upsert: [DashboardUpsertWithWhereUniqueWithoutUserInput!]
}

input DashboardUpdateWithWhereUniqueWithoutUserInput {
  data: DashboardUpdateWithoutUserInput!
  where: DashboardWhereUniqueInput!
}

input DashboardUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isDefault: BoolFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  layouts: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DashboardUpsertWithWhereUniqueWithoutUserInput {
  create: DashboardCreateWithoutUserInput!
  update: DashboardUpdateWithoutUserInput!
  where: DashboardWhereUniqueInput!
}

input DashboardWhereInput {
  AND: [DashboardWhereInput!]
  NOT: [DashboardWhereInput!]
  OR: [DashboardWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isDefault: BoolFilter
  isPublic: BoolFilter
  layouts: JsonFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input DashboardWhereUniqueInput {
  id: String
  name_userId: DashboardNameUserIdCompoundUniqueInput
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumCalendarProviderNullableFilter {
  equals: CalendarProvider
  in: [CalendarProvider!]
  not: NestedEnumCalendarProviderNullableFilter
  notIn: [CalendarProvider!]
}

input EnumCalendarProviderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumCalendarProviderNullableFilter
  _min: NestedEnumCalendarProviderNullableFilter
  equals: CalendarProvider
  in: [CalendarProvider!]
  not: NestedEnumCalendarProviderNullableWithAggregatesFilter
  notIn: [CalendarProvider!]
}

input EnumFREQUENCYFieldUpdateOperationsInput {
  set: FREQUENCY
}

input EnumFREQUENCYFilter {
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYFilter
  notIn: [FREQUENCY!]
}

input EnumFREQUENCYWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFREQUENCYFilter
  _min: NestedEnumFREQUENCYFilter
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYWithAggregatesFilter
  notIn: [FREQUENCY!]
}

enum FREQUENCY {
  DAY
  HOUR
  MINUTE
  MONTH
  WEEK
  YEAR
}

type Goal {
  _count: GoalCount
  goal: Goal
  goalId: String
  habit: Habit!
  habitId: String!
  id: String!
  milestones(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  quantity: Int!
}

type GoalAvgAggregate {
  goalId: Float
  habitId: String
  id: String
  quantity: Float
}

input GoalAvgOrderByAggregateInput {
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

type GoalCount {
  milestones: Int!
}

type GoalCountAggregate {
  _all: Int!
  goalId: String!
  habitId: String!
  id: String!
  quantity: Int!
}

input GoalCountOrderByAggregateInput {
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

input GoalCreateInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  habit: HabitCreateNestedOneWithoutGoalsInput!
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
}

input GoalCreateManyGoalInput {
  habitId: String!
  id: String
  quantity: Int!
}

input GoalCreateManyGoalInputEnvelope {
  data: [GoalCreateManyGoalInput!]!
  skipDuplicates: Boolean
}

input GoalCreateManyHabitInput {
  goalId: Int
  id: String
  quantity: Int!
}

input GoalCreateManyHabitInputEnvelope {
  data: [GoalCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input GoalCreateManyInput {
  goalId: Int
  habitId: String!
  id: String
  quantity: Int!
}

input GoalCreateNestedManyWithoutGoalInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutGoalInput!]
  create: [GoalCreateWithoutGoalInput!]
  createMany: GoalCreateManyGoalInputEnvelope
}

input GoalCreateNestedManyWithoutHabitInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutHabitInput!]
  create: [GoalCreateWithoutHabitInput!]
  createMany: GoalCreateManyHabitInputEnvelope
}

input GoalCreateNestedOneWithoutMilestonesInput {
  connect: GoalWhereUniqueInput
  connectOrCreate: GoalCreateOrConnectWithoutMilestonesInput
  create: GoalCreateWithoutMilestonesInput
}

input GoalCreateOrConnectWithoutGoalInput {
  create: GoalCreateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateOrConnectWithoutHabitInput {
  create: GoalCreateWithoutHabitInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateOrConnectWithoutMilestonesInput {
  create: GoalCreateWithoutMilestonesInput!
  where: GoalWhereUniqueInput!
}

input GoalCreateWithoutGoalInput {
  habit: HabitCreateNestedOneWithoutGoalsInput!
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
}

input GoalCreateWithoutHabitInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  milestones: GoalCreateNestedManyWithoutGoalInput
  quantity: Int!
}

input GoalCreateWithoutMilestonesInput {
  goal: GoalCreateNestedOneWithoutMilestonesInput
  habit: HabitCreateNestedOneWithoutGoalsInput!
  quantity: Int!
}

type GoalGroupBy {
  _avg: GoalAvgAggregate
  _count: GoalCountAggregate
  _max: GoalMaxAggregate
  _min: GoalMinAggregate
  _sum: GoalSumAggregate
  goalId: String
  habitId: String!
  id: String!
  quantity: Int!
}

input GoalListRelationFilter {
  every: GoalWhereInput
  none: GoalWhereInput
  some: GoalWhereInput
}

type GoalMaxAggregate {
  goalId: String
  habitId: String
  id: String
  quantity: Int
}

input GoalMaxOrderByAggregateInput {
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

type GoalMinAggregate {
  goalId: String
  habitId: String
  id: String
  quantity: Int
}

input GoalMinOrderByAggregateInput {
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

input GoalOrderByRelationAggregateInput {
  _count: SortOrder
}

input GoalOrderByWithAggregationInput {
  _avg: GoalAvgOrderByAggregateInput
  _count: GoalCountOrderByAggregateInput
  _max: GoalMaxOrderByAggregateInput
  _min: GoalMinOrderByAggregateInput
  _sum: GoalSumOrderByAggregateInput
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

input GoalOrderByWithRelationInput {
  goal: GoalOrderByWithRelationInput
  goalId: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  milestones: GoalOrderByRelationAggregateInput
  quantity: SortOrder
}

input GoalRelationFilter {
  is: GoalWhereInput
  isNot: GoalWhereInput
}

enum GoalScalarFieldEnum {
  goalId
  habitId
  id
  quantity
}

input GoalScalarWhereInput {
  AND: [GoalScalarWhereInput!]
  NOT: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
  goalId: StringNullableFilter
  habitId: StringFilter
  id: StringFilter
  quantity: IntFilter
}

input GoalScalarWhereWithAggregatesInput {
  AND: [GoalScalarWhereWithAggregatesInput!]
  NOT: [GoalScalarWhereWithAggregatesInput!]
  OR: [GoalScalarWhereWithAggregatesInput!]
  goalId: IntNullableWithAggregatesFilter
  habitId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  quantity: IntWithAggregatesFilter
}

type GoalSumAggregate {
  goalId: String
  habitId: String
  id: String
  quantity: Int
}

input GoalSumOrderByAggregateInput {
  goalId: SortOrder
  habitId: SortOrder
  id: SortOrder
  quantity: SortOrder
}

input GoalUpdateInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  habit: HabitUpdateOneRequiredWithoutGoalsInput
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpdateManyWithWhereWithoutGoalInput {
  data: GoalUpdateManyMutationInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateManyWithWhereWithoutHabitInput {
  data: GoalUpdateManyMutationInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateManyWithoutGoalInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutGoalInput!]
  create: [GoalCreateWithoutGoalInput!]
  createMany: GoalCreateManyGoalInputEnvelope
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutGoalInput!]
  updateMany: [GoalUpdateManyWithWhereWithoutGoalInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutGoalInput!]
}

input GoalUpdateManyWithoutHabitInput {
  connect: [GoalWhereUniqueInput!]
  connectOrCreate: [GoalCreateOrConnectWithoutHabitInput!]
  create: [GoalCreateWithoutHabitInput!]
  createMany: GoalCreateManyHabitInputEnvelope
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [GoalUpdateManyWithWhereWithoutHabitInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutHabitInput!]
}

input GoalUpdateOneWithoutMilestonesInput {
  connect: GoalWhereUniqueInput
  connectOrCreate: GoalCreateOrConnectWithoutMilestonesInput
  create: GoalCreateWithoutMilestonesInput
  delete: Boolean
  disconnect: Boolean
  update: GoalUpdateWithoutMilestonesInput
  upsert: GoalUpsertWithoutMilestonesInput
}

input GoalUpdateWithWhereUniqueWithoutGoalInput {
  data: GoalUpdateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalUpdateWithWhereUniqueWithoutHabitInput {
  data: GoalUpdateWithoutHabitInput!
  where: GoalWhereUniqueInput!
}

input GoalUpdateWithoutGoalInput {
  habit: HabitUpdateOneRequiredWithoutGoalsInput
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpdateWithoutHabitInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  milestones: GoalUpdateManyWithoutGoalInput
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpdateWithoutMilestonesInput {
  goal: GoalUpdateOneWithoutMilestonesInput
  habit: HabitUpdateOneRequiredWithoutGoalsInput
  quantity: IntFieldUpdateOperationsInput
}

input GoalUpsertWithWhereUniqueWithoutGoalInput {
  create: GoalCreateWithoutGoalInput!
  update: GoalUpdateWithoutGoalInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithWhereUniqueWithoutHabitInput {
  create: GoalCreateWithoutHabitInput!
  update: GoalUpdateWithoutHabitInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithoutMilestonesInput {
  create: GoalCreateWithoutMilestonesInput!
  update: GoalUpdateWithoutMilestonesInput!
}

input GoalWhereInput {
  AND: [GoalWhereInput!]
  NOT: [GoalWhereInput!]
  OR: [GoalWhereInput!]
  goal: GoalRelationFilter
  goalId: StringNullableFilter
  habit: HabitRelationFilter
  habitId: StringFilter
  id: StringFilter
  milestones: GoalListRelationFilter
  quantity: IntFilter
}

input GoalWhereUniqueInput {
  id: String
}

type Habit {
  _count: HabitCount
  act: Act!
  actId: String!
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  archivedAt: DateTimeISO
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  createdAt: DateTimeISO!
  defaultDurationInMinutes: Int
  goals(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  id: String!
  isPublic: Boolean!
  metricUsages(cursor: MetricUsageWhereUniqueInput, distinct: [MetricUsageScalarFieldEnum!], orderBy: [MetricUsageOrderByWithRelationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): [MetricUsage!]!
  name: String!
  routines(cursor: RoutineHabitWhereUniqueInput, distinct: [RoutineHabitScalarFieldEnum!], orderBy: [RoutineHabitOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): [RoutineHabit!]!
  schedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type HabitAvgAggregate {
  actId: Float
  defaultDurationInMinutes: Float
  id: String
  userId: String
}

input HabitAvgOrderByAggregateInput {
  actId: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  userId: SortOrder
}

type HabitCount {
  actions: Int!
  calendarEvents: Int!
  goals: Int!
  metricUsages: Int!
  routines: Int!
  schedules: Int!
  tasks: Int!
}

type HabitCountAggregate {
  _all: Int!
  actId: String!
  archivedAt: Int!
  createdAt: Int!
  defaultDurationInMinutes: Int!
  id: String!
  isPublic: Int!
  name: Int!
  updatedAt: Int!
  userId: String!
}

input HabitCountOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input HabitCreateInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateManyActInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
  userId: String!
}

input HabitCreateManyActInputEnvelope {
  data: [HabitCreateManyActInput!]!
  skipDuplicates: Boolean
}

input HabitCreateManyInput {
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
  userId: String!
}

input HabitCreateManyUserInput {
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
}

input HabitCreateManyUserInputEnvelope {
  data: [HabitCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input HabitCreateNestedManyWithoutActInput {
  connect: [HabitWhereUniqueInput!]
  connectOrCreate: [HabitCreateOrConnectWithoutActInput!]
  create: [HabitCreateWithoutActInput!]
  createMany: HabitCreateManyActInputEnvelope
}

input HabitCreateNestedManyWithoutUserInput {
  connect: [HabitWhereUniqueInput!]
  connectOrCreate: [HabitCreateOrConnectWithoutUserInput!]
  create: [HabitCreateWithoutUserInput!]
  createMany: HabitCreateManyUserInputEnvelope
}

input HabitCreateNestedOneWithoutActionsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutActionsInput
  create: HabitCreateWithoutActionsInput
}

input HabitCreateNestedOneWithoutCalendarEventsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutCalendarEventsInput
  create: HabitCreateWithoutCalendarEventsInput
}

input HabitCreateNestedOneWithoutGoalsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutGoalsInput
  create: HabitCreateWithoutGoalsInput
}

input HabitCreateNestedOneWithoutMetricUsagesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutMetricUsagesInput
  create: HabitCreateWithoutMetricUsagesInput
}

input HabitCreateNestedOneWithoutRoutinesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutRoutinesInput
  create: HabitCreateWithoutRoutinesInput
}

input HabitCreateNestedOneWithoutSchedulesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutSchedulesInput
  create: HabitCreateWithoutSchedulesInput
}

input HabitCreateNestedOneWithoutTasksInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutTasksInput
  create: HabitCreateWithoutTasksInput
}

input HabitCreateOrConnectWithoutActInput {
  create: HabitCreateWithoutActInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutActionsInput {
  create: HabitCreateWithoutActionsInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutCalendarEventsInput {
  create: HabitCreateWithoutCalendarEventsInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutGoalsInput {
  create: HabitCreateWithoutGoalsInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutMetricUsagesInput {
  create: HabitCreateWithoutMetricUsagesInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutRoutinesInput {
  create: HabitCreateWithoutRoutinesInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutSchedulesInput {
  create: HabitCreateWithoutSchedulesInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutTasksInput {
  create: HabitCreateWithoutTasksInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateOrConnectWithoutUserInput {
  create: HabitCreateWithoutUserInput!
  where: HabitWhereUniqueInput!
}

input HabitCreateWithoutActInput {
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutActionsInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutCalendarEventsInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutGoalsInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutMetricUsagesInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutRoutinesInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutSchedulesInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutTasksInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutHabitsInput!
}

input HabitCreateWithoutUserInput {
  act: ActCreateNestedOneWithoutHabitsInput!
  actions: ActionCreateNestedManyWithoutHabitInput
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutHabitInput
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  goals: GoalCreateNestedManyWithoutHabitInput
  isPublic: Boolean
  metricUsages: MetricUsageCreateNestedManyWithoutHabitInput
  name: String!
  routines: RoutineHabitCreateNestedManyWithoutHabitInput
  schedules: ActionScheduleCreateNestedManyWithoutHabitInput
  tasks: TaskCreateNestedManyWithoutHabitInput
  updatedAt: DateTimeISO
}

type HabitGroupBy {
  _avg: HabitAvgAggregate
  _count: HabitCountAggregate
  _max: HabitMaxAggregate
  _min: HabitMinAggregate
  _sum: HabitSumAggregate
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  defaultDurationInMinutes: Int
  id: String!
  isPublic: Boolean!
  name: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input HabitListRelationFilter {
  every: HabitWhereInput
  none: HabitWhereInput
  some: HabitWhereInput
}

type HabitMaxAggregate {
  actId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  id: String
  isPublic: Boolean
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input HabitMaxOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type HabitMinAggregate {
  actId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  defaultDurationInMinutes: Int
  id: String
  isPublic: Boolean
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input HabitMinOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input HabitOrderByRelationAggregateInput {
  _count: SortOrder
}

input HabitOrderByWithAggregationInput {
  _avg: HabitAvgOrderByAggregateInput
  _count: HabitCountOrderByAggregateInput
  _max: HabitMaxOrderByAggregateInput
  _min: HabitMinOrderByAggregateInput
  _sum: HabitSumOrderByAggregateInput
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input HabitOrderByWithRelationInput {
  act: ActOrderByWithRelationInput
  actId: SortOrder
  actions: ActionOrderByRelationAggregateInput
  archivedAt: SortOrder
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  createdAt: SortOrder
  defaultDurationInMinutes: SortOrder
  goals: GoalOrderByRelationAggregateInput
  id: SortOrder
  isPublic: SortOrder
  metricUsages: MetricUsageOrderByRelationAggregateInput
  name: SortOrder
  routines: RoutineHabitOrderByRelationAggregateInput
  schedules: ActionScheduleOrderByRelationAggregateInput
  tasks: TaskOrderByRelationAggregateInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input HabitRelationFilter {
  is: HabitWhereInput
  isNot: HabitWhereInput
}

enum HabitScalarFieldEnum {
  actId
  archivedAt
  createdAt
  defaultDurationInMinutes
  id
  isPublic
  name
  updatedAt
  userId
}

input HabitScalarWhereInput {
  AND: [HabitScalarWhereInput!]
  NOT: [HabitScalarWhereInput!]
  OR: [HabitScalarWhereInput!]
  actId: StringFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  defaultDurationInMinutes: IntNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input HabitScalarWhereWithAggregatesInput {
  AND: [HabitScalarWhereWithAggregatesInput!]
  NOT: [HabitScalarWhereWithAggregatesInput!]
  OR: [HabitScalarWhereWithAggregatesInput!]
  actId: StringWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  defaultDurationInMinutes: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type HabitSumAggregate {
  actId: String
  defaultDurationInMinutes: Int
  id: String
  userId: String
}

input HabitSumOrderByAggregateInput {
  actId: SortOrder
  defaultDurationInMinutes: SortOrder
  id: SortOrder
  userId: SortOrder
}

input HabitUpdateInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HabitUpdateManyWithWhereWithoutActInput {
  data: HabitUpdateManyMutationInput!
  where: HabitScalarWhereInput!
}

input HabitUpdateManyWithWhereWithoutUserInput {
  data: HabitUpdateManyMutationInput!
  where: HabitScalarWhereInput!
}

input HabitUpdateManyWithoutActInput {
  connect: [HabitWhereUniqueInput!]
  connectOrCreate: [HabitCreateOrConnectWithoutActInput!]
  create: [HabitCreateWithoutActInput!]
  createMany: HabitCreateManyActInputEnvelope
  delete: [HabitWhereUniqueInput!]
  deleteMany: [HabitScalarWhereInput!]
  disconnect: [HabitWhereUniqueInput!]
  set: [HabitWhereUniqueInput!]
  update: [HabitUpdateWithWhereUniqueWithoutActInput!]
  updateMany: [HabitUpdateManyWithWhereWithoutActInput!]
  upsert: [HabitUpsertWithWhereUniqueWithoutActInput!]
}

input HabitUpdateManyWithoutUserInput {
  connect: [HabitWhereUniqueInput!]
  connectOrCreate: [HabitCreateOrConnectWithoutUserInput!]
  create: [HabitCreateWithoutUserInput!]
  createMany: HabitCreateManyUserInputEnvelope
  delete: [HabitWhereUniqueInput!]
  deleteMany: [HabitScalarWhereInput!]
  disconnect: [HabitWhereUniqueInput!]
  set: [HabitWhereUniqueInput!]
  update: [HabitUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [HabitUpdateManyWithWhereWithoutUserInput!]
  upsert: [HabitUpsertWithWhereUniqueWithoutUserInput!]
}

input HabitUpdateOneRequiredWithoutGoalsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutGoalsInput
  create: HabitCreateWithoutGoalsInput
  update: HabitUpdateWithoutGoalsInput
  upsert: HabitUpsertWithoutGoalsInput
}

input HabitUpdateOneRequiredWithoutMetricUsagesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutMetricUsagesInput
  create: HabitCreateWithoutMetricUsagesInput
  update: HabitUpdateWithoutMetricUsagesInput
  upsert: HabitUpsertWithoutMetricUsagesInput
}

input HabitUpdateOneRequiredWithoutRoutinesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutRoutinesInput
  create: HabitCreateWithoutRoutinesInput
  update: HabitUpdateWithoutRoutinesInput
  upsert: HabitUpsertWithoutRoutinesInput
}

input HabitUpdateOneRequiredWithoutSchedulesInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutSchedulesInput
  create: HabitCreateWithoutSchedulesInput
  update: HabitUpdateWithoutSchedulesInput
  upsert: HabitUpsertWithoutSchedulesInput
}

input HabitUpdateOneWithoutActionsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutActionsInput
  create: HabitCreateWithoutActionsInput
  delete: Boolean
  disconnect: Boolean
  update: HabitUpdateWithoutActionsInput
  upsert: HabitUpsertWithoutActionsInput
}

input HabitUpdateOneWithoutCalendarEventsInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutCalendarEventsInput
  create: HabitCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: HabitUpdateWithoutCalendarEventsInput
  upsert: HabitUpsertWithoutCalendarEventsInput
}

input HabitUpdateOneWithoutTasksInput {
  connect: HabitWhereUniqueInput
  connectOrCreate: HabitCreateOrConnectWithoutTasksInput
  create: HabitCreateWithoutTasksInput
  delete: Boolean
  disconnect: Boolean
  update: HabitUpdateWithoutTasksInput
  upsert: HabitUpsertWithoutTasksInput
}

input HabitUpdateWithWhereUniqueWithoutActInput {
  data: HabitUpdateWithoutActInput!
  where: HabitWhereUniqueInput!
}

input HabitUpdateWithWhereUniqueWithoutUserInput {
  data: HabitUpdateWithoutUserInput!
  where: HabitWhereUniqueInput!
}

input HabitUpdateWithoutActInput {
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutActionsInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutCalendarEventsInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutGoalsInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutMetricUsagesInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutRoutinesInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutSchedulesInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutTasksInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutHabitsInput
}

input HabitUpdateWithoutUserInput {
  act: ActUpdateOneRequiredWithoutHabitsInput
  actions: ActionUpdateManyWithoutHabitInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutHabitInput
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultDurationInMinutes: NullableIntFieldUpdateOperationsInput
  goals: GoalUpdateManyWithoutHabitInput
  isPublic: BoolFieldUpdateOperationsInput
  metricUsages: MetricUsageUpdateManyWithoutHabitInput
  name: StringFieldUpdateOperationsInput
  routines: RoutineHabitUpdateManyWithoutHabitInput
  schedules: ActionScheduleUpdateManyWithoutHabitInput
  tasks: TaskUpdateManyWithoutHabitInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HabitUpsertWithWhereUniqueWithoutActInput {
  create: HabitCreateWithoutActInput!
  update: HabitUpdateWithoutActInput!
  where: HabitWhereUniqueInput!
}

input HabitUpsertWithWhereUniqueWithoutUserInput {
  create: HabitCreateWithoutUserInput!
  update: HabitUpdateWithoutUserInput!
  where: HabitWhereUniqueInput!
}

input HabitUpsertWithoutActionsInput {
  create: HabitCreateWithoutActionsInput!
  update: HabitUpdateWithoutActionsInput!
}

input HabitUpsertWithoutCalendarEventsInput {
  create: HabitCreateWithoutCalendarEventsInput!
  update: HabitUpdateWithoutCalendarEventsInput!
}

input HabitUpsertWithoutGoalsInput {
  create: HabitCreateWithoutGoalsInput!
  update: HabitUpdateWithoutGoalsInput!
}

input HabitUpsertWithoutMetricUsagesInput {
  create: HabitCreateWithoutMetricUsagesInput!
  update: HabitUpdateWithoutMetricUsagesInput!
}

input HabitUpsertWithoutRoutinesInput {
  create: HabitCreateWithoutRoutinesInput!
  update: HabitUpdateWithoutRoutinesInput!
}

input HabitUpsertWithoutSchedulesInput {
  create: HabitCreateWithoutSchedulesInput!
  update: HabitUpdateWithoutSchedulesInput!
}

input HabitUpsertWithoutTasksInput {
  create: HabitCreateWithoutTasksInput!
  update: HabitUpdateWithoutTasksInput!
}

input HabitWhereInput {
  AND: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  act: ActRelationFilter
  actId: StringFilter
  actions: ActionListRelationFilter
  archivedAt: DateTimeNullableFilter
  calendarEvents: CalendarEventListRelationFilter
  createdAt: DateTimeFilter
  defaultDurationInMinutes: IntNullableFilter
  goals: GoalListRelationFilter
  id: StringFilter
  isPublic: BoolFilter
  metricUsages: MetricUsageListRelationFilter
  name: StringFilter
  routines: RoutineHabitListRelationFilter
  schedules: ActionScheduleListRelationFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input HabitWhereUniqueInput {
  id: String
}

type Identity {
  _count: IdentityCount
  actionRelations(cursor: IdentityActRelationWhereUniqueInput, distinct: [IdentityActRelationScalarFieldEnum!], orderBy: [IdentityActRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): [IdentityActRelation!]!
  description: String
  id: String!
  name: String!
  slug: String!
  userId: String!
}

type IdentityActRelation {
  action: Act!
  actionId: String!
  archivedAt: DateTimeISO
  id: String!
  identity: Identity!
  identityId: String!
}

type IdentityActRelationAvgAggregate {
  actionId: Float
  id: String
  identityId: Float
}

input IdentityActRelationAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActRelationCountAggregate {
  _all: Int!
  actionId: String!
  archivedAt: Int!
  id: String!
  identityId: String!
}

input IdentityActRelationCountOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActRelationCreateInput {
  action: ActCreateNestedOneWithoutIdentityRelationsInput!
  archivedAt: DateTimeISO
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

input IdentityActRelationCreateManyActionInput {
  archivedAt: DateTimeISO
  id: String
  identityId: String!
}

input IdentityActRelationCreateManyActionInputEnvelope {
  data: [IdentityActRelationCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input IdentityActRelationCreateManyInput {
  actionId: String!
  archivedAt: DateTimeISO
  id: String
  identityId: String!
}

input IdentityActRelationCreateNestedManyWithoutActionInput {
  connect: [IdentityActRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActRelationCreateWithoutActionInput!]
  createMany: IdentityActRelationCreateManyActionInputEnvelope
}

input IdentityActRelationCreateOrConnectWithoutActionInput {
  create: IdentityActRelationCreateWithoutActionInput!
  where: IdentityActRelationWhereUniqueInput!
}

input IdentityActRelationCreateWithoutActionInput {
  archivedAt: DateTimeISO
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

type IdentityActRelationGroupBy {
  _avg: IdentityActRelationAvgAggregate
  _count: IdentityActRelationCountAggregate
  _max: IdentityActRelationMaxAggregate
  _min: IdentityActRelationMinAggregate
  _sum: IdentityActRelationSumAggregate
  actionId: String!
  archivedAt: DateTimeISO
  id: String!
  identityId: String!
}

input IdentityActRelationIdentityIdActionIdCompoundUniqueInput {
  actionId: String!
  identityId: String!
}

input IdentityActRelationListRelationFilter {
  every: IdentityActRelationWhereInput
  none: IdentityActRelationWhereInput
  some: IdentityActRelationWhereInput
}

type IdentityActRelationMaxAggregate {
  actionId: String
  archivedAt: DateTimeISO
  id: String
  identityId: String
}

input IdentityActRelationMaxOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActRelationMinAggregate {
  actionId: String
  archivedAt: DateTimeISO
  id: String
  identityId: String
}

input IdentityActRelationMinOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActRelationOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentityActRelationOrderByWithAggregationInput {
  _avg: IdentityActRelationAvgOrderByAggregateInput
  _count: IdentityActRelationCountOrderByAggregateInput
  _max: IdentityActRelationMaxOrderByAggregateInput
  _min: IdentityActRelationMinOrderByAggregateInput
  _sum: IdentityActRelationSumOrderByAggregateInput
  actionId: SortOrder
  archivedAt: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActRelationOrderByWithRelationInput {
  action: ActOrderByWithRelationInput
  actionId: SortOrder
  archivedAt: SortOrder
  id: SortOrder
  identity: IdentityOrderByWithRelationInput
  identityId: SortOrder
}

enum IdentityActRelationScalarFieldEnum {
  actionId
  archivedAt
  id
  identityId
}

input IdentityActRelationScalarWhereInput {
  AND: [IdentityActRelationScalarWhereInput!]
  NOT: [IdentityActRelationScalarWhereInput!]
  OR: [IdentityActRelationScalarWhereInput!]
  actionId: StringFilter
  archivedAt: DateTimeNullableFilter
  id: StringFilter
  identityId: StringFilter
}

input IdentityActRelationScalarWhereWithAggregatesInput {
  AND: [IdentityActRelationScalarWhereWithAggregatesInput!]
  NOT: [IdentityActRelationScalarWhereWithAggregatesInput!]
  OR: [IdentityActRelationScalarWhereWithAggregatesInput!]
  actionId: StringWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  identityId: StringWithAggregatesFilter
}

type IdentityActRelationSumAggregate {
  actionId: String
  id: String
  identityId: String
}

input IdentityActRelationSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActRelationUpdateInput {
  action: ActUpdateOneRequiredWithoutIdentityRelationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActRelationUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
}

input IdentityActRelationUpdateManyWithWhereWithoutActionInput {
  data: IdentityActRelationUpdateManyMutationInput!
  where: IdentityActRelationScalarWhereInput!
}

input IdentityActRelationUpdateManyWithoutActionInput {
  connect: [IdentityActRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActRelationCreateWithoutActionInput!]
  createMany: IdentityActRelationCreateManyActionInputEnvelope
  delete: [IdentityActRelationWhereUniqueInput!]
  deleteMany: [IdentityActRelationScalarWhereInput!]
  disconnect: [IdentityActRelationWhereUniqueInput!]
  set: [IdentityActRelationWhereUniqueInput!]
  update: [IdentityActRelationUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [IdentityActRelationUpdateManyWithWhereWithoutActionInput!]
  upsert: [IdentityActRelationUpsertWithWhereUniqueWithoutActionInput!]
}

input IdentityActRelationUpdateWithWhereUniqueWithoutActionInput {
  data: IdentityActRelationUpdateWithoutActionInput!
  where: IdentityActRelationWhereUniqueInput!
}

input IdentityActRelationUpdateWithoutActionInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActRelationUpsertWithWhereUniqueWithoutActionInput {
  create: IdentityActRelationCreateWithoutActionInput!
  update: IdentityActRelationUpdateWithoutActionInput!
  where: IdentityActRelationWhereUniqueInput!
}

input IdentityActRelationWhereInput {
  AND: [IdentityActRelationWhereInput!]
  NOT: [IdentityActRelationWhereInput!]
  OR: [IdentityActRelationWhereInput!]
  action: ActRelationFilter
  actionId: StringFilter
  archivedAt: DateTimeNullableFilter
  id: StringFilter
  identity: IdentityRelationFilter
  identityId: StringFilter
}

input IdentityActRelationWhereUniqueInput {
  id: String
  identityId_actionId: IdentityActRelationIdentityIdActionIdCompoundUniqueInput
}

type IdentityAvgAggregate {
  id: String
}

input IdentityAvgOrderByAggregateInput {
  id: SortOrder
}

type IdentityCount {
  actionRelations: Int!
  identities: Int!
}

type IdentityCountAggregate {
  _all: Int!
  description: Int!
  id: String!
  name: Int!
  slug: Int!
}

input IdentityCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityCreateInput {
  description: String
  name: String!
  slug: String!
}

input IdentityCreateManyInput {
  description: String
  id: String
  name: String!
  slug: String!
}

input IdentityCreateManyUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
}

input IdentityCreateManyUserInputEnvelope {
  data: [IdentityCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input IdentityCreateNestedManyWithoutUserInput {
  connect: [IdentityWhereUniqueInput!]
  connectOrCreate: [IdentityCreateOrConnectWithoutUserInput!]
  create: [IdentityCreateWithoutUserInput!]
  createMany: IdentityCreateManyUserInputEnvelope
}

input IdentityCreateNestedOneWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
}

input IdentityCreateOrConnectWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateOrConnectWithoutUserInput {
  create: IdentityCreateWithoutUserInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateWithoutActionRelationsInput {
  description: String
  name: String!
  slug: String!
}

input IdentityCreateWithoutUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
}

type IdentityGroupBy {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
  description: String
  id: String!
  name: String!
  slug: String!
}

type IdentityMaxAggregate {
  description: String
  id: String
  name: String
  slug: String
}

input IdentityMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type IdentityMinAggregate {
  description: String
  id: String
  name: String
  slug: String
}

input IdentityMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentityOrderByWithAggregationInput {
  _avg: IdentityAvgOrderByAggregateInput
  _count: IdentityCountOrderByAggregateInput
  _max: IdentityMaxOrderByAggregateInput
  _min: IdentityMinOrderByAggregateInput
  _sum: IdentitySumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByWithRelationInput {
  actionRelations: IdentityActRelationOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  identities: IdentityOrderByRelationAggregateInput
  name: SortOrder
  slug: SortOrder
}

input IdentityRelationFilter {
  is: IdentityWhereInput
  isNot: IdentityWhereInput
}

enum IdentityScalarFieldEnum {
  description
  id
  name
  slug
}

input IdentityScalarWhereInput {
  AND: [IdentityScalarWhereInput!]
  NOT: [IdentityScalarWhereInput!]
  OR: [IdentityScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mantraId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input IdentityScalarWhereWithAggregatesInput {
  AND: [IdentityScalarWhereWithAggregatesInput!]
  NOT: [IdentityScalarWhereWithAggregatesInput!]
  OR: [IdentityScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type IdentitySumAggregate {
  id: String
}

input IdentitySumOrderByAggregateInput {
  id: SortOrder
}

input IdentityUpdateInput {
  actionRelations: IdentityActRelationUpdateManyMutationInput
  description: NullableStringFieldUpdateOperationsInput
  identities: IdentityUpdateManyMutationInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateManyWithWhereWithoutUserInput {
  data: IdentityUpdateManyMutationInput!
  where: IdentityScalarWhereInput!
}

input IdentityUpdateManyWithoutUserInput {
  connect: [IdentityWhereUniqueInput!]
  connectOrCreate: [IdentityCreateOrConnectWithoutUserInput!]
  create: [IdentityCreateWithoutUserInput!]
  createMany: IdentityCreateManyUserInputEnvelope
  delete: [IdentityWhereUniqueInput!]
  deleteMany: [IdentityScalarWhereInput!]
  disconnect: [IdentityWhereUniqueInput!]
  set: [IdentityWhereUniqueInput!]
  update: [IdentityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [IdentityUpdateManyWithWhereWithoutUserInput!]
  upsert: [IdentityUpsertWithWhereUniqueWithoutUserInput!]
}

input IdentityUpdateOneRequiredWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
  update: IdentityUpdateWithoutActionRelationsInput
  upsert: IdentityUpsertWithoutActionRelationsInput
}

input IdentityUpdateWithWhereUniqueWithoutUserInput {
  data: IdentityUpdateWithoutUserInput!
  where: IdentityWhereUniqueInput!
}

input IdentityUpdateWithoutActionRelationsInput {
  description: NullableStringFieldUpdateOperationsInput
  identities: IdentityUpdateManyMutationInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentityUpsertWithWhereUniqueWithoutUserInput {
  create: IdentityCreateWithoutUserInput!
  update: IdentityUpdateWithoutUserInput!
  where: IdentityWhereUniqueInput!
}

input IdentityUpsertWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  update: IdentityUpdateWithoutActionRelationsInput!
}

input IdentityWhereInput {
  AND: [IdentityWhereInput!]
  NOT: [IdentityWhereInput!]
  OR: [IdentityWhereInput!]
  actionRelations: IdentityActRelationListRelationFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  slug: StringFilter
}

input IdentityWhereUniqueInput {
  id: String
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Item {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  data: JSON!
  id: String!
  list: List!
  listId: String!
  updatedAt: DateTimeISO!
}

type ItemAvgAggregate {
  id: String
  listId: Float
}

input ItemAvgOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
}

type ItemCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  data: Int!
  id: String!
  listId: String!
  updatedAt: Int!
}

input ItemCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  listId: SortOrder
  updatedAt: SortOrder
}

input ItemCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  data: JSON
  list: ListCreateNestedOneWithoutItemsInput!
  updatedAt: DateTimeISO
}

input ItemCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  data: JSON
  id: String
  listId: String!
  updatedAt: DateTimeISO
}

input ItemCreateManyListInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  data: JSON
  id: String
  updatedAt: DateTimeISO
}

input ItemCreateManyListInputEnvelope {
  data: [ItemCreateManyListInput!]!
  skipDuplicates: Boolean
}

input ItemCreateNestedManyWithoutListInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutListInput!]
  create: [ItemCreateWithoutListInput!]
  createMany: ItemCreateManyListInputEnvelope
}

input ItemCreateOrConnectWithoutListInput {
  create: ItemCreateWithoutListInput!
  where: ItemWhereUniqueInput!
}

input ItemCreateWithoutListInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  data: JSON
  updatedAt: DateTimeISO
}

type ItemGroupBy {
  _avg: ItemAvgAggregate
  _count: ItemCountAggregate
  _max: ItemMaxAggregate
  _min: ItemMinAggregate
  _sum: ItemSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  data: JSON!
  id: String!
  listId: String!
  updatedAt: DateTimeISO!
}

input ItemListRelationFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

type ItemMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  listId: String
  updatedAt: DateTimeISO
}

input ItemMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  listId: SortOrder
  updatedAt: SortOrder
}

type ItemMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  listId: String
  updatedAt: DateTimeISO
}

input ItemMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  listId: SortOrder
  updatedAt: SortOrder
}

input ItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ItemOrderByWithAggregationInput {
  _avg: ItemAvgOrderByAggregateInput
  _count: ItemCountOrderByAggregateInput
  _max: ItemMaxOrderByAggregateInput
  _min: ItemMinOrderByAggregateInput
  _sum: ItemSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  listId: SortOrder
  updatedAt: SortOrder
}

input ItemOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  list: ListOrderByWithRelationInput
  listId: SortOrder
  updatedAt: SortOrder
}

enum ItemScalarFieldEnum {
  archivedAt
  createdAt
  data
  id
  listId
  updatedAt
}

input ItemScalarWhereInput {
  AND: [ItemScalarWhereInput!]
  NOT: [ItemScalarWhereInput!]
  OR: [ItemScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  id: StringFilter
  listId: StringFilter
  updatedAt: DateTimeFilter
}

input ItemScalarWhereWithAggregatesInput {
  AND: [ItemScalarWhereWithAggregatesInput!]
  NOT: [ItemScalarWhereWithAggregatesInput!]
  OR: [ItemScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  data: JsonWithAggregatesFilter
  id: StringWithAggregatesFilter
  listId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ItemSumAggregate {
  id: String
  listId: String
}

input ItemSumOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
}

input ItemUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  list: ListUpdateOneRequiredWithoutItemsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateManyWithWhereWithoutListInput {
  data: ItemUpdateManyMutationInput!
  where: ItemScalarWhereInput!
}

input ItemUpdateManyWithoutListInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutListInput!]
  create: [ItemCreateWithoutListInput!]
  createMany: ItemCreateManyListInputEnvelope
  delete: [ItemWhereUniqueInput!]
  deleteMany: [ItemScalarWhereInput!]
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutListInput!]
  updateMany: [ItemUpdateManyWithWhereWithoutListInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutListInput!]
}

input ItemUpdateWithWhereUniqueWithoutListInput {
  data: ItemUpdateWithoutListInput!
  where: ItemWhereUniqueInput!
}

input ItemUpdateWithoutListInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpsertWithWhereUniqueWithoutListInput {
  create: ItemCreateWithoutListInput!
  update: ItemUpdateWithoutListInput!
  where: ItemWhereUniqueInput!
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  id: StringFilter
  list: ListRelationFilter
  listId: StringFilter
  updatedAt: DateTimeFilter
}

input ItemWhereUniqueInput {
  id: String
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSON
  not: JSON
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  equals: JSON
  not: JSON
}

type List {
  _count: ListCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  fields: JSON!
  id: String!
  items(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): [Item!]!
  name: String!
  owner: User!
  ownerId: String!
  slug: String!
  updatedAt: DateTimeISO!
}

type ListAvgAggregate {
  id: String
  ownerId: Float
}

input ListAvgOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

type ListCount {
  items: Int!
}

type ListCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  fields: Int!
  id: String!
  name: Int!
  ownerId: String!
  slug: Int!
  updatedAt: Int!
}

input ListCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  fields: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ListCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  fields: JSON
  items: ItemCreateNestedManyWithoutListInput
  name: String!
  owner: UserCreateNestedOneWithoutListsInput!
  slug: String!
  updatedAt: DateTimeISO
}

input ListCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  fields: JSON
  id: String
  name: String!
  ownerId: String!
  slug: String!
  updatedAt: DateTimeISO
}

input ListCreateManyOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  fields: JSON
  id: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input ListCreateManyOwnerInputEnvelope {
  data: [ListCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input ListCreateNestedManyWithoutOwnerInput {
  connect: [ListWhereUniqueInput!]
  connectOrCreate: [ListCreateOrConnectWithoutOwnerInput!]
  create: [ListCreateWithoutOwnerInput!]
  createMany: ListCreateManyOwnerInputEnvelope
}

input ListCreateNestedOneWithoutItemsInput {
  connect: ListWhereUniqueInput
  connectOrCreate: ListCreateOrConnectWithoutItemsInput
  create: ListCreateWithoutItemsInput
}

input ListCreateOrConnectWithoutItemsInput {
  create: ListCreateWithoutItemsInput!
  where: ListWhereUniqueInput!
}

input ListCreateOrConnectWithoutOwnerInput {
  create: ListCreateWithoutOwnerInput!
  where: ListWhereUniqueInput!
}

input ListCreateWithoutItemsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  fields: JSON
  name: String!
  owner: UserCreateNestedOneWithoutListsInput!
  slug: String!
  updatedAt: DateTimeISO
}

input ListCreateWithoutOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  fields: JSON
  items: ItemCreateNestedManyWithoutListInput
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

type ListGroupBy {
  _avg: ListAvgAggregate
  _count: ListCountAggregate
  _max: ListMaxAggregate
  _min: ListMinAggregate
  _sum: ListSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  fields: JSON!
  id: String!
  name: String!
  ownerId: String!
  slug: String!
  updatedAt: DateTimeISO!
}

input ListListRelationFilter {
  every: ListWhereInput
  none: ListWhereInput
  some: ListWhereInput
}

type ListMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  ownerId: String
  slug: String
  updatedAt: DateTimeISO
}

input ListMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type ListMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  ownerId: String
  slug: String
  updatedAt: DateTimeISO
}

input ListMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ListOrderByRelationAggregateInput {
  _count: SortOrder
}

input ListOrderByWithAggregationInput {
  _avg: ListAvgOrderByAggregateInput
  _count: ListCountOrderByAggregateInput
  _max: ListMaxOrderByAggregateInput
  _min: ListMinOrderByAggregateInput
  _sum: ListSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  fields: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ListOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  fields: SortOrder
  id: SortOrder
  items: ItemOrderByRelationAggregateInput
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ListRelationFilter {
  is: ListWhereInput
  isNot: ListWhereInput
}

enum ListScalarFieldEnum {
  archivedAt
  createdAt
  description
  fields
  id
  name
  ownerId
  slug
  updatedAt
}

input ListScalarWhereInput {
  AND: [ListScalarWhereInput!]
  NOT: [ListScalarWhereInput!]
  OR: [ListScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  fields: JsonFilter
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ListScalarWhereWithAggregatesInput {
  AND: [ListScalarWhereWithAggregatesInput!]
  NOT: [ListScalarWhereWithAggregatesInput!]
  OR: [ListScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  fields: JsonWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  ownerId: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ListSumAggregate {
  id: String
  ownerId: String
}

input ListSumOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

input ListUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  fields: JSON
  items: ItemUpdateManyWithoutListInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutListsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  fields: JSON
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpdateManyWithWhereWithoutOwnerInput {
  data: ListUpdateManyMutationInput!
  where: ListScalarWhereInput!
}

input ListUpdateManyWithoutOwnerInput {
  connect: [ListWhereUniqueInput!]
  connectOrCreate: [ListCreateOrConnectWithoutOwnerInput!]
  create: [ListCreateWithoutOwnerInput!]
  createMany: ListCreateManyOwnerInputEnvelope
  delete: [ListWhereUniqueInput!]
  deleteMany: [ListScalarWhereInput!]
  disconnect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ListUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ListUpdateOneRequiredWithoutItemsInput {
  connect: ListWhereUniqueInput
  connectOrCreate: ListCreateOrConnectWithoutItemsInput
  create: ListCreateWithoutItemsInput
  update: ListUpdateWithoutItemsInput
  upsert: ListUpsertWithoutItemsInput
}

input ListUpdateWithWhereUniqueWithoutOwnerInput {
  data: ListUpdateWithoutOwnerInput!
  where: ListWhereUniqueInput!
}

input ListUpdateWithoutItemsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  fields: JSON
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutListsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpdateWithoutOwnerInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  fields: JSON
  items: ItemUpdateManyWithoutListInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpsertWithWhereUniqueWithoutOwnerInput {
  create: ListCreateWithoutOwnerInput!
  update: ListUpdateWithoutOwnerInput!
  where: ListWhereUniqueInput!
}

input ListUpsertWithoutItemsInput {
  create: ListCreateWithoutItemsInput!
  update: ListUpdateWithoutItemsInput!
}

input ListWhereInput {
  AND: [ListWhereInput!]
  NOT: [ListWhereInput!]
  OR: [ListWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  fields: JsonFilter
  id: StringFilter
  items: ItemListRelationFilter
  name: StringFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ListWhereUniqueInput {
  id: String
  slug: String
}

type Mantra {
  _count: MantraCount
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
  user: User!
}

type MantraAvgAggregate {
  id: String
}

input MantraAvgOrderByAggregateInput {
  id: SortOrder
}

type MantraCount {
  mantras: Int!
}

type MantraCountAggregate {
  _all: Int!
  archivedAt: Int!
  content: Int!
  createdAt: Int!
  id: String!
  updatedAt: Int!
}

input MantraCountOrderByAggregateInput {
  archivedAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MantraCreateInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

input MantraCreateManyInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MantraCreateManyUserInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  id: String
  mantraId: String!
  updatedAt: DateTimeISO
}

input MantraCreateManyUserInputEnvelope {
  data: [MantraCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MantraCreateNestedManyWithoutUserInput {
  connect: [MantraWhereUniqueInput!]
  connectOrCreate: [MantraCreateOrConnectWithoutUserInput!]
  create: [MantraCreateWithoutUserInput!]
  createMany: MantraCreateManyUserInputEnvelope
}

input MantraCreateOrConnectWithoutUserInput {
  create: MantraCreateWithoutUserInput!
  where: MantraWhereUniqueInput!
}

input MantraCreateWithoutUserInput {
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

type MantraGroupBy {
  _avg: MantraAvgAggregate
  _count: MantraCountAggregate
  _max: MantraMaxAggregate
  _min: MantraMinAggregate
  _sum: MantraSumAggregate
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
}

type MantraMaxAggregate {
  archivedAt: DateTimeISO
  content: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MantraMaxOrderByAggregateInput {
  archivedAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type MantraMinAggregate {
  archivedAt: DateTimeISO
  content: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MantraMinOrderByAggregateInput {
  archivedAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MantraOrderByWithAggregationInput {
  _avg: MantraAvgOrderByAggregateInput
  _count: MantraCountOrderByAggregateInput
  _max: MantraMaxOrderByAggregateInput
  _min: MantraMinOrderByAggregateInput
  _sum: MantraSumOrderByAggregateInput
  archivedAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MantraOrderByWithRelationInput {
  archivedAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum MantraScalarFieldEnum {
  archivedAt
  content
  createdAt
  id
  updatedAt
}

input MantraScalarWhereInput {
  AND: [MantraScalarWhereInput!]
  NOT: [MantraScalarWhereInput!]
  OR: [MantraScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mantraId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MantraScalarWhereWithAggregatesInput {
  AND: [MantraScalarWhereWithAggregatesInput!]
  NOT: [MantraScalarWhereWithAggregatesInput!]
  OR: [MantraScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MantraSumAggregate {
  id: String
}

input MantraSumOrderByAggregateInput {
  id: SortOrder
}

input MantraUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MantraUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MantraUpdateManyWithWhereWithoutUserInput {
  data: MantraUpdateManyMutationInput!
  where: MantraScalarWhereInput!
}

input MantraUpdateManyWithoutUserInput {
  connect: [MantraWhereUniqueInput!]
  connectOrCreate: [MantraCreateOrConnectWithoutUserInput!]
  create: [MantraCreateWithoutUserInput!]
  createMany: MantraCreateManyUserInputEnvelope
  delete: [MantraWhereUniqueInput!]
  deleteMany: [MantraScalarWhereInput!]
  disconnect: [MantraWhereUniqueInput!]
  set: [MantraWhereUniqueInput!]
  update: [MantraUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MantraUpdateManyWithWhereWithoutUserInput!]
  upsert: [MantraUpsertWithWhereUniqueWithoutUserInput!]
}

input MantraUpdateWithWhereUniqueWithoutUserInput {
  data: MantraUpdateWithoutUserInput!
  where: MantraWhereUniqueInput!
}

input MantraUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MantraUpsertWithWhereUniqueWithoutUserInput {
  create: MantraCreateWithoutUserInput!
  update: MantraUpdateWithoutUserInput!
  where: MantraWhereUniqueInput!
}

input MantraWhereInput {
  AND: [MantraWhereInput!]
  NOT: [MantraWhereInput!]
  OR: [MantraWhereInput!]
  archivedAt: DateTimeNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input MantraWhereUniqueInput {
  id: String
}

type Metric {
  _count: MetricCount
  applications(cursor: MetricApplicationWhereUniqueInput, distinct: [MetricApplicationScalarFieldEnum!], orderBy: [MetricApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): [MetricApplication!]!
  id: String!
  name: String!
  usages(cursor: MetricUsageWhereUniqueInput, distinct: [MetricUsageScalarFieldEnum!], orderBy: [MetricUsageOrderByWithRelationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): [MetricUsage!]!
}

type MetricApplication {
  act: Act!
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  metric: Metric!
  metricId: String!
  updatedAt: DateTimeISO!
}

input MetricApplicationActIdMetricIdCompoundUniqueInput {
  actId: String!
  metricId: String!
}

type MetricApplicationAvgAggregate {
  actId: Float
  id: String
  metricId: Float
}

input MetricApplicationAvgOrderByAggregateInput {
  actId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

type MetricApplicationCountAggregate {
  _all: Int!
  actId: String!
  archivedAt: Int!
  createdAt: Int!
  id: String!
  metricId: String!
  updatedAt: Int!
}

input MetricApplicationCountOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricId: SortOrder
  updatedAt: SortOrder
}

input MetricApplicationCreateInput {
  act: ActCreateNestedOneWithoutMetricApplicationsInput!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metric: MetricCreateNestedOneWithoutApplicationsInput!
  updatedAt: DateTimeISO
}

input MetricApplicationCreateManyActInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricId: String!
  updatedAt: DateTimeISO
}

input MetricApplicationCreateManyActInputEnvelope {
  data: [MetricApplicationCreateManyActInput!]!
  skipDuplicates: Boolean
}

input MetricApplicationCreateManyInput {
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricId: String!
  updatedAt: DateTimeISO
}

input MetricApplicationCreateManyMetricInput {
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MetricApplicationCreateManyMetricInputEnvelope {
  data: [MetricApplicationCreateManyMetricInput!]!
  skipDuplicates: Boolean
}

input MetricApplicationCreateNestedManyWithoutActInput {
  connect: [MetricApplicationWhereUniqueInput!]
  connectOrCreate: [MetricApplicationCreateOrConnectWithoutActInput!]
  create: [MetricApplicationCreateWithoutActInput!]
  createMany: MetricApplicationCreateManyActInputEnvelope
}

input MetricApplicationCreateNestedManyWithoutMetricInput {
  connect: [MetricApplicationWhereUniqueInput!]
  connectOrCreate: [MetricApplicationCreateOrConnectWithoutMetricInput!]
  create: [MetricApplicationCreateWithoutMetricInput!]
  createMany: MetricApplicationCreateManyMetricInputEnvelope
}

input MetricApplicationCreateOrConnectWithoutActInput {
  create: MetricApplicationCreateWithoutActInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationCreateOrConnectWithoutMetricInput {
  create: MetricApplicationCreateWithoutMetricInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationCreateWithoutActInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metric: MetricCreateNestedOneWithoutApplicationsInput!
  updatedAt: DateTimeISO
}

input MetricApplicationCreateWithoutMetricInput {
  act: ActCreateNestedOneWithoutMetricApplicationsInput!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

type MetricApplicationGroupBy {
  _avg: MetricApplicationAvgAggregate
  _count: MetricApplicationCountAggregate
  _max: MetricApplicationMaxAggregate
  _min: MetricApplicationMinAggregate
  _sum: MetricApplicationSumAggregate
  actId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  metricId: String!
  updatedAt: DateTimeISO!
}

input MetricApplicationListRelationFilter {
  every: MetricApplicationWhereInput
  none: MetricApplicationWhereInput
  some: MetricApplicationWhereInput
}

type MetricApplicationMaxAggregate {
  actId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricId: String
  updatedAt: DateTimeISO
}

input MetricApplicationMaxOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricId: SortOrder
  updatedAt: SortOrder
}

type MetricApplicationMinAggregate {
  actId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricId: String
  updatedAt: DateTimeISO
}

input MetricApplicationMinOrderByAggregateInput {
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricId: SortOrder
  updatedAt: SortOrder
}

input MetricApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

input MetricApplicationOrderByWithAggregationInput {
  _avg: MetricApplicationAvgOrderByAggregateInput
  _count: MetricApplicationCountOrderByAggregateInput
  _max: MetricApplicationMaxOrderByAggregateInput
  _min: MetricApplicationMinOrderByAggregateInput
  _sum: MetricApplicationSumOrderByAggregateInput
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricId: SortOrder
  updatedAt: SortOrder
}

input MetricApplicationOrderByWithRelationInput {
  act: ActOrderByWithRelationInput
  actId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metric: MetricOrderByWithRelationInput
  metricId: SortOrder
  updatedAt: SortOrder
}

enum MetricApplicationScalarFieldEnum {
  actId
  archivedAt
  createdAt
  id
  metricId
  updatedAt
}

input MetricApplicationScalarWhereInput {
  AND: [MetricApplicationScalarWhereInput!]
  NOT: [MetricApplicationScalarWhereInput!]
  OR: [MetricApplicationScalarWhereInput!]
  actId: StringFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  metricId: StringFilter
  updatedAt: DateTimeFilter
}

input MetricApplicationScalarWhereWithAggregatesInput {
  AND: [MetricApplicationScalarWhereWithAggregatesInput!]
  NOT: [MetricApplicationScalarWhereWithAggregatesInput!]
  OR: [MetricApplicationScalarWhereWithAggregatesInput!]
  actId: StringWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  metricId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MetricApplicationSumAggregate {
  actId: String
  id: String
  metricId: String
}

input MetricApplicationSumOrderByAggregateInput {
  actId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

input MetricApplicationUpdateInput {
  act: ActUpdateOneRequiredWithoutMetricApplicationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  metric: MetricUpdateOneRequiredWithoutApplicationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MetricApplicationUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MetricApplicationUpdateManyWithWhereWithoutActInput {
  data: MetricApplicationUpdateManyMutationInput!
  where: MetricApplicationScalarWhereInput!
}

input MetricApplicationUpdateManyWithWhereWithoutMetricInput {
  data: MetricApplicationUpdateManyMutationInput!
  where: MetricApplicationScalarWhereInput!
}

input MetricApplicationUpdateManyWithoutActInput {
  connect: [MetricApplicationWhereUniqueInput!]
  connectOrCreate: [MetricApplicationCreateOrConnectWithoutActInput!]
  create: [MetricApplicationCreateWithoutActInput!]
  createMany: MetricApplicationCreateManyActInputEnvelope
  delete: [MetricApplicationWhereUniqueInput!]
  deleteMany: [MetricApplicationScalarWhereInput!]
  disconnect: [MetricApplicationWhereUniqueInput!]
  set: [MetricApplicationWhereUniqueInput!]
  update: [MetricApplicationUpdateWithWhereUniqueWithoutActInput!]
  updateMany: [MetricApplicationUpdateManyWithWhereWithoutActInput!]
  upsert: [MetricApplicationUpsertWithWhereUniqueWithoutActInput!]
}

input MetricApplicationUpdateManyWithoutMetricInput {
  connect: [MetricApplicationWhereUniqueInput!]
  connectOrCreate: [MetricApplicationCreateOrConnectWithoutMetricInput!]
  create: [MetricApplicationCreateWithoutMetricInput!]
  createMany: MetricApplicationCreateManyMetricInputEnvelope
  delete: [MetricApplicationWhereUniqueInput!]
  deleteMany: [MetricApplicationScalarWhereInput!]
  disconnect: [MetricApplicationWhereUniqueInput!]
  set: [MetricApplicationWhereUniqueInput!]
  update: [MetricApplicationUpdateWithWhereUniqueWithoutMetricInput!]
  updateMany: [MetricApplicationUpdateManyWithWhereWithoutMetricInput!]
  upsert: [MetricApplicationUpsertWithWhereUniqueWithoutMetricInput!]
}

input MetricApplicationUpdateWithWhereUniqueWithoutActInput {
  data: MetricApplicationUpdateWithoutActInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationUpdateWithWhereUniqueWithoutMetricInput {
  data: MetricApplicationUpdateWithoutMetricInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationUpdateWithoutActInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  metric: MetricUpdateOneRequiredWithoutApplicationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MetricApplicationUpdateWithoutMetricInput {
  act: ActUpdateOneRequiredWithoutMetricApplicationsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MetricApplicationUpsertWithWhereUniqueWithoutActInput {
  create: MetricApplicationCreateWithoutActInput!
  update: MetricApplicationUpdateWithoutActInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationUpsertWithWhereUniqueWithoutMetricInput {
  create: MetricApplicationCreateWithoutMetricInput!
  update: MetricApplicationUpdateWithoutMetricInput!
  where: MetricApplicationWhereUniqueInput!
}

input MetricApplicationWhereInput {
  AND: [MetricApplicationWhereInput!]
  NOT: [MetricApplicationWhereInput!]
  OR: [MetricApplicationWhereInput!]
  act: ActRelationFilter
  actId: StringFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  metric: MetricRelationFilter
  metricId: StringFilter
  updatedAt: DateTimeFilter
}

input MetricApplicationWhereUniqueInput {
  actId_metricId: MetricApplicationActIdMetricIdCompoundUniqueInput
  id: String
}

type MetricAvgAggregate {
  id: String
}

input MetricAvgOrderByAggregateInput {
  id: SortOrder
}

type MetricCount {
  applications: Int!
  usages: Int!
}

type MetricCountAggregate {
  _all: Int!
  id: String!
  name: Int!
}

input MetricCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MetricCreateInput {
  applications: MetricApplicationCreateNestedManyWithoutMetricInput
  name: String!
  usages: MetricUsageCreateNestedManyWithoutMetricInput
}

input MetricCreateManyInput {
  id: String
  name: String!
}

input MetricCreateNestedOneWithoutApplicationsInput {
  connect: MetricWhereUniqueInput
  connectOrCreate: MetricCreateOrConnectWithoutApplicationsInput
  create: MetricCreateWithoutApplicationsInput
}

input MetricCreateNestedOneWithoutUsagesInput {
  connect: MetricWhereUniqueInput
  connectOrCreate: MetricCreateOrConnectWithoutUsagesInput
  create: MetricCreateWithoutUsagesInput
}

input MetricCreateOrConnectWithoutApplicationsInput {
  create: MetricCreateWithoutApplicationsInput!
  where: MetricWhereUniqueInput!
}

input MetricCreateOrConnectWithoutUsagesInput {
  create: MetricCreateWithoutUsagesInput!
  where: MetricWhereUniqueInput!
}

input MetricCreateWithoutApplicationsInput {
  name: String!
  usages: MetricUsageCreateNestedManyWithoutMetricInput
}

input MetricCreateWithoutUsagesInput {
  applications: MetricApplicationCreateNestedManyWithoutMetricInput
  name: String!
}

type MetricGroupBy {
  _avg: MetricAvgAggregate
  _count: MetricCountAggregate
  _max: MetricMaxAggregate
  _min: MetricMinAggregate
  _sum: MetricSumAggregate
  id: String!
  name: String!
}

type MetricMaxAggregate {
  id: String
  name: String
}

input MetricMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type MetricMinAggregate {
  id: String
  name: String
}

input MetricMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MetricOrderByWithAggregationInput {
  _avg: MetricAvgOrderByAggregateInput
  _count: MetricCountOrderByAggregateInput
  _max: MetricMaxOrderByAggregateInput
  _min: MetricMinOrderByAggregateInput
  _sum: MetricSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input MetricOrderByWithRelationInput {
  applications: MetricApplicationOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  usages: MetricUsageOrderByRelationAggregateInput
}

type MetricRecord {
  action: Action!
  actionId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  metricUsage: MetricUsage!
  metricUsageId: String!
  updatedAt: DateTimeISO!
  value: Int!
}

type MetricRecordAvgAggregate {
  actionId: Float
  id: String
  metricUsageId: Float
  value: Float
}

input MetricRecordAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  value: SortOrder
}

type MetricRecordCountAggregate {
  _all: Int!
  actionId: String!
  archivedAt: Int!
  createdAt: Int!
  id: String!
  metricUsageId: String!
  updatedAt: Int!
  value: Int!
}

input MetricRecordCountOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input MetricRecordCreateInput {
  action: ActionCreateNestedOneWithoutMetricRecordsInput!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  metricUsage: MetricUsageCreateNestedOneWithoutRecordsInput!
  updatedAt: DateTimeISO
  value: Int!
}

input MetricRecordCreateManyActionInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricUsageId: String!
  updatedAt: DateTimeISO
  value: Int!
}

input MetricRecordCreateManyActionInputEnvelope {
  data: [MetricRecordCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input MetricRecordCreateManyInput {
  actionId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricUsageId: String!
  updatedAt: DateTimeISO
  value: Int!
}

input MetricRecordCreateManyMetricUsageInput {
  actionId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  value: Int!
}

input MetricRecordCreateManyMetricUsageInputEnvelope {
  data: [MetricRecordCreateManyMetricUsageInput!]!
  skipDuplicates: Boolean
}

input MetricRecordCreateNestedManyWithoutActionInput {
  connect: [MetricRecordWhereUniqueInput!]
  connectOrCreate: [MetricRecordCreateOrConnectWithoutActionInput!]
  create: [MetricRecordCreateWithoutActionInput!]
  createMany: MetricRecordCreateManyActionInputEnvelope
}

input MetricRecordCreateNestedManyWithoutMetricUsageInput {
  connect: [MetricRecordWhereUniqueInput!]
  connectOrCreate: [MetricRecordCreateOrConnectWithoutMetricUsageInput!]
  create: [MetricRecordCreateWithoutMetricUsageInput!]
  createMany: MetricRecordCreateManyMetricUsageInputEnvelope
}

input MetricRecordCreateOrConnectWithoutActionInput {
  create: MetricRecordCreateWithoutActionInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordCreateOrConnectWithoutMetricUsageInput {
  create: MetricRecordCreateWithoutMetricUsageInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordCreateWithoutActionInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  metricUsage: MetricUsageCreateNestedOneWithoutRecordsInput!
  updatedAt: DateTimeISO
  value: Int!
}

input MetricRecordCreateWithoutMetricUsageInput {
  action: ActionCreateNestedOneWithoutMetricRecordsInput!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  value: Int!
}

type MetricRecordGroupBy {
  _avg: MetricRecordAvgAggregate
  _count: MetricRecordCountAggregate
  _max: MetricRecordMaxAggregate
  _min: MetricRecordMinAggregate
  _sum: MetricRecordSumAggregate
  actionId: String!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  metricUsageId: String!
  updatedAt: DateTimeISO!
  value: Int!
}

input MetricRecordListRelationFilter {
  every: MetricRecordWhereInput
  none: MetricRecordWhereInput
  some: MetricRecordWhereInput
}

type MetricRecordMaxAggregate {
  actionId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricUsageId: String
  updatedAt: DateTimeISO
  value: Int
}

input MetricRecordMaxOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

type MetricRecordMinAggregate {
  actionId: String
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  metricUsageId: String
  updatedAt: DateTimeISO
  value: Int
}

input MetricRecordMinOrderByAggregateInput {
  actionId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input MetricRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input MetricRecordOrderByWithAggregationInput {
  _avg: MetricRecordAvgOrderByAggregateInput
  _count: MetricRecordCountOrderByAggregateInput
  _max: MetricRecordMaxOrderByAggregateInput
  _min: MetricRecordMinOrderByAggregateInput
  _sum: MetricRecordSumOrderByAggregateInput
  actionId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input MetricRecordOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  archivedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metricUsage: MetricUsageOrderByWithRelationInput
  metricUsageId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

enum MetricRecordScalarFieldEnum {
  actionId
  archivedAt
  createdAt
  id
  metricUsageId
  updatedAt
  value
}

input MetricRecordScalarWhereInput {
  AND: [MetricRecordScalarWhereInput!]
  NOT: [MetricRecordScalarWhereInput!]
  OR: [MetricRecordScalarWhereInput!]
  actionId: StringFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  metricUsageId: StringFilter
  updatedAt: DateTimeFilter
  value: IntFilter
}

input MetricRecordScalarWhereWithAggregatesInput {
  AND: [MetricRecordScalarWhereWithAggregatesInput!]
  NOT: [MetricRecordScalarWhereWithAggregatesInput!]
  OR: [MetricRecordScalarWhereWithAggregatesInput!]
  actionId: StringWithAggregatesFilter
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  metricUsageId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  value: IntWithAggregatesFilter
}

type MetricRecordSumAggregate {
  actionId: String
  id: String
  metricUsageId: String
  value: Int
}

input MetricRecordSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  metricUsageId: SortOrder
  value: SortOrder
}

input MetricRecordUpdateInput {
  action: ActionUpdateOneRequiredWithoutMetricRecordsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  metricUsage: MetricUsageUpdateOneRequiredWithoutRecordsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: IntFieldUpdateOperationsInput
}

input MetricRecordUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: IntFieldUpdateOperationsInput
}

input MetricRecordUpdateManyWithWhereWithoutActionInput {
  data: MetricRecordUpdateManyMutationInput!
  where: MetricRecordScalarWhereInput!
}

input MetricRecordUpdateManyWithWhereWithoutMetricUsageInput {
  data: MetricRecordUpdateManyMutationInput!
  where: MetricRecordScalarWhereInput!
}

input MetricRecordUpdateManyWithoutActionInput {
  connect: [MetricRecordWhereUniqueInput!]
  connectOrCreate: [MetricRecordCreateOrConnectWithoutActionInput!]
  create: [MetricRecordCreateWithoutActionInput!]
  createMany: MetricRecordCreateManyActionInputEnvelope
  delete: [MetricRecordWhereUniqueInput!]
  deleteMany: [MetricRecordScalarWhereInput!]
  disconnect: [MetricRecordWhereUniqueInput!]
  set: [MetricRecordWhereUniqueInput!]
  update: [MetricRecordUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [MetricRecordUpdateManyWithWhereWithoutActionInput!]
  upsert: [MetricRecordUpsertWithWhereUniqueWithoutActionInput!]
}

input MetricRecordUpdateManyWithoutMetricUsageInput {
  connect: [MetricRecordWhereUniqueInput!]
  connectOrCreate: [MetricRecordCreateOrConnectWithoutMetricUsageInput!]
  create: [MetricRecordCreateWithoutMetricUsageInput!]
  createMany: MetricRecordCreateManyMetricUsageInputEnvelope
  delete: [MetricRecordWhereUniqueInput!]
  deleteMany: [MetricRecordScalarWhereInput!]
  disconnect: [MetricRecordWhereUniqueInput!]
  set: [MetricRecordWhereUniqueInput!]
  update: [MetricRecordUpdateWithWhereUniqueWithoutMetricUsageInput!]
  updateMany: [MetricRecordUpdateManyWithWhereWithoutMetricUsageInput!]
  upsert: [MetricRecordUpsertWithWhereUniqueWithoutMetricUsageInput!]
}

input MetricRecordUpdateWithWhereUniqueWithoutActionInput {
  data: MetricRecordUpdateWithoutActionInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordUpdateWithWhereUniqueWithoutMetricUsageInput {
  data: MetricRecordUpdateWithoutMetricUsageInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordUpdateWithoutActionInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  metricUsage: MetricUsageUpdateOneRequiredWithoutRecordsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: IntFieldUpdateOperationsInput
}

input MetricRecordUpdateWithoutMetricUsageInput {
  action: ActionUpdateOneRequiredWithoutMetricRecordsInput
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: IntFieldUpdateOperationsInput
}

input MetricRecordUpsertWithWhereUniqueWithoutActionInput {
  create: MetricRecordCreateWithoutActionInput!
  update: MetricRecordUpdateWithoutActionInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordUpsertWithWhereUniqueWithoutMetricUsageInput {
  create: MetricRecordCreateWithoutMetricUsageInput!
  update: MetricRecordUpdateWithoutMetricUsageInput!
  where: MetricRecordWhereUniqueInput!
}

input MetricRecordWhereInput {
  AND: [MetricRecordWhereInput!]
  NOT: [MetricRecordWhereInput!]
  OR: [MetricRecordWhereInput!]
  action: ActionRelationFilter
  actionId: StringFilter
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  metricUsage: MetricUsageRelationFilter
  metricUsageId: StringFilter
  updatedAt: DateTimeFilter
  value: IntFilter
}

input MetricRecordWhereUniqueInput {
  id: String
}

input MetricRelationFilter {
  is: MetricWhereInput
  isNot: MetricWhereInput
}

enum MetricScalarFieldEnum {
  id
  name
}

input MetricScalarWhereWithAggregatesInput {
  AND: [MetricScalarWhereWithAggregatesInput!]
  NOT: [MetricScalarWhereWithAggregatesInput!]
  OR: [MetricScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type MetricSumAggregate {
  id: String
}

input MetricSumOrderByAggregateInput {
  id: SortOrder
}

input MetricUpdateInput {
  applications: MetricApplicationUpdateManyWithoutMetricInput
  name: StringFieldUpdateOperationsInput
  usages: MetricUsageUpdateManyWithoutMetricInput
}

input MetricUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input MetricUpdateOneRequiredWithoutApplicationsInput {
  connect: MetricWhereUniqueInput
  connectOrCreate: MetricCreateOrConnectWithoutApplicationsInput
  create: MetricCreateWithoutApplicationsInput
  update: MetricUpdateWithoutApplicationsInput
  upsert: MetricUpsertWithoutApplicationsInput
}

input MetricUpdateOneRequiredWithoutUsagesInput {
  connect: MetricWhereUniqueInput
  connectOrCreate: MetricCreateOrConnectWithoutUsagesInput
  create: MetricCreateWithoutUsagesInput
  update: MetricUpdateWithoutUsagesInput
  upsert: MetricUpsertWithoutUsagesInput
}

input MetricUpdateWithoutApplicationsInput {
  name: StringFieldUpdateOperationsInput
  usages: MetricUsageUpdateManyWithoutMetricInput
}

input MetricUpdateWithoutUsagesInput {
  applications: MetricApplicationUpdateManyWithoutMetricInput
  name: StringFieldUpdateOperationsInput
}

input MetricUpsertWithoutApplicationsInput {
  create: MetricCreateWithoutApplicationsInput!
  update: MetricUpdateWithoutApplicationsInput!
}

input MetricUpsertWithoutUsagesInput {
  create: MetricCreateWithoutUsagesInput!
  update: MetricUpdateWithoutUsagesInput!
}

type MetricUsage {
  _count: MetricUsageCount
  archivedAt: DateTimeISO
  habit: Habit!
  habitId: String!
  id: String!
  metric: Metric!
  metricId: String!
  records(cursor: MetricRecordWhereUniqueInput, distinct: [MetricRecordScalarFieldEnum!], orderBy: [MetricRecordOrderByWithRelationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): [MetricRecord!]!
}

type MetricUsageAvgAggregate {
  habitId: String
  id: String
  metricId: Float
}

input MetricUsageAvgOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

type MetricUsageCount {
  records: Int!
}

type MetricUsageCountAggregate {
  _all: Int!
  archivedAt: Int!
  habitId: String!
  id: String!
  metricId: String!
}

input MetricUsageCountOrderByAggregateInput {
  archivedAt: SortOrder
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

input MetricUsageCreateInput {
  archivedAt: DateTimeISO
  habit: HabitCreateNestedOneWithoutMetricUsagesInput!
  id: String
  metric: MetricCreateNestedOneWithoutUsagesInput!
  records: MetricRecordCreateNestedManyWithoutMetricUsageInput
}

input MetricUsageCreateManyHabitInput {
  archivedAt: DateTimeISO
  id: String
  metricId: String!
}

input MetricUsageCreateManyHabitInputEnvelope {
  data: [MetricUsageCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input MetricUsageCreateManyInput {
  archivedAt: DateTimeISO
  habitId: String!
  id: String
  metricId: String!
}

input MetricUsageCreateManyMetricInput {
  archivedAt: DateTimeISO
  habitId: String!
  id: String
}

input MetricUsageCreateManyMetricInputEnvelope {
  data: [MetricUsageCreateManyMetricInput!]!
  skipDuplicates: Boolean
}

input MetricUsageCreateNestedManyWithoutHabitInput {
  connect: [MetricUsageWhereUniqueInput!]
  connectOrCreate: [MetricUsageCreateOrConnectWithoutHabitInput!]
  create: [MetricUsageCreateWithoutHabitInput!]
  createMany: MetricUsageCreateManyHabitInputEnvelope
}

input MetricUsageCreateNestedManyWithoutMetricInput {
  connect: [MetricUsageWhereUniqueInput!]
  connectOrCreate: [MetricUsageCreateOrConnectWithoutMetricInput!]
  create: [MetricUsageCreateWithoutMetricInput!]
  createMany: MetricUsageCreateManyMetricInputEnvelope
}

input MetricUsageCreateNestedOneWithoutRecordsInput {
  connect: MetricUsageWhereUniqueInput
  connectOrCreate: MetricUsageCreateOrConnectWithoutRecordsInput
  create: MetricUsageCreateWithoutRecordsInput
}

input MetricUsageCreateOrConnectWithoutHabitInput {
  create: MetricUsageCreateWithoutHabitInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageCreateOrConnectWithoutMetricInput {
  create: MetricUsageCreateWithoutMetricInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageCreateOrConnectWithoutRecordsInput {
  create: MetricUsageCreateWithoutRecordsInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageCreateWithoutHabitInput {
  archivedAt: DateTimeISO
  id: String
  metric: MetricCreateNestedOneWithoutUsagesInput!
  records: MetricRecordCreateNestedManyWithoutMetricUsageInput
}

input MetricUsageCreateWithoutMetricInput {
  archivedAt: DateTimeISO
  habit: HabitCreateNestedOneWithoutMetricUsagesInput!
  id: String
  records: MetricRecordCreateNestedManyWithoutMetricUsageInput
}

input MetricUsageCreateWithoutRecordsInput {
  archivedAt: DateTimeISO
  habit: HabitCreateNestedOneWithoutMetricUsagesInput!
  id: String
  metric: MetricCreateNestedOneWithoutUsagesInput!
}

type MetricUsageGroupBy {
  _avg: MetricUsageAvgAggregate
  _count: MetricUsageCountAggregate
  _max: MetricUsageMaxAggregate
  _min: MetricUsageMinAggregate
  _sum: MetricUsageSumAggregate
  archivedAt: DateTimeISO
  habitId: String!
  id: String!
  metricId: String!
}

input MetricUsageHabitIdMetricIdCompoundUniqueInput {
  habitId: String!
  metricId: String!
}

input MetricUsageListRelationFilter {
  every: MetricUsageWhereInput
  none: MetricUsageWhereInput
  some: MetricUsageWhereInput
}

type MetricUsageMaxAggregate {
  archivedAt: DateTimeISO
  habitId: String
  id: String
  metricId: String
}

input MetricUsageMaxOrderByAggregateInput {
  archivedAt: SortOrder
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

type MetricUsageMinAggregate {
  archivedAt: DateTimeISO
  habitId: String
  id: String
  metricId: String
}

input MetricUsageMinOrderByAggregateInput {
  archivedAt: SortOrder
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

input MetricUsageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MetricUsageOrderByWithAggregationInput {
  _avg: MetricUsageAvgOrderByAggregateInput
  _count: MetricUsageCountOrderByAggregateInput
  _max: MetricUsageMaxOrderByAggregateInput
  _min: MetricUsageMinOrderByAggregateInput
  _sum: MetricUsageSumOrderByAggregateInput
  archivedAt: SortOrder
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

input MetricUsageOrderByWithRelationInput {
  archivedAt: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  metric: MetricOrderByWithRelationInput
  metricId: SortOrder
  records: MetricRecordOrderByRelationAggregateInput
}

input MetricUsageRelationFilter {
  is: MetricUsageWhereInput
  isNot: MetricUsageWhereInput
}

enum MetricUsageScalarFieldEnum {
  archivedAt
  habitId
  id
  metricId
}

input MetricUsageScalarWhereInput {
  AND: [MetricUsageScalarWhereInput!]
  NOT: [MetricUsageScalarWhereInput!]
  OR: [MetricUsageScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  habitId: StringFilter
  id: StringFilter
  metricId: StringFilter
}

input MetricUsageScalarWhereWithAggregatesInput {
  AND: [MetricUsageScalarWhereWithAggregatesInput!]
  NOT: [MetricUsageScalarWhereWithAggregatesInput!]
  OR: [MetricUsageScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  habitId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  metricId: StringWithAggregatesFilter
}

type MetricUsageSumAggregate {
  habitId: String
  id: String
  metricId: String
}

input MetricUsageSumOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  metricId: SortOrder
}

input MetricUsageUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutMetricUsagesInput
  metric: MetricUpdateOneRequiredWithoutUsagesInput
  records: MetricRecordUpdateManyWithoutMetricUsageInput
}

input MetricUsageUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
}

input MetricUsageUpdateManyWithWhereWithoutHabitInput {
  data: MetricUsageUpdateManyMutationInput!
  where: MetricUsageScalarWhereInput!
}

input MetricUsageUpdateManyWithWhereWithoutMetricInput {
  data: MetricUsageUpdateManyMutationInput!
  where: MetricUsageScalarWhereInput!
}

input MetricUsageUpdateManyWithoutHabitInput {
  connect: [MetricUsageWhereUniqueInput!]
  connectOrCreate: [MetricUsageCreateOrConnectWithoutHabitInput!]
  create: [MetricUsageCreateWithoutHabitInput!]
  createMany: MetricUsageCreateManyHabitInputEnvelope
  delete: [MetricUsageWhereUniqueInput!]
  deleteMany: [MetricUsageScalarWhereInput!]
  disconnect: [MetricUsageWhereUniqueInput!]
  set: [MetricUsageWhereUniqueInput!]
  update: [MetricUsageUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [MetricUsageUpdateManyWithWhereWithoutHabitInput!]
  upsert: [MetricUsageUpsertWithWhereUniqueWithoutHabitInput!]
}

input MetricUsageUpdateManyWithoutMetricInput {
  connect: [MetricUsageWhereUniqueInput!]
  connectOrCreate: [MetricUsageCreateOrConnectWithoutMetricInput!]
  create: [MetricUsageCreateWithoutMetricInput!]
  createMany: MetricUsageCreateManyMetricInputEnvelope
  delete: [MetricUsageWhereUniqueInput!]
  deleteMany: [MetricUsageScalarWhereInput!]
  disconnect: [MetricUsageWhereUniqueInput!]
  set: [MetricUsageWhereUniqueInput!]
  update: [MetricUsageUpdateWithWhereUniqueWithoutMetricInput!]
  updateMany: [MetricUsageUpdateManyWithWhereWithoutMetricInput!]
  upsert: [MetricUsageUpsertWithWhereUniqueWithoutMetricInput!]
}

input MetricUsageUpdateOneRequiredWithoutRecordsInput {
  connect: MetricUsageWhereUniqueInput
  connectOrCreate: MetricUsageCreateOrConnectWithoutRecordsInput
  create: MetricUsageCreateWithoutRecordsInput
  update: MetricUsageUpdateWithoutRecordsInput
  upsert: MetricUsageUpsertWithoutRecordsInput
}

input MetricUsageUpdateWithWhereUniqueWithoutHabitInput {
  data: MetricUsageUpdateWithoutHabitInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageUpdateWithWhereUniqueWithoutMetricInput {
  data: MetricUsageUpdateWithoutMetricInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageUpdateWithoutHabitInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  metric: MetricUpdateOneRequiredWithoutUsagesInput
  records: MetricRecordUpdateManyWithoutMetricUsageInput
}

input MetricUsageUpdateWithoutMetricInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutMetricUsagesInput
  records: MetricRecordUpdateManyWithoutMetricUsageInput
}

input MetricUsageUpdateWithoutRecordsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutMetricUsagesInput
  metric: MetricUpdateOneRequiredWithoutUsagesInput
}

input MetricUsageUpsertWithWhereUniqueWithoutHabitInput {
  create: MetricUsageCreateWithoutHabitInput!
  update: MetricUsageUpdateWithoutHabitInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageUpsertWithWhereUniqueWithoutMetricInput {
  create: MetricUsageCreateWithoutMetricInput!
  update: MetricUsageUpdateWithoutMetricInput!
  where: MetricUsageWhereUniqueInput!
}

input MetricUsageUpsertWithoutRecordsInput {
  create: MetricUsageCreateWithoutRecordsInput!
  update: MetricUsageUpdateWithoutRecordsInput!
}

input MetricUsageWhereInput {
  AND: [MetricUsageWhereInput!]
  NOT: [MetricUsageWhereInput!]
  OR: [MetricUsageWhereInput!]
  archivedAt: DateTimeNullableFilter
  habit: HabitRelationFilter
  habitId: StringFilter
  id: StringFilter
  metric: MetricRelationFilter
  metricId: StringFilter
  records: MetricRecordListRelationFilter
}

input MetricUsageWhereUniqueInput {
  habitId_metricId: MetricUsageHabitIdMetricIdCompoundUniqueInput
  id: String
}

input MetricWhereInput {
  AND: [MetricWhereInput!]
  NOT: [MetricWhereInput!]
  OR: [MetricWhereInput!]
  applications: MetricApplicationListRelationFilter
  id: StringFilter
  name: StringFilter
  usages: MetricUsageListRelationFilter
}

input MetricWhereUniqueInput {
  id: String
  name: String
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createAct(data: ActCreateInput!): Act!
  createAction(data: ActionCreateInput!): Action!
  createActionSchedule(data: ActionScheduleCreateInput!): ActionSchedule!
  createActionScheduleTemplate(data: ActionScheduleTemplateCreateInput!): ActionScheduleTemplate!
  createAuthor(data: AuthorCreateInput!): Author!
  createAuthorship(data: AuthorshipCreateInput!): Authorship!
  createBelief(data: BeliefCreateInput!): Belief!
  createBook(data: BookCreateInput!): Book!
  createBookReview(data: BookReviewCreateInput!): BookReview!
  createBookshelf(data: BookshelfCreateInput!): Bookshelf!
  createCalendar(data: CalendarCreateInput!): Calendar!
  createCalendarEvent(data: CalendarEventCreateInput!): CalendarEvent!
  createCategorization(data: CategorizationCreateInput!): Categorization!
  createCategory(data: CategoryCreateInput!): Category!
  createDashboard(data: DashboardCreateInput!): Dashboard!
  createGoal(data: GoalCreateInput!): Goal!
  createHabit(data: HabitCreateInput!): Habit!
  createIdentity(data: IdentityCreateInput!): Identity!
  createIdentityActRelation(data: IdentityActRelationCreateInput!): IdentityActRelation!
  createItem(data: ItemCreateInput!): Item!
  createList(data: ListCreateInput!): List!
  createMantra(data: MantraCreateInput!): Mantra!
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAct(data: [ActCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionSchedule(data: [ActionScheduleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionScheduleTemplate(data: [ActionScheduleTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAuthor(data: [AuthorCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAuthorship(data: [AuthorshipCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBelief(data: [BeliefCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBook(data: [BookCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBookReview(data: [BookReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBookshelf(data: [BookshelfCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendar(data: [CalendarCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendarEvent(data: [CalendarEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCategorization(data: [CategorizationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyDashboard(data: [DashboardCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyGoal(data: [GoalCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyHabit(data: [HabitCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentity(data: [IdentityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentityActRelation(data: [IdentityActRelationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyItem(data: [ItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyList(data: [ListCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMantra(data: [MantraCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMetric(data: [MetricCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMetricApplication(data: [MetricApplicationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMetricRecord(data: [MetricRecordCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMetricUsage(data: [MetricUsageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNote(data: [NoteCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotebook(data: [NotebookCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotebookUserPermission(data: [NotebookUserPermissionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReading(data: [ReadingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRedirect(data: [RedirectCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRoutine(data: [RoutineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRoutineHabit(data: [RoutineHabitCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyScheduleTemplate(data: [ScheduleTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShelving(data: [ShelvingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyValue(data: [ValueCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createMetric(data: MetricCreateInput!): Metric!
  createMetricApplication(data: MetricApplicationCreateInput!): MetricApplication!
  createMetricRecord(data: MetricRecordCreateInput!): MetricRecord!
  createMetricUsage(data: MetricUsageCreateInput!): MetricUsage!
  createNote(data: NoteCreateInput!): Note!
  createNotebook(data: NotebookCreateInput!): Notebook!
  createNotebookUserPermission(data: NotebookUserPermissionCreateInput!): NotebookUserPermission!
  createReading(data: ReadingCreateInput!): Reading!
  createRedirect(data: RedirectCreateInput!): Redirect!
  createRoutine(data: RoutineCreateInput!): Routine!
  createRoutineHabit(data: RoutineHabitCreateInput!): RoutineHabit!
  createScheduleTemplate(data: ScheduleTemplateCreateInput!): ScheduleTemplate!
  createShelving(data: ShelvingCreateInput!): Shelving!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  createValue(data: ValueCreateInput!): Value!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAct(where: ActWhereUniqueInput!): Act
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionSchedule(where: ActionScheduleWhereUniqueInput!): ActionSchedule
  deleteActionScheduleTemplate(where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthorship(where: AuthorshipWhereUniqueInput!): Authorship
  deleteBelief(where: BeliefWhereUniqueInput!): Belief
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteBookReview(where: BookReviewWhereUniqueInput!): BookReview
  deleteBookshelf(where: BookshelfWhereUniqueInput!): Bookshelf
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  deleteCategorization(where: CategorizationWhereUniqueInput!): Categorization
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteDashboard(where: DashboardWhereUniqueInput!): Dashboard
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteHabit(where: HabitWhereUniqueInput!): Habit
  deleteIdentity(where: IdentityWhereUniqueInput!): Identity
  deleteIdentityActRelation(where: IdentityActRelationWhereUniqueInput!): IdentityActRelation
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteList(where: ListWhereUniqueInput!): List
  deleteMantra(where: MantraWhereUniqueInput!): Mantra
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyAct(where: ActWhereInput): AffectedRowsOutput!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyActionSchedule(where: ActionScheduleWhereInput): AffectedRowsOutput!
  deleteManyActionScheduleTemplate(where: ActionScheduleTemplateWhereInput): AffectedRowsOutput!
  deleteManyAuthor(where: AuthorWhereInput): AffectedRowsOutput!
  deleteManyAuthorship(where: AuthorshipWhereInput): AffectedRowsOutput!
  deleteManyBelief(where: BeliefWhereInput): AffectedRowsOutput!
  deleteManyBook(where: BookWhereInput): AffectedRowsOutput!
  deleteManyBookReview(where: BookReviewWhereInput): AffectedRowsOutput!
  deleteManyBookshelf(where: BookshelfWhereInput): AffectedRowsOutput!
  deleteManyCalendar(where: CalendarWhereInput): AffectedRowsOutput!
  deleteManyCalendarEvent(where: CalendarEventWhereInput): AffectedRowsOutput!
  deleteManyCategorization(where: CategorizationWhereInput): AffectedRowsOutput!
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyDashboard(where: DashboardWhereInput): AffectedRowsOutput!
  deleteManyGoal(where: GoalWhereInput): AffectedRowsOutput!
  deleteManyHabit(where: HabitWhereInput): AffectedRowsOutput!
  deleteManyIdentity(where: IdentityWhereInput): AffectedRowsOutput!
  deleteManyIdentityActRelation(where: IdentityActRelationWhereInput): AffectedRowsOutput!
  deleteManyItem(where: ItemWhereInput): AffectedRowsOutput!
  deleteManyList(where: ListWhereInput): AffectedRowsOutput!
  deleteManyMantra(where: MantraWhereInput): AffectedRowsOutput!
  deleteManyMetric(where: MetricWhereInput): AffectedRowsOutput!
  deleteManyMetricApplication(where: MetricApplicationWhereInput): AffectedRowsOutput!
  deleteManyMetricRecord(where: MetricRecordWhereInput): AffectedRowsOutput!
  deleteManyMetricUsage(where: MetricUsageWhereInput): AffectedRowsOutput!
  deleteManyNote(where: NoteWhereInput): AffectedRowsOutput!
  deleteManyNotebook(where: NotebookWhereInput): AffectedRowsOutput!
  deleteManyNotebookUserPermission(where: NotebookUserPermissionWhereInput): AffectedRowsOutput!
  deleteManyReading(where: ReadingWhereInput): AffectedRowsOutput!
  deleteManyRedirect(where: RedirectWhereInput): AffectedRowsOutput!
  deleteManyRoutine(where: RoutineWhereInput): AffectedRowsOutput!
  deleteManyRoutineHabit(where: RoutineHabitWhereInput): AffectedRowsOutput!
  deleteManyScheduleTemplate(where: ScheduleTemplateWhereInput): AffectedRowsOutput!
  deleteManyShelving(where: ShelvingWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyValue(where: ValueWhereInput): AffectedRowsOutput!
  deleteMetric(where: MetricWhereUniqueInput!): Metric
  deleteMetricApplication(where: MetricApplicationWhereUniqueInput!): MetricApplication
  deleteMetricRecord(where: MetricRecordWhereUniqueInput!): MetricRecord
  deleteMetricUsage(where: MetricUsageWhereUniqueInput!): MetricUsage
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotebook(where: NotebookWhereUniqueInput!): Notebook
  deleteNotebookUserPermission(where: NotebookUserPermissionWhereUniqueInput!): NotebookUserPermission
  deleteReading(where: ReadingWhereUniqueInput!): Reading
  deleteRedirect(where: RedirectWhereUniqueInput!): Redirect
  deleteRoutine(where: RoutineWhereUniqueInput!): Routine
  deleteRoutineHabit(where: RoutineHabitWhereUniqueInput!): RoutineHabit
  deleteScheduleTemplate(where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  deleteShelving(where: ShelvingWhereUniqueInput!): Shelving
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  deleteValue(where: ValueWhereUniqueInput!): Value
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateAct(data: ActUpdateInput!, where: ActWhereUniqueInput!): Act
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionSchedule(data: ActionScheduleUpdateInput!, where: ActionScheduleWhereUniqueInput!): ActionSchedule
  updateActionScheduleTemplate(data: ActionScheduleTemplateUpdateInput!, where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateAuthorship(data: AuthorshipUpdateInput!, where: AuthorshipWhereUniqueInput!): Authorship
  updateBelief(data: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateBookReview(data: BookReviewUpdateInput!, where: BookReviewWhereUniqueInput!): BookReview
  updateBookshelf(data: BookshelfUpdateInput!, where: BookshelfWhereUniqueInput!): Bookshelf
  updateCalendar(data: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar
  updateCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent
  updateCategorization(data: CategorizationUpdateInput!, where: CategorizationWhereUniqueInput!): Categorization
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateDashboard(data: DashboardUpdateInput!, where: DashboardWhereUniqueInput!): Dashboard
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity
  updateIdentityActRelation(data: IdentityActRelationUpdateInput!, where: IdentityActRelationWhereUniqueInput!): IdentityActRelation
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateMantra(data: MantraUpdateInput!, where: MantraWhereUniqueInput!): Mantra
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyAct(data: ActUpdateManyMutationInput!, where: ActWhereInput): AffectedRowsOutput!
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyActionSchedule(data: ActionScheduleUpdateManyMutationInput!, where: ActionScheduleWhereInput): AffectedRowsOutput!
  updateManyActionScheduleTemplate(data: ActionScheduleTemplateUpdateManyMutationInput!, where: ActionScheduleTemplateWhereInput): AffectedRowsOutput!
  updateManyAuthor(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): AffectedRowsOutput!
  updateManyAuthorship(data: AuthorshipUpdateManyMutationInput!, where: AuthorshipWhereInput): AffectedRowsOutput!
  updateManyBelief(data: BeliefUpdateManyMutationInput!, where: BeliefWhereInput): AffectedRowsOutput!
  updateManyBook(data: BookUpdateManyMutationInput!, where: BookWhereInput): AffectedRowsOutput!
  updateManyBookReview(data: BookReviewUpdateManyMutationInput!, where: BookReviewWhereInput): AffectedRowsOutput!
  updateManyBookshelf(data: BookshelfUpdateManyMutationInput!, where: BookshelfWhereInput): AffectedRowsOutput!
  updateManyCalendar(data: CalendarUpdateManyMutationInput!, where: CalendarWhereInput): AffectedRowsOutput!
  updateManyCalendarEvent(data: CalendarEventUpdateManyMutationInput!, where: CalendarEventWhereInput): AffectedRowsOutput!
  updateManyCategorization(data: CategorizationUpdateManyMutationInput!, where: CategorizationWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyDashboard(data: DashboardUpdateManyMutationInput!, where: DashboardWhereInput): AffectedRowsOutput!
  updateManyGoal(data: GoalUpdateManyMutationInput!, where: GoalWhereInput): AffectedRowsOutput!
  updateManyHabit(data: HabitUpdateManyMutationInput!, where: HabitWhereInput): AffectedRowsOutput!
  updateManyIdentity(data: IdentityUpdateManyMutationInput!, where: IdentityWhereInput): AffectedRowsOutput!
  updateManyIdentityActRelation(data: IdentityActRelationUpdateManyMutationInput!, where: IdentityActRelationWhereInput): AffectedRowsOutput!
  updateManyItem(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): AffectedRowsOutput!
  updateManyList(data: ListUpdateManyMutationInput!, where: ListWhereInput): AffectedRowsOutput!
  updateManyMantra(data: MantraUpdateManyMutationInput!, where: MantraWhereInput): AffectedRowsOutput!
  updateManyMetric(data: MetricUpdateManyMutationInput!, where: MetricWhereInput): AffectedRowsOutput!
  updateManyMetricApplication(data: MetricApplicationUpdateManyMutationInput!, where: MetricApplicationWhereInput): AffectedRowsOutput!
  updateManyMetricRecord(data: MetricRecordUpdateManyMutationInput!, where: MetricRecordWhereInput): AffectedRowsOutput!
  updateManyMetricUsage(data: MetricUsageUpdateManyMutationInput!, where: MetricUsageWhereInput): AffectedRowsOutput!
  updateManyNote(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): AffectedRowsOutput!
  updateManyNotebook(data: NotebookUpdateManyMutationInput!, where: NotebookWhereInput): AffectedRowsOutput!
  updateManyNotebookUserPermission(data: NotebookUserPermissionUpdateManyMutationInput!, where: NotebookUserPermissionWhereInput): AffectedRowsOutput!
  updateManyReading(data: ReadingUpdateManyMutationInput!, where: ReadingWhereInput): AffectedRowsOutput!
  updateManyRedirect(data: RedirectUpdateManyMutationInput!, where: RedirectWhereInput): AffectedRowsOutput!
  updateManyRoutine(data: RoutineUpdateManyMutationInput!, where: RoutineWhereInput): AffectedRowsOutput!
  updateManyRoutineHabit(data: RoutineHabitUpdateManyMutationInput!, where: RoutineHabitWhereInput): AffectedRowsOutput!
  updateManyScheduleTemplate(data: ScheduleTemplateUpdateManyMutationInput!, where: ScheduleTemplateWhereInput): AffectedRowsOutput!
  updateManyShelving(data: ShelvingUpdateManyMutationInput!, where: ShelvingWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyValue(data: ValueUpdateManyMutationInput!, where: ValueWhereInput): AffectedRowsOutput!
  updateMetric(data: MetricUpdateInput!, where: MetricWhereUniqueInput!): Metric
  updateMetricApplication(data: MetricApplicationUpdateInput!, where: MetricApplicationWhereUniqueInput!): MetricApplication
  updateMetricRecord(data: MetricRecordUpdateInput!, where: MetricRecordWhereUniqueInput!): MetricRecord
  updateMetricUsage(data: MetricUsageUpdateInput!, where: MetricUsageWhereUniqueInput!): MetricUsage
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateNotebook(data: NotebookUpdateInput!, where: NotebookWhereUniqueInput!): Notebook
  updateNotebookUserPermission(data: NotebookUserPermissionUpdateInput!, where: NotebookUserPermissionWhereUniqueInput!): NotebookUserPermission
  updateReading(data: ReadingUpdateInput!, where: ReadingWhereUniqueInput!): Reading
  updateRedirect(data: RedirectUpdateInput!, where: RedirectWhereUniqueInput!): Redirect
  updateRoutine(data: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine
  updateRoutineHabit(data: RoutineHabitUpdateInput!, where: RoutineHabitWhereUniqueInput!): RoutineHabit
  updateScheduleTemplate(data: ScheduleTemplateUpdateInput!, where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  updateShelving(data: ShelvingUpdateInput!, where: ShelvingWhereUniqueInput!): Shelving
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateValue(data: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertAct(create: ActCreateInput!, update: ActUpdateInput!, where: ActWhereUniqueInput!): Act!
  upsertAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertActionSchedule(create: ActionScheduleCreateInput!, update: ActionScheduleUpdateInput!, where: ActionScheduleWhereUniqueInput!): ActionSchedule!
  upsertActionScheduleTemplate(create: ActionScheduleTemplateCreateInput!, update: ActionScheduleTemplateUpdateInput!, where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate!
  upsertAuthor(create: AuthorCreateInput!, update: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  upsertAuthorship(create: AuthorshipCreateInput!, update: AuthorshipUpdateInput!, where: AuthorshipWhereUniqueInput!): Authorship!
  upsertBelief(create: BeliefCreateInput!, update: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief!
  upsertBook(create: BookCreateInput!, update: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
  upsertBookReview(create: BookReviewCreateInput!, update: BookReviewUpdateInput!, where: BookReviewWhereUniqueInput!): BookReview!
  upsertBookshelf(create: BookshelfCreateInput!, update: BookshelfUpdateInput!, where: BookshelfWhereUniqueInput!): Bookshelf!
  upsertCalendar(create: CalendarCreateInput!, update: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar!
  upsertCalendarEvent(create: CalendarEventCreateInput!, update: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  upsertCategorization(create: CategorizationCreateInput!, update: CategorizationUpdateInput!, where: CategorizationWhereUniqueInput!): Categorization!
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertDashboard(create: DashboardCreateInput!, update: DashboardUpdateInput!, where: DashboardWhereUniqueInput!): Dashboard!
  upsertGoal(create: GoalCreateInput!, update: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal!
  upsertHabit(create: HabitCreateInput!, update: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  upsertIdentity(create: IdentityCreateInput!, update: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity!
  upsertIdentityActRelation(create: IdentityActRelationCreateInput!, update: IdentityActRelationUpdateInput!, where: IdentityActRelationWhereUniqueInput!): IdentityActRelation!
  upsertItem(create: ItemCreateInput!, update: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item!
  upsertList(create: ListCreateInput!, update: ListUpdateInput!, where: ListWhereUniqueInput!): List!
  upsertMantra(create: MantraCreateInput!, update: MantraUpdateInput!, where: MantraWhereUniqueInput!): Mantra!
  upsertMetric(create: MetricCreateInput!, update: MetricUpdateInput!, where: MetricWhereUniqueInput!): Metric!
  upsertMetricApplication(create: MetricApplicationCreateInput!, update: MetricApplicationUpdateInput!, where: MetricApplicationWhereUniqueInput!): MetricApplication!
  upsertMetricRecord(create: MetricRecordCreateInput!, update: MetricRecordUpdateInput!, where: MetricRecordWhereUniqueInput!): MetricRecord!
  upsertMetricUsage(create: MetricUsageCreateInput!, update: MetricUsageUpdateInput!, where: MetricUsageWhereUniqueInput!): MetricUsage!
  upsertNote(create: NoteCreateInput!, update: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note!
  upsertNotebook(create: NotebookCreateInput!, update: NotebookUpdateInput!, where: NotebookWhereUniqueInput!): Notebook!
  upsertNotebookUserPermission(create: NotebookUserPermissionCreateInput!, update: NotebookUserPermissionUpdateInput!, where: NotebookUserPermissionWhereUniqueInput!): NotebookUserPermission!
  upsertReading(create: ReadingCreateInput!, update: ReadingUpdateInput!, where: ReadingWhereUniqueInput!): Reading!
  upsertRedirect(create: RedirectCreateInput!, update: RedirectUpdateInput!, where: RedirectWhereUniqueInput!): Redirect!
  upsertRoutine(create: RoutineCreateInput!, update: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine!
  upsertRoutineHabit(create: RoutineHabitCreateInput!, update: RoutineHabitUpdateInput!, where: RoutineHabitWhereUniqueInput!): RoutineHabit!
  upsertScheduleTemplate(create: ScheduleTemplateCreateInput!, update: ScheduleTemplateUpdateInput!, where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate!
  upsertShelving(create: ShelvingCreateInput!, update: ShelvingUpdateInput!, where: ShelvingWhereUniqueInput!): Shelving!
  upsertTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertValue(create: ValueCreateInput!, update: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTime!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumCalendarProviderNullableFilter {
  equals: CalendarProvider
  in: [CalendarProvider!]
  not: NestedEnumCalendarProviderNullableFilter
  notIn: [CalendarProvider!]
}

input NestedEnumCalendarProviderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumCalendarProviderNullableFilter
  _min: NestedEnumCalendarProviderNullableFilter
  equals: CalendarProvider
  in: [CalendarProvider!]
  not: NestedEnumCalendarProviderNullableWithAggregatesFilter
  notIn: [CalendarProvider!]
}

input NestedEnumFREQUENCYFilter {
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYFilter
  notIn: [FREQUENCY!]
}

input NestedEnumFREQUENCYWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFREQUENCYFilter
  _min: NestedEnumFREQUENCYFilter
  equals: FREQUENCY
  in: [FREQUENCY!]
  not: NestedEnumFREQUENCYWithAggregatesFilter
  notIn: [FREQUENCY!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  equals: JSON
  not: JSON
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Note {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO!
  id: String!
  isPublic: Boolean!
  notebook: Notebook!
  notebookId: String!
  title: String
  updatedAt: DateTimeISO!
}

type NoteAvgAggregate {
  id: String
  notebookId: Float
}

input NoteAvgOrderByAggregateInput {
  id: SortOrder
  notebookId: SortOrder
}

type NoteCountAggregate {
  _all: Int!
  archivedAt: Int!
  body: Int!
  createdAt: Int!
  id: String!
  isPublic: Int!
  notebookId: String!
  title: Int!
  updatedAt: Int!
}

input NoteCountOrderByAggregateInput {
  archivedAt: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notebookId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NoteCreateInput {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  isPublic: Boolean
  notebook: NotebookCreateNestedOneWithoutNotesInput!
  title: String
  updatedAt: DateTimeISO
}

input NoteCreateManyInput {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  notebookId: String!
  title: String
  updatedAt: DateTimeISO
}

input NoteCreateManyNotebookInput {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  title: String
  updatedAt: DateTimeISO
}

input NoteCreateManyNotebookInputEnvelope {
  data: [NoteCreateManyNotebookInput!]!
  skipDuplicates: Boolean
}

input NoteCreateNestedManyWithoutNotebookInput {
  connect: [NoteWhereUniqueInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutNotebookInput!]
  create: [NoteCreateWithoutNotebookInput!]
  createMany: NoteCreateManyNotebookInputEnvelope
}

input NoteCreateOrConnectWithoutNotebookInput {
  create: NoteCreateWithoutNotebookInput!
  where: NoteWhereUniqueInput!
}

input NoteCreateWithoutNotebookInput {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  isPublic: Boolean
  title: String
  updatedAt: DateTimeISO
}

type NoteGroupBy {
  _avg: NoteAvgAggregate
  _count: NoteCountAggregate
  _max: NoteMaxAggregate
  _min: NoteMinAggregate
  _sum: NoteSumAggregate
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO!
  id: String!
  isPublic: Boolean!
  notebookId: String!
  title: String
  updatedAt: DateTimeISO!
}

input NoteListRelationFilter {
  every: NoteWhereInput
  none: NoteWhereInput
  some: NoteWhereInput
}

type NoteMaxAggregate {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  notebookId: String
  title: String
  updatedAt: DateTimeISO
}

input NoteMaxOrderByAggregateInput {
  archivedAt: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notebookId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type NoteMinAggregate {
  archivedAt: DateTimeISO
  body: String
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  notebookId: String
  title: String
  updatedAt: DateTimeISO
}

input NoteMinOrderByAggregateInput {
  archivedAt: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notebookId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input NoteOrderByWithAggregationInput {
  _avg: NoteAvgOrderByAggregateInput
  _count: NoteCountOrderByAggregateInput
  _max: NoteMaxOrderByAggregateInput
  _min: NoteMinOrderByAggregateInput
  _sum: NoteSumOrderByAggregateInput
  archivedAt: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notebookId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NoteOrderByWithRelationInput {
  archivedAt: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notebook: NotebookOrderByWithRelationInput
  notebookId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum NoteScalarFieldEnum {
  archivedAt
  body
  createdAt
  id
  isPublic
  notebookId
  title
  updatedAt
}

input NoteScalarWhereInput {
  AND: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  body: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublic: BoolFilter
  notebookId: StringFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
}

input NoteScalarWhereWithAggregatesInput {
  AND: [NoteScalarWhereWithAggregatesInput!]
  NOT: [NoteScalarWhereWithAggregatesInput!]
  OR: [NoteScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  body: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  notebookId: StringWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type NoteSumAggregate {
  id: String
  notebookId: String
}

input NoteSumOrderByAggregateInput {
  id: SortOrder
  notebookId: SortOrder
}

input NoteUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  body: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  notebook: NotebookUpdateOneRequiredWithoutNotesInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  body: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateManyWithWhereWithoutNotebookInput {
  data: NoteUpdateManyMutationInput!
  where: NoteScalarWhereInput!
}

input NoteUpdateManyWithoutNotebookInput {
  connect: [NoteWhereUniqueInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutNotebookInput!]
  create: [NoteCreateWithoutNotebookInput!]
  createMany: NoteCreateManyNotebookInputEnvelope
  delete: [NoteWhereUniqueInput!]
  deleteMany: [NoteScalarWhereInput!]
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutNotebookInput!]
  updateMany: [NoteUpdateManyWithWhereWithoutNotebookInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutNotebookInput!]
}

input NoteUpdateWithWhereUniqueWithoutNotebookInput {
  data: NoteUpdateWithoutNotebookInput!
  where: NoteWhereUniqueInput!
}

input NoteUpdateWithoutNotebookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  body: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpsertWithWhereUniqueWithoutNotebookInput {
  create: NoteCreateWithoutNotebookInput!
  update: NoteUpdateWithoutNotebookInput!
  where: NoteWhereUniqueInput!
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  archivedAt: DateTimeNullableFilter
  body: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublic: BoolFilter
  notebook: NotebookRelationFilter
  notebookId: StringFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
}

input NoteWhereUniqueInput {
  id: String
}

type Notebook {
  _count: NotebookCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  isPublic: Boolean!
  notes(cursor: NoteWhereUniqueInput, distinct: [NoteScalarFieldEnum!], orderBy: [NoteOrderByWithRelationInput!], skip: Int, take: Int, where: NoteWhereInput): [Note!]!
  owner: User!
  ownerId: String!
  title: String!
  updatedAt: DateTimeISO!
  userPermissions(cursor: NotebookUserPermissionWhereUniqueInput, distinct: [NotebookUserPermissionScalarFieldEnum!], orderBy: [NotebookUserPermissionOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): [NotebookUserPermission!]!
}

type NotebookAvgAggregate {
  id: String
  ownerId: Float
}

input NotebookAvgOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

type NotebookCount {
  notes: Int!
  userPermissions: Int!
}

type NotebookCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  id: String!
  isPublic: Int!
  ownerId: String!
  title: Int!
  updatedAt: Int!
}

input NotebookCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NotebookCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  notes: NoteCreateNestedManyWithoutNotebookInput
  owner: UserCreateNestedOneWithoutNotebooksInput!
  title: String!
  updatedAt: DateTimeISO
  userPermissions: NotebookUserPermissionCreateNestedManyWithoutNotebookInput
}

input NotebookCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  ownerId: String!
  title: String!
  updatedAt: DateTimeISO
}

input NotebookCreateManyOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input NotebookCreateManyOwnerInputEnvelope {
  data: [NotebookCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input NotebookCreateNestedManyWithoutOwnerInput {
  connect: [NotebookWhereUniqueInput!]
  connectOrCreate: [NotebookCreateOrConnectWithoutOwnerInput!]
  create: [NotebookCreateWithoutOwnerInput!]
  createMany: NotebookCreateManyOwnerInputEnvelope
}

input NotebookCreateNestedOneWithoutNotesInput {
  connect: NotebookWhereUniqueInput
  connectOrCreate: NotebookCreateOrConnectWithoutNotesInput
  create: NotebookCreateWithoutNotesInput
}

input NotebookCreateNestedOneWithoutUserPermissionsInput {
  connect: NotebookWhereUniqueInput
  connectOrCreate: NotebookCreateOrConnectWithoutUserPermissionsInput
  create: NotebookCreateWithoutUserPermissionsInput
}

input NotebookCreateOrConnectWithoutNotesInput {
  create: NotebookCreateWithoutNotesInput!
  where: NotebookWhereUniqueInput!
}

input NotebookCreateOrConnectWithoutOwnerInput {
  create: NotebookCreateWithoutOwnerInput!
  where: NotebookWhereUniqueInput!
}

input NotebookCreateOrConnectWithoutUserPermissionsInput {
  create: NotebookCreateWithoutUserPermissionsInput!
  where: NotebookWhereUniqueInput!
}

input NotebookCreateWithoutNotesInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  owner: UserCreateNestedOneWithoutNotebooksInput!
  title: String!
  updatedAt: DateTimeISO
  userPermissions: NotebookUserPermissionCreateNestedManyWithoutNotebookInput
}

input NotebookCreateWithoutOwnerInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  notes: NoteCreateNestedManyWithoutNotebookInput
  title: String!
  updatedAt: DateTimeISO
  userPermissions: NotebookUserPermissionCreateNestedManyWithoutNotebookInput
}

input NotebookCreateWithoutUserPermissionsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  isPublic: Boolean
  notes: NoteCreateNestedManyWithoutNotebookInput
  owner: UserCreateNestedOneWithoutNotebooksInput!
  title: String!
  updatedAt: DateTimeISO
}

type NotebookGroupBy {
  _avg: NotebookAvgAggregate
  _count: NotebookCountAggregate
  _max: NotebookMaxAggregate
  _min: NotebookMinAggregate
  _sum: NotebookSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  isPublic: Boolean!
  ownerId: String!
  title: String!
  updatedAt: DateTimeISO!
}

input NotebookListRelationFilter {
  every: NotebookWhereInput
  none: NotebookWhereInput
  some: NotebookWhereInput
}

type NotebookMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  ownerId: String
  title: String
  updatedAt: DateTimeISO
}

input NotebookMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type NotebookMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  isPublic: Boolean
  ownerId: String
  title: String
  updatedAt: DateTimeISO
}

input NotebookMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NotebookOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotebookOrderByWithAggregationInput {
  _avg: NotebookAvgOrderByAggregateInput
  _count: NotebookCountOrderByAggregateInput
  _max: NotebookMaxOrderByAggregateInput
  _min: NotebookMinOrderByAggregateInput
  _sum: NotebookSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input NotebookOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isPublic: SortOrder
  notes: NoteOrderByRelationAggregateInput
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userPermissions: NotebookUserPermissionOrderByRelationAggregateInput
}

input NotebookOwnerIdTitleCompoundUniqueInput {
  ownerId: String!
  title: String!
}

input NotebookRelationFilter {
  is: NotebookWhereInput
  isNot: NotebookWhereInput
}

enum NotebookScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  isPublic
  ownerId
  title
  updatedAt
}

input NotebookScalarWhereInput {
  AND: [NotebookScalarWhereInput!]
  NOT: [NotebookScalarWhereInput!]
  OR: [NotebookScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  ownerId: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input NotebookScalarWhereWithAggregatesInput {
  AND: [NotebookScalarWhereWithAggregatesInput!]
  NOT: [NotebookScalarWhereWithAggregatesInput!]
  OR: [NotebookScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  ownerId: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type NotebookSumAggregate {
  id: String
  ownerId: String
}

input NotebookSumOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
}

input NotebookUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  notes: NoteUpdateManyWithoutNotebookInput
  owner: UserUpdateOneRequiredWithoutNotebooksInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPermissions: NotebookUserPermissionUpdateManyWithoutNotebookInput
}

input NotebookUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotebookUpdateManyWithWhereWithoutOwnerInput {
  data: NotebookUpdateManyMutationInput!
  where: NotebookScalarWhereInput!
}

input NotebookUpdateManyWithoutOwnerInput {
  connect: [NotebookWhereUniqueInput!]
  connectOrCreate: [NotebookCreateOrConnectWithoutOwnerInput!]
  create: [NotebookCreateWithoutOwnerInput!]
  createMany: NotebookCreateManyOwnerInputEnvelope
  delete: [NotebookWhereUniqueInput!]
  deleteMany: [NotebookScalarWhereInput!]
  disconnect: [NotebookWhereUniqueInput!]
  set: [NotebookWhereUniqueInput!]
  update: [NotebookUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [NotebookUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [NotebookUpsertWithWhereUniqueWithoutOwnerInput!]
}

input NotebookUpdateOneRequiredWithoutNotesInput {
  connect: NotebookWhereUniqueInput
  connectOrCreate: NotebookCreateOrConnectWithoutNotesInput
  create: NotebookCreateWithoutNotesInput
  update: NotebookUpdateWithoutNotesInput
  upsert: NotebookUpsertWithoutNotesInput
}

input NotebookUpdateOneRequiredWithoutUserPermissionsInput {
  connect: NotebookWhereUniqueInput
  connectOrCreate: NotebookCreateOrConnectWithoutUserPermissionsInput
  create: NotebookCreateWithoutUserPermissionsInput
  update: NotebookUpdateWithoutUserPermissionsInput
  upsert: NotebookUpsertWithoutUserPermissionsInput
}

input NotebookUpdateWithWhereUniqueWithoutOwnerInput {
  data: NotebookUpdateWithoutOwnerInput!
  where: NotebookWhereUniqueInput!
}

input NotebookUpdateWithoutNotesInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutNotebooksInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPermissions: NotebookUserPermissionUpdateManyWithoutNotebookInput
}

input NotebookUpdateWithoutOwnerInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  notes: NoteUpdateManyWithoutNotebookInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPermissions: NotebookUserPermissionUpdateManyWithoutNotebookInput
}

input NotebookUpdateWithoutUserPermissionsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  notes: NoteUpdateManyWithoutNotebookInput
  owner: UserUpdateOneRequiredWithoutNotebooksInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotebookUpsertWithWhereUniqueWithoutOwnerInput {
  create: NotebookCreateWithoutOwnerInput!
  update: NotebookUpdateWithoutOwnerInput!
  where: NotebookWhereUniqueInput!
}

input NotebookUpsertWithoutNotesInput {
  create: NotebookCreateWithoutNotesInput!
  update: NotebookUpdateWithoutNotesInput!
}

input NotebookUpsertWithoutUserPermissionsInput {
  create: NotebookCreateWithoutUserPermissionsInput!
  update: NotebookUpdateWithoutUserPermissionsInput!
}

type NotebookUserPermission {
  archivedAt: DateTimeISO
  id: String!
  notebook: Notebook!
  notebookId: String!
  user: User!
  userId: String!
}

type NotebookUserPermissionAvgAggregate {
  id: String
  notebookId: Float
  userId: String
}

input NotebookUserPermissionAvgOrderByAggregateInput {
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

type NotebookUserPermissionCountAggregate {
  _all: Int!
  archivedAt: Int!
  id: String!
  notebookId: String!
  userId: String!
}

input NotebookUserPermissionCountOrderByAggregateInput {
  archivedAt: SortOrder
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

input NotebookUserPermissionCreateInput {
  archivedAt: DateTimeISO
  notebook: NotebookCreateNestedOneWithoutUserPermissionsInput!
  user: UserCreateNestedOneWithoutNotebookPermissionsInput!
}

input NotebookUserPermissionCreateManyInput {
  archivedAt: DateTimeISO
  id: String
  notebookId: String!
  userId: String!
}

input NotebookUserPermissionCreateManyNotebookInput {
  archivedAt: DateTimeISO
  id: String
  userId: String!
}

input NotebookUserPermissionCreateManyNotebookInputEnvelope {
  data: [NotebookUserPermissionCreateManyNotebookInput!]!
  skipDuplicates: Boolean
}

input NotebookUserPermissionCreateManyUserInput {
  archivedAt: DateTimeISO
  id: String
  notebookId: String!
}

input NotebookUserPermissionCreateManyUserInputEnvelope {
  data: [NotebookUserPermissionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotebookUserPermissionCreateNestedManyWithoutNotebookInput {
  connect: [NotebookUserPermissionWhereUniqueInput!]
  connectOrCreate: [NotebookUserPermissionCreateOrConnectWithoutNotebookInput!]
  create: [NotebookUserPermissionCreateWithoutNotebookInput!]
  createMany: NotebookUserPermissionCreateManyNotebookInputEnvelope
}

input NotebookUserPermissionCreateNestedManyWithoutUserInput {
  connect: [NotebookUserPermissionWhereUniqueInput!]
  connectOrCreate: [NotebookUserPermissionCreateOrConnectWithoutUserInput!]
  create: [NotebookUserPermissionCreateWithoutUserInput!]
  createMany: NotebookUserPermissionCreateManyUserInputEnvelope
}

input NotebookUserPermissionCreateOrConnectWithoutNotebookInput {
  create: NotebookUserPermissionCreateWithoutNotebookInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionCreateOrConnectWithoutUserInput {
  create: NotebookUserPermissionCreateWithoutUserInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionCreateWithoutNotebookInput {
  archivedAt: DateTimeISO
  user: UserCreateNestedOneWithoutNotebookPermissionsInput!
}

input NotebookUserPermissionCreateWithoutUserInput {
  archivedAt: DateTimeISO
  notebook: NotebookCreateNestedOneWithoutUserPermissionsInput!
}

type NotebookUserPermissionGroupBy {
  _avg: NotebookUserPermissionAvgAggregate
  _count: NotebookUserPermissionCountAggregate
  _max: NotebookUserPermissionMaxAggregate
  _min: NotebookUserPermissionMinAggregate
  _sum: NotebookUserPermissionSumAggregate
  archivedAt: DateTimeISO
  id: String!
  notebookId: String!
  userId: String!
}

input NotebookUserPermissionListRelationFilter {
  every: NotebookUserPermissionWhereInput
  none: NotebookUserPermissionWhereInput
  some: NotebookUserPermissionWhereInput
}

type NotebookUserPermissionMaxAggregate {
  archivedAt: DateTimeISO
  id: String
  notebookId: String
  userId: String
}

input NotebookUserPermissionMaxOrderByAggregateInput {
  archivedAt: SortOrder
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

type NotebookUserPermissionMinAggregate {
  archivedAt: DateTimeISO
  id: String
  notebookId: String
  userId: String
}

input NotebookUserPermissionMinOrderByAggregateInput {
  archivedAt: SortOrder
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

input NotebookUserPermissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotebookUserPermissionOrderByWithAggregationInput {
  _avg: NotebookUserPermissionAvgOrderByAggregateInput
  _count: NotebookUserPermissionCountOrderByAggregateInput
  _max: NotebookUserPermissionMaxOrderByAggregateInput
  _min: NotebookUserPermissionMinOrderByAggregateInput
  _sum: NotebookUserPermissionSumOrderByAggregateInput
  archivedAt: SortOrder
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

input NotebookUserPermissionOrderByWithRelationInput {
  archivedAt: SortOrder
  id: SortOrder
  notebook: NotebookOrderByWithRelationInput
  notebookId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum NotebookUserPermissionScalarFieldEnum {
  archivedAt
  id
  notebookId
  userId
}

input NotebookUserPermissionScalarWhereInput {
  AND: [NotebookUserPermissionScalarWhereInput!]
  NOT: [NotebookUserPermissionScalarWhereInput!]
  OR: [NotebookUserPermissionScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  id: StringFilter
  notebookId: StringFilter
  userId: StringFilter
}

input NotebookUserPermissionScalarWhereWithAggregatesInput {
  AND: [NotebookUserPermissionScalarWhereWithAggregatesInput!]
  NOT: [NotebookUserPermissionScalarWhereWithAggregatesInput!]
  OR: [NotebookUserPermissionScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  notebookId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type NotebookUserPermissionSumAggregate {
  id: String
  notebookId: String
  userId: String
}

input NotebookUserPermissionSumOrderByAggregateInput {
  id: SortOrder
  notebookId: SortOrder
  userId: SortOrder
}

input NotebookUserPermissionUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  notebook: NotebookUpdateOneRequiredWithoutUserPermissionsInput
  user: UserUpdateOneRequiredWithoutNotebookPermissionsInput
}

input NotebookUserPermissionUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
}

input NotebookUserPermissionUpdateManyWithWhereWithoutNotebookInput {
  data: NotebookUserPermissionUpdateManyMutationInput!
  where: NotebookUserPermissionScalarWhereInput!
}

input NotebookUserPermissionUpdateManyWithWhereWithoutUserInput {
  data: NotebookUserPermissionUpdateManyMutationInput!
  where: NotebookUserPermissionScalarWhereInput!
}

input NotebookUserPermissionUpdateManyWithoutNotebookInput {
  connect: [NotebookUserPermissionWhereUniqueInput!]
  connectOrCreate: [NotebookUserPermissionCreateOrConnectWithoutNotebookInput!]
  create: [NotebookUserPermissionCreateWithoutNotebookInput!]
  createMany: NotebookUserPermissionCreateManyNotebookInputEnvelope
  delete: [NotebookUserPermissionWhereUniqueInput!]
  deleteMany: [NotebookUserPermissionScalarWhereInput!]
  disconnect: [NotebookUserPermissionWhereUniqueInput!]
  set: [NotebookUserPermissionWhereUniqueInput!]
  update: [NotebookUserPermissionUpdateWithWhereUniqueWithoutNotebookInput!]
  updateMany: [NotebookUserPermissionUpdateManyWithWhereWithoutNotebookInput!]
  upsert: [NotebookUserPermissionUpsertWithWhereUniqueWithoutNotebookInput!]
}

input NotebookUserPermissionUpdateManyWithoutUserInput {
  connect: [NotebookUserPermissionWhereUniqueInput!]
  connectOrCreate: [NotebookUserPermissionCreateOrConnectWithoutUserInput!]
  create: [NotebookUserPermissionCreateWithoutUserInput!]
  createMany: NotebookUserPermissionCreateManyUserInputEnvelope
  delete: [NotebookUserPermissionWhereUniqueInput!]
  deleteMany: [NotebookUserPermissionScalarWhereInput!]
  disconnect: [NotebookUserPermissionWhereUniqueInput!]
  set: [NotebookUserPermissionWhereUniqueInput!]
  update: [NotebookUserPermissionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotebookUserPermissionUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotebookUserPermissionUpsertWithWhereUniqueWithoutUserInput!]
}

input NotebookUserPermissionUpdateWithWhereUniqueWithoutNotebookInput {
  data: NotebookUserPermissionUpdateWithoutNotebookInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionUpdateWithWhereUniqueWithoutUserInput {
  data: NotebookUserPermissionUpdateWithoutUserInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionUpdateWithoutNotebookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotebookPermissionsInput
}

input NotebookUserPermissionUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  notebook: NotebookUpdateOneRequiredWithoutUserPermissionsInput
}

input NotebookUserPermissionUpsertWithWhereUniqueWithoutNotebookInput {
  create: NotebookUserPermissionCreateWithoutNotebookInput!
  update: NotebookUserPermissionUpdateWithoutNotebookInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionUpsertWithWhereUniqueWithoutUserInput {
  create: NotebookUserPermissionCreateWithoutUserInput!
  update: NotebookUserPermissionUpdateWithoutUserInput!
  where: NotebookUserPermissionWhereUniqueInput!
}

input NotebookUserPermissionUserIdNotebookIdCompoundUniqueInput {
  notebookId: String!
  userId: String!
}

input NotebookUserPermissionWhereInput {
  AND: [NotebookUserPermissionWhereInput!]
  NOT: [NotebookUserPermissionWhereInput!]
  OR: [NotebookUserPermissionWhereInput!]
  archivedAt: DateTimeNullableFilter
  id: StringFilter
  notebook: NotebookRelationFilter
  notebookId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input NotebookUserPermissionWhereUniqueInput {
  id: String
  userId_notebookId: NotebookUserPermissionUserIdNotebookIdCompoundUniqueInput
}

input NotebookWhereInput {
  AND: [NotebookWhereInput!]
  NOT: [NotebookWhereInput!]
  OR: [NotebookWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  notes: NoteListRelationFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userPermissions: NotebookUserPermissionListRelationFilter
}

input NotebookWhereUniqueInput {
  id: String
  ownerId_title: NotebookOwnerIdTitleCompoundUniqueInput
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableEnumCalendarProviderFieldUpdateOperationsInput {
  set: CalendarProvider
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  act(where: ActWhereUniqueInput!): Act
  action(where: ActionWhereUniqueInput!): Action
  actionSchedule(where: ActionScheduleWhereUniqueInput!): ActionSchedule
  actionScheduleTemplate(where: ActionScheduleTemplateWhereUniqueInput!): ActionScheduleTemplate
  actionScheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  actionSchedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  acts(cursor: ActWhereUniqueInput, distinct: [ActScalarFieldEnum!], orderBy: [ActOrderByWithRelationInput!], skip: Int, take: Int, where: ActWhereInput): [Act!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateAct(cursor: ActWhereUniqueInput, orderBy: [ActOrderByWithRelationInput!], skip: Int, take: Int, where: ActWhereInput): AggregateAct!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateActionSchedule(cursor: ActionScheduleWhereUniqueInput, orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): AggregateActionSchedule!
  aggregateActionScheduleTemplate(cursor: ActionScheduleTemplateWhereUniqueInput, orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): AggregateActionScheduleTemplate!
  aggregateAuthor(cursor: AuthorWhereUniqueInput, orderBy: [AuthorOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorWhereInput): AggregateAuthor!
  aggregateAuthorship(cursor: AuthorshipWhereUniqueInput, orderBy: [AuthorshipOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): AggregateAuthorship!
  aggregateBelief(cursor: BeliefWhereUniqueInput, orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): AggregateBelief!
  aggregateBook(cursor: BookWhereUniqueInput, orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): AggregateBook!
  aggregateBookReview(cursor: BookReviewWhereUniqueInput, orderBy: [BookReviewOrderByWithRelationInput!], skip: Int, take: Int, where: BookReviewWhereInput): AggregateBookReview!
  aggregateBookshelf(cursor: BookshelfWhereUniqueInput, orderBy: [BookshelfOrderByWithRelationInput!], skip: Int, take: Int, where: BookshelfWhereInput): AggregateBookshelf!
  aggregateCalendar(cursor: CalendarWhereUniqueInput, orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): AggregateCalendar!
  aggregateCalendarEvent(cursor: CalendarEventWhereUniqueInput, orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): AggregateCalendarEvent!
  aggregateCategorization(cursor: CategorizationWhereUniqueInput, orderBy: [CategorizationOrderByWithRelationInput!], skip: Int, take: Int, where: CategorizationWhereInput): AggregateCategorization!
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateDashboard(cursor: DashboardWhereUniqueInput, orderBy: [DashboardOrderByWithRelationInput!], skip: Int, take: Int, where: DashboardWhereInput): AggregateDashboard!
  aggregateGoal(cursor: GoalWhereUniqueInput, orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): AggregateGoal!
  aggregateHabit(cursor: HabitWhereUniqueInput, orderBy: [HabitOrderByWithRelationInput!], skip: Int, take: Int, where: HabitWhereInput): AggregateHabit!
  aggregateIdentity(cursor: IdentityWhereUniqueInput, orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): AggregateIdentity!
  aggregateIdentityActRelation(cursor: IdentityActRelationWhereUniqueInput, orderBy: [IdentityActRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): AggregateIdentityActRelation!
  aggregateItem(cursor: ItemWhereUniqueInput, orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): AggregateItem!
  aggregateList(cursor: ListWhereUniqueInput, orderBy: [ListOrderByWithRelationInput!], skip: Int, take: Int, where: ListWhereInput): AggregateList!
  aggregateMantra(cursor: MantraWhereUniqueInput, orderBy: [MantraOrderByWithRelationInput!], skip: Int, take: Int, where: MantraWhereInput): AggregateMantra!
  aggregateMetric(cursor: MetricWhereUniqueInput, orderBy: [MetricOrderByWithRelationInput!], skip: Int, take: Int, where: MetricWhereInput): AggregateMetric!
  aggregateMetricApplication(cursor: MetricApplicationWhereUniqueInput, orderBy: [MetricApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): AggregateMetricApplication!
  aggregateMetricRecord(cursor: MetricRecordWhereUniqueInput, orderBy: [MetricRecordOrderByWithRelationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): AggregateMetricRecord!
  aggregateMetricUsage(cursor: MetricUsageWhereUniqueInput, orderBy: [MetricUsageOrderByWithRelationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): AggregateMetricUsage!
  aggregateNote(cursor: NoteWhereUniqueInput, orderBy: [NoteOrderByWithRelationInput!], skip: Int, take: Int, where: NoteWhereInput): AggregateNote!
  aggregateNotebook(cursor: NotebookWhereUniqueInput, orderBy: [NotebookOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookWhereInput): AggregateNotebook!
  aggregateNotebookUserPermission(cursor: NotebookUserPermissionWhereUniqueInput, orderBy: [NotebookUserPermissionOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): AggregateNotebookUserPermission!
  aggregateReading(cursor: ReadingWhereUniqueInput, orderBy: [ReadingOrderByWithRelationInput!], skip: Int, take: Int, where: ReadingWhereInput): AggregateReading!
  aggregateRedirect(cursor: RedirectWhereUniqueInput, orderBy: [RedirectOrderByWithRelationInput!], skip: Int, take: Int, where: RedirectWhereInput): AggregateRedirect!
  aggregateRoutine(cursor: RoutineWhereUniqueInput, orderBy: [RoutineOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineWhereInput): AggregateRoutine!
  aggregateRoutineHabit(cursor: RoutineHabitWhereUniqueInput, orderBy: [RoutineHabitOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): AggregateRoutineHabit!
  aggregateScheduleTemplate(cursor: ScheduleTemplateWhereUniqueInput, orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): AggregateScheduleTemplate!
  aggregateShelving(cursor: ShelvingWhereUniqueInput, orderBy: [ShelvingOrderByWithRelationInput!], skip: Int, take: Int, where: ShelvingWhereInput): AggregateShelving!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateValue(cursor: ValueWhereUniqueInput, orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): AggregateValue!
  author(where: AuthorWhereUniqueInput!): Author
  authors(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorWhereInput): [Author!]!
  authorship(where: AuthorshipWhereUniqueInput!): Authorship
  authorships(cursor: AuthorshipWhereUniqueInput, distinct: [AuthorshipScalarFieldEnum!], orderBy: [AuthorshipOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): [Authorship!]!
  belief(where: BeliefWhereUniqueInput!): Belief
  beliefs(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): [Belief!]!
  book(where: BookWhereUniqueInput!): Book
  bookReview(where: BookReviewWhereUniqueInput!): BookReview
  bookReviews(cursor: BookReviewWhereUniqueInput, distinct: [BookReviewScalarFieldEnum!], orderBy: [BookReviewOrderByWithRelationInput!], skip: Int, take: Int, where: BookReviewWhereInput): [BookReview!]!
  books(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): [Book!]!
  bookshelf(where: BookshelfWhereUniqueInput!): Bookshelf
  bookshelves(cursor: BookshelfWhereUniqueInput, distinct: [BookshelfScalarFieldEnum!], orderBy: [BookshelfOrderByWithRelationInput!], skip: Int, take: Int, where: BookshelfWhereInput): [Bookshelf!]!
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  categorization(where: CategorizationWhereUniqueInput!): Categorization
  categorizations(cursor: CategorizationWhereUniqueInput, distinct: [CategorizationScalarFieldEnum!], orderBy: [CategorizationOrderByWithRelationInput!], skip: Int, take: Int, where: CategorizationWhereInput): [Categorization!]!
  category(where: CategoryWhereUniqueInput!): Category
  dashboard(where: DashboardWhereUniqueInput!): Dashboard
  dashboards(cursor: DashboardWhereUniqueInput, distinct: [DashboardScalarFieldEnum!], orderBy: [DashboardOrderByWithRelationInput!], skip: Int, take: Int, where: DashboardWhereInput): [Dashboard!]!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAct(cursor: ActWhereUniqueInput, distinct: [ActScalarFieldEnum!], orderBy: [ActOrderByWithRelationInput!], skip: Int, take: Int, where: ActWhereInput): Act
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionSchedule(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): ActionSchedule
  findFirstActionScheduleTemplate(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): ActionScheduleTemplate
  findFirstAuthor(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorWhereInput): Author
  findFirstAuthorship(cursor: AuthorshipWhereUniqueInput, distinct: [AuthorshipScalarFieldEnum!], orderBy: [AuthorshipOrderByWithRelationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): Authorship
  findFirstBelief(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): Belief
  findFirstBook(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): Book
  findFirstBookReview(cursor: BookReviewWhereUniqueInput, distinct: [BookReviewScalarFieldEnum!], orderBy: [BookReviewOrderByWithRelationInput!], skip: Int, take: Int, where: BookReviewWhereInput): BookReview
  findFirstBookshelf(cursor: BookshelfWhereUniqueInput, distinct: [BookshelfScalarFieldEnum!], orderBy: [BookshelfOrderByWithRelationInput!], skip: Int, take: Int, where: BookshelfWhereInput): Bookshelf
  findFirstCalendar(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): Calendar
  findFirstCalendarEvent(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): CalendarEvent
  findFirstCategorization(cursor: CategorizationWhereUniqueInput, distinct: [CategorizationScalarFieldEnum!], orderBy: [CategorizationOrderByWithRelationInput!], skip: Int, take: Int, where: CategorizationWhereInput): Categorization
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstDashboard(cursor: DashboardWhereUniqueInput, distinct: [DashboardScalarFieldEnum!], orderBy: [DashboardOrderByWithRelationInput!], skip: Int, take: Int, where: DashboardWhereInput): Dashboard
  findFirstGoal(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): Goal
  findFirstHabit(cursor: HabitWhereUniqueInput, distinct: [HabitScalarFieldEnum!], orderBy: [HabitOrderByWithRelationInput!], skip: Int, take: Int, where: HabitWhereInput): Habit
  findFirstIdentity(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): Identity
  findFirstIdentityActRelation(cursor: IdentityActRelationWhereUniqueInput, distinct: [IdentityActRelationScalarFieldEnum!], orderBy: [IdentityActRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): IdentityActRelation
  findFirstItem(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): Item
  findFirstList(cursor: ListWhereUniqueInput, distinct: [ListScalarFieldEnum!], orderBy: [ListOrderByWithRelationInput!], skip: Int, take: Int, where: ListWhereInput): List
  findFirstMantra(cursor: MantraWhereUniqueInput, distinct: [MantraScalarFieldEnum!], orderBy: [MantraOrderByWithRelationInput!], skip: Int, take: Int, where: MantraWhereInput): Mantra
  findFirstMetric(cursor: MetricWhereUniqueInput, distinct: [MetricScalarFieldEnum!], orderBy: [MetricOrderByWithRelationInput!], skip: Int, take: Int, where: MetricWhereInput): Metric
  findFirstMetricApplication(cursor: MetricApplicationWhereUniqueInput, distinct: [MetricApplicationScalarFieldEnum!], orderBy: [MetricApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): MetricApplication
  findFirstMetricRecord(cursor: MetricRecordWhereUniqueInput, distinct: [MetricRecordScalarFieldEnum!], orderBy: [MetricRecordOrderByWithRelationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): MetricRecord
  findFirstMetricUsage(cursor: MetricUsageWhereUniqueInput, distinct: [MetricUsageScalarFieldEnum!], orderBy: [MetricUsageOrderByWithRelationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): MetricUsage
  findFirstNote(cursor: NoteWhereUniqueInput, distinct: [NoteScalarFieldEnum!], orderBy: [NoteOrderByWithRelationInput!], skip: Int, take: Int, where: NoteWhereInput): Note
  findFirstNotebook(cursor: NotebookWhereUniqueInput, distinct: [NotebookScalarFieldEnum!], orderBy: [NotebookOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookWhereInput): Notebook
  findFirstNotebookUserPermission(cursor: NotebookUserPermissionWhereUniqueInput, distinct: [NotebookUserPermissionScalarFieldEnum!], orderBy: [NotebookUserPermissionOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): NotebookUserPermission
  findFirstReading(cursor: ReadingWhereUniqueInput, distinct: [ReadingScalarFieldEnum!], orderBy: [ReadingOrderByWithRelationInput!], skip: Int, take: Int, where: ReadingWhereInput): Reading
  findFirstRedirect(cursor: RedirectWhereUniqueInput, distinct: [RedirectScalarFieldEnum!], orderBy: [RedirectOrderByWithRelationInput!], skip: Int, take: Int, where: RedirectWhereInput): Redirect
  findFirstRoutine(cursor: RoutineWhereUniqueInput, distinct: [RoutineScalarFieldEnum!], orderBy: [RoutineOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineWhereInput): Routine
  findFirstRoutineHabit(cursor: RoutineHabitWhereUniqueInput, distinct: [RoutineHabitScalarFieldEnum!], orderBy: [RoutineHabitOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): RoutineHabit
  findFirstScheduleTemplate(cursor: ScheduleTemplateWhereUniqueInput, distinct: [ScheduleTemplateScalarFieldEnum!], orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): ScheduleTemplate
  findFirstShelving(cursor: ShelvingWhereUniqueInput, distinct: [ShelvingScalarFieldEnum!], orderBy: [ShelvingOrderByWithRelationInput!], skip: Int, take: Int, where: ShelvingWhereInput): Shelving
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstValue(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): Value
  goal(where: GoalWhereUniqueInput!): Goal
  goals(cursor: GoalWhereUniqueInput, distinct: [GoalScalarFieldEnum!], orderBy: [GoalOrderByWithRelationInput!], skip: Int, take: Int, where: GoalWhereInput): [Goal!]!
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByAct(by: [ActScalarFieldEnum!]!, having: ActScalarWhereWithAggregatesInput, orderBy: [ActOrderByWithAggregationInput!], skip: Int, take: Int, where: ActWhereInput): [ActGroupBy!]!
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByActionSchedule(by: [ActionScheduleScalarFieldEnum!]!, having: ActionScheduleScalarWhereWithAggregatesInput, orderBy: [ActionScheduleOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionScheduleGroupBy!]!
  groupByActionScheduleTemplate(by: [ActionScheduleTemplateScalarFieldEnum!]!, having: ActionScheduleTemplateScalarWhereWithAggregatesInput, orderBy: [ActionScheduleTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplateGroupBy!]!
  groupByAuthor(by: [AuthorScalarFieldEnum!]!, having: AuthorScalarWhereWithAggregatesInput, orderBy: [AuthorOrderByWithAggregationInput!], skip: Int, take: Int, where: AuthorWhereInput): [AuthorGroupBy!]!
  groupByAuthorship(by: [AuthorshipScalarFieldEnum!]!, having: AuthorshipScalarWhereWithAggregatesInput, orderBy: [AuthorshipOrderByWithAggregationInput!], skip: Int, take: Int, where: AuthorshipWhereInput): [AuthorshipGroupBy!]!
  groupByBelief(by: [BeliefScalarFieldEnum!]!, having: BeliefScalarWhereWithAggregatesInput, orderBy: [BeliefOrderByWithAggregationInput!], skip: Int, take: Int, where: BeliefWhereInput): [BeliefGroupBy!]!
  groupByBook(by: [BookScalarFieldEnum!]!, having: BookScalarWhereWithAggregatesInput, orderBy: [BookOrderByWithAggregationInput!], skip: Int, take: Int, where: BookWhereInput): [BookGroupBy!]!
  groupByBookReview(by: [BookReviewScalarFieldEnum!]!, having: BookReviewScalarWhereWithAggregatesInput, orderBy: [BookReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: BookReviewWhereInput): [BookReviewGroupBy!]!
  groupByBookshelf(by: [BookshelfScalarFieldEnum!]!, having: BookshelfScalarWhereWithAggregatesInput, orderBy: [BookshelfOrderByWithAggregationInput!], skip: Int, take: Int, where: BookshelfWhereInput): [BookshelfGroupBy!]!
  groupByCalendar(by: [CalendarScalarFieldEnum!]!, having: CalendarScalarWhereWithAggregatesInput, orderBy: [CalendarOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarWhereInput): [CalendarGroupBy!]!
  groupByCalendarEvent(by: [CalendarEventScalarFieldEnum!]!, having: CalendarEventScalarWhereWithAggregatesInput, orderBy: [CalendarEventOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEventGroupBy!]!
  groupByCategorization(by: [CategorizationScalarFieldEnum!]!, having: CategorizationScalarWhereWithAggregatesInput, orderBy: [CategorizationOrderByWithAggregationInput!], skip: Int, take: Int, where: CategorizationWhereInput): [CategorizationGroupBy!]!
  groupByCategory(by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByDashboard(by: [DashboardScalarFieldEnum!]!, having: DashboardScalarWhereWithAggregatesInput, orderBy: [DashboardOrderByWithAggregationInput!], skip: Int, take: Int, where: DashboardWhereInput): [DashboardGroupBy!]!
  groupByGoal(by: [GoalScalarFieldEnum!]!, having: GoalScalarWhereWithAggregatesInput, orderBy: [GoalOrderByWithAggregationInput!], skip: Int, take: Int, where: GoalWhereInput): [GoalGroupBy!]!
  groupByHabit(by: [HabitScalarFieldEnum!]!, having: HabitScalarWhereWithAggregatesInput, orderBy: [HabitOrderByWithAggregationInput!], skip: Int, take: Int, where: HabitWhereInput): [HabitGroupBy!]!
  groupByIdentity(by: [IdentityScalarFieldEnum!]!, having: IdentityScalarWhereWithAggregatesInput, orderBy: [IdentityOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityWhereInput): [IdentityGroupBy!]!
  groupByIdentityActRelation(by: [IdentityActRelationScalarFieldEnum!]!, having: IdentityActRelationScalarWhereWithAggregatesInput, orderBy: [IdentityActRelationOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): [IdentityActRelationGroupBy!]!
  groupByItem(by: [ItemScalarFieldEnum!]!, having: ItemScalarWhereWithAggregatesInput, orderBy: [ItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ItemWhereInput): [ItemGroupBy!]!
  groupByList(by: [ListScalarFieldEnum!]!, having: ListScalarWhereWithAggregatesInput, orderBy: [ListOrderByWithAggregationInput!], skip: Int, take: Int, where: ListWhereInput): [ListGroupBy!]!
  groupByMantra(by: [MantraScalarFieldEnum!]!, having: MantraScalarWhereWithAggregatesInput, orderBy: [MantraOrderByWithAggregationInput!], skip: Int, take: Int, where: MantraWhereInput): [MantraGroupBy!]!
  groupByMetric(by: [MetricScalarFieldEnum!]!, having: MetricScalarWhereWithAggregatesInput, orderBy: [MetricOrderByWithAggregationInput!], skip: Int, take: Int, where: MetricWhereInput): [MetricGroupBy!]!
  groupByMetricApplication(by: [MetricApplicationScalarFieldEnum!]!, having: MetricApplicationScalarWhereWithAggregatesInput, orderBy: [MetricApplicationOrderByWithAggregationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): [MetricApplicationGroupBy!]!
  groupByMetricRecord(by: [MetricRecordScalarFieldEnum!]!, having: MetricRecordScalarWhereWithAggregatesInput, orderBy: [MetricRecordOrderByWithAggregationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): [MetricRecordGroupBy!]!
  groupByMetricUsage(by: [MetricUsageScalarFieldEnum!]!, having: MetricUsageScalarWhereWithAggregatesInput, orderBy: [MetricUsageOrderByWithAggregationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): [MetricUsageGroupBy!]!
  groupByNote(by: [NoteScalarFieldEnum!]!, having: NoteScalarWhereWithAggregatesInput, orderBy: [NoteOrderByWithAggregationInput!], skip: Int, take: Int, where: NoteWhereInput): [NoteGroupBy!]!
  groupByNotebook(by: [NotebookScalarFieldEnum!]!, having: NotebookScalarWhereWithAggregatesInput, orderBy: [NotebookOrderByWithAggregationInput!], skip: Int, take: Int, where: NotebookWhereInput): [NotebookGroupBy!]!
  groupByNotebookUserPermission(by: [NotebookUserPermissionScalarFieldEnum!]!, having: NotebookUserPermissionScalarWhereWithAggregatesInput, orderBy: [NotebookUserPermissionOrderByWithAggregationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): [NotebookUserPermissionGroupBy!]!
  groupByReading(by: [ReadingScalarFieldEnum!]!, having: ReadingScalarWhereWithAggregatesInput, orderBy: [ReadingOrderByWithAggregationInput!], skip: Int, take: Int, where: ReadingWhereInput): [ReadingGroupBy!]!
  groupByRedirect(by: [RedirectScalarFieldEnum!]!, having: RedirectScalarWhereWithAggregatesInput, orderBy: [RedirectOrderByWithAggregationInput!], skip: Int, take: Int, where: RedirectWhereInput): [RedirectGroupBy!]!
  groupByRoutine(by: [RoutineScalarFieldEnum!]!, having: RoutineScalarWhereWithAggregatesInput, orderBy: [RoutineOrderByWithAggregationInput!], skip: Int, take: Int, where: RoutineWhereInput): [RoutineGroupBy!]!
  groupByRoutineHabit(by: [RoutineHabitScalarFieldEnum!]!, having: RoutineHabitScalarWhereWithAggregatesInput, orderBy: [RoutineHabitOrderByWithAggregationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): [RoutineHabitGroupBy!]!
  groupByScheduleTemplate(by: [ScheduleTemplateScalarFieldEnum!]!, having: ScheduleTemplateScalarWhereWithAggregatesInput, orderBy: [ScheduleTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): [ScheduleTemplateGroupBy!]!
  groupByShelving(by: [ShelvingScalarFieldEnum!]!, having: ShelvingScalarWhereWithAggregatesInput, orderBy: [ShelvingOrderByWithAggregationInput!], skip: Int, take: Int, where: ShelvingWhereInput): [ShelvingGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByValue(by: [ValueScalarFieldEnum!]!, having: ValueScalarWhereWithAggregatesInput, orderBy: [ValueOrderByWithAggregationInput!], skip: Int, take: Int, where: ValueWhereInput): [ValueGroupBy!]!
  habit(where: HabitWhereUniqueInput!): Habit
  habits(cursor: HabitWhereUniqueInput, distinct: [HabitScalarFieldEnum!], orderBy: [HabitOrderByWithRelationInput!], skip: Int, take: Int, where: HabitWhereInput): [Habit!]!
  identities(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): [Identity!]!
  identity(where: IdentityWhereUniqueInput!): Identity
  identityActRelation(where: IdentityActRelationWhereUniqueInput!): IdentityActRelation
  identityActRelations(cursor: IdentityActRelationWhereUniqueInput, distinct: [IdentityActRelationScalarFieldEnum!], orderBy: [IdentityActRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActRelationWhereInput): [IdentityActRelation!]!
  item(where: ItemWhereUniqueInput!): Item
  items(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): [Item!]!
  list(where: ListWhereUniqueInput!): List
  lists(cursor: ListWhereUniqueInput, distinct: [ListScalarFieldEnum!], orderBy: [ListOrderByWithRelationInput!], skip: Int, take: Int, where: ListWhereInput): [List!]!
  mantra(where: MantraWhereUniqueInput!): Mantra
  mantras(cursor: MantraWhereUniqueInput, distinct: [MantraScalarFieldEnum!], orderBy: [MantraOrderByWithRelationInput!], skip: Int, take: Int, where: MantraWhereInput): [Mantra!]!
  metric(where: MetricWhereUniqueInput!): Metric
  metricApplication(where: MetricApplicationWhereUniqueInput!): MetricApplication
  metricApplications(cursor: MetricApplicationWhereUniqueInput, distinct: [MetricApplicationScalarFieldEnum!], orderBy: [MetricApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: MetricApplicationWhereInput): [MetricApplication!]!
  metricRecord(where: MetricRecordWhereUniqueInput!): MetricRecord
  metricRecords(cursor: MetricRecordWhereUniqueInput, distinct: [MetricRecordScalarFieldEnum!], orderBy: [MetricRecordOrderByWithRelationInput!], skip: Int, take: Int, where: MetricRecordWhereInput): [MetricRecord!]!
  metricUsage(where: MetricUsageWhereUniqueInput!): MetricUsage
  metricUsages(cursor: MetricUsageWhereUniqueInput, distinct: [MetricUsageScalarFieldEnum!], orderBy: [MetricUsageOrderByWithRelationInput!], skip: Int, take: Int, where: MetricUsageWhereInput): [MetricUsage!]!
  metrics(cursor: MetricWhereUniqueInput, distinct: [MetricScalarFieldEnum!], orderBy: [MetricOrderByWithRelationInput!], skip: Int, take: Int, where: MetricWhereInput): [Metric!]!
  note(where: NoteWhereUniqueInput!): Note
  notebook(where: NotebookWhereUniqueInput!): Notebook
  notebookUserPermission(where: NotebookUserPermissionWhereUniqueInput!): NotebookUserPermission
  notebookUserPermissions(cursor: NotebookUserPermissionWhereUniqueInput, distinct: [NotebookUserPermissionScalarFieldEnum!], orderBy: [NotebookUserPermissionOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): [NotebookUserPermission!]!
  notebooks(cursor: NotebookWhereUniqueInput, distinct: [NotebookScalarFieldEnum!], orderBy: [NotebookOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookWhereInput): [Notebook!]!
  notes(cursor: NoteWhereUniqueInput, distinct: [NoteScalarFieldEnum!], orderBy: [NoteOrderByWithRelationInput!], skip: Int, take: Int, where: NoteWhereInput): [Note!]!
  reading(where: ReadingWhereUniqueInput!): Reading
  readings(cursor: ReadingWhereUniqueInput, distinct: [ReadingScalarFieldEnum!], orderBy: [ReadingOrderByWithRelationInput!], skip: Int, take: Int, where: ReadingWhereInput): [Reading!]!
  redirect(where: RedirectWhereUniqueInput!): Redirect
  redirects(cursor: RedirectWhereUniqueInput, distinct: [RedirectScalarFieldEnum!], orderBy: [RedirectOrderByWithRelationInput!], skip: Int, take: Int, where: RedirectWhereInput): [Redirect!]!
  routine(where: RoutineWhereUniqueInput!): Routine
  routineHabit(where: RoutineHabitWhereUniqueInput!): RoutineHabit
  routineHabits(cursor: RoutineHabitWhereUniqueInput, distinct: [RoutineHabitScalarFieldEnum!], orderBy: [RoutineHabitOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): [RoutineHabit!]!
  routines(cursor: RoutineWhereUniqueInput, distinct: [RoutineScalarFieldEnum!], orderBy: [RoutineOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineWhereInput): [Routine!]!
  scheduleTemplate(where: ScheduleTemplateWhereUniqueInput!): ScheduleTemplate
  scheduleTemplates(cursor: ScheduleTemplateWhereUniqueInput, distinct: [ScheduleTemplateScalarFieldEnum!], orderBy: [ScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleTemplateWhereInput): [ScheduleTemplate!]!
  shelving(where: ShelvingWhereUniqueInput!): Shelving
  shelvings(cursor: ShelvingWhereUniqueInput, distinct: [ShelvingScalarFieldEnum!], orderBy: [ShelvingOrderByWithRelationInput!], skip: Int, take: Int, where: ShelvingWhereInput): [Shelving!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  value(where: ValueWhereUniqueInput!): Value
  values(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): [Value!]!
}

enum QueryMode {
  default
  insensitive
}

type Reading {
  archivedAt: DateTimeISO
  book: Book!
  bookId: String!
  createdAt: DateTimeISO!
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String!
  review: BookReview
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type ReadingAvgAggregate {
  bookId: Float
  id: String
  userId: String
}

input ReadingAvgOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ReadingCountAggregate {
  _all: Int!
  archivedAt: Int!
  bookId: String!
  createdAt: Int!
  dateFinished: Int!
  dateStarted: Int!
  id: String!
  updatedAt: Int!
  userId: String!
}

input ReadingCountOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  dateFinished: SortOrder
  dateStarted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReadingCreateInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutReadingsInput!
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  review: BookReviewCreateNestedOneWithoutReadingInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutReadingsInput!
}

input ReadingCreateManyBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input ReadingCreateManyBookInputEnvelope {
  data: [ReadingCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input ReadingCreateManyInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input ReadingCreateManyUserInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input ReadingCreateManyUserInputEnvelope {
  data: [ReadingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReadingCreateNestedManyWithoutBookInput {
  connect: [ReadingWhereUniqueInput!]
  connectOrCreate: [ReadingCreateOrConnectWithoutBookInput!]
  create: [ReadingCreateWithoutBookInput!]
  createMany: ReadingCreateManyBookInputEnvelope
}

input ReadingCreateNestedManyWithoutUserInput {
  connect: [ReadingWhereUniqueInput!]
  connectOrCreate: [ReadingCreateOrConnectWithoutUserInput!]
  create: [ReadingCreateWithoutUserInput!]
  createMany: ReadingCreateManyUserInputEnvelope
}

input ReadingCreateNestedOneWithoutReviewInput {
  connect: ReadingWhereUniqueInput
  connectOrCreate: ReadingCreateOrConnectWithoutReviewInput
  create: ReadingCreateWithoutReviewInput
}

input ReadingCreateOrConnectWithoutBookInput {
  create: ReadingCreateWithoutBookInput!
  where: ReadingWhereUniqueInput!
}

input ReadingCreateOrConnectWithoutReviewInput {
  create: ReadingCreateWithoutReviewInput!
  where: ReadingWhereUniqueInput!
}

input ReadingCreateOrConnectWithoutUserInput {
  create: ReadingCreateWithoutUserInput!
  where: ReadingWhereUniqueInput!
}

input ReadingCreateWithoutBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  review: BookReviewCreateNestedOneWithoutReadingInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutReadingsInput!
}

input ReadingCreateWithoutReviewInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutReadingsInput!
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutReadingsInput!
}

input ReadingCreateWithoutUserInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutReadingsInput!
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  review: BookReviewCreateNestedOneWithoutReadingInput
  updatedAt: DateTimeISO
}

type ReadingGroupBy {
  _avg: ReadingAvgAggregate
  _count: ReadingCountAggregate
  _max: ReadingMaxAggregate
  _min: ReadingMinAggregate
  _sum: ReadingSumAggregate
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO!
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input ReadingListRelationFilter {
  every: ReadingWhereInput
  none: ReadingWhereInput
  some: ReadingWhereInput
}

type ReadingMaxAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String
}

input ReadingMaxOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  dateFinished: SortOrder
  dateStarted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ReadingMinAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  dateFinished: DateTimeISO
  dateStarted: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String
}

input ReadingMinOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  dateFinished: SortOrder
  dateStarted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReadingOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReadingOrderByWithAggregationInput {
  _avg: ReadingAvgOrderByAggregateInput
  _count: ReadingCountOrderByAggregateInput
  _max: ReadingMaxOrderByAggregateInput
  _min: ReadingMinOrderByAggregateInput
  _sum: ReadingSumOrderByAggregateInput
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  dateFinished: SortOrder
  dateStarted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReadingOrderByWithRelationInput {
  archivedAt: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  dateFinished: SortOrder
  dateStarted: SortOrder
  id: SortOrder
  review: BookReviewOrderByWithRelationInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ReadingRelationFilter {
  is: ReadingWhereInput
  isNot: ReadingWhereInput
}

enum ReadingScalarFieldEnum {
  archivedAt
  bookId
  createdAt
  dateFinished
  dateStarted
  id
  updatedAt
  userId
}

input ReadingScalarWhereInput {
  AND: [ReadingScalarWhereInput!]
  NOT: [ReadingScalarWhereInput!]
  OR: [ReadingScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  dateFinished: DateTimeNullableFilter
  dateStarted: DateTimeNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ReadingScalarWhereWithAggregatesInput {
  AND: [ReadingScalarWhereWithAggregatesInput!]
  NOT: [ReadingScalarWhereWithAggregatesInput!]
  OR: [ReadingScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  dateFinished: DateTimeNullableWithAggregatesFilter
  dateStarted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type ReadingSumAggregate {
  bookId: String
  id: String
  userId: String
}

input ReadingSumOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ReadingUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutReadingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateFinished: NullableDateTimeFieldUpdateOperationsInput
  dateStarted: NullableDateTimeFieldUpdateOperationsInput
  review: BookReviewUpdateOneWithoutReadingInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReadingsInput
}

input ReadingUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateFinished: NullableDateTimeFieldUpdateOperationsInput
  dateStarted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReadingUpdateManyWithWhereWithoutBookInput {
  data: ReadingUpdateManyMutationInput!
  where: ReadingScalarWhereInput!
}

input ReadingUpdateManyWithWhereWithoutUserInput {
  data: ReadingUpdateManyMutationInput!
  where: ReadingScalarWhereInput!
}

input ReadingUpdateManyWithoutBookInput {
  connect: [ReadingWhereUniqueInput!]
  connectOrCreate: [ReadingCreateOrConnectWithoutBookInput!]
  create: [ReadingCreateWithoutBookInput!]
  createMany: ReadingCreateManyBookInputEnvelope
  delete: [ReadingWhereUniqueInput!]
  deleteMany: [ReadingScalarWhereInput!]
  disconnect: [ReadingWhereUniqueInput!]
  set: [ReadingWhereUniqueInput!]
  update: [ReadingUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ReadingUpdateManyWithWhereWithoutBookInput!]
  upsert: [ReadingUpsertWithWhereUniqueWithoutBookInput!]
}

input ReadingUpdateManyWithoutUserInput {
  connect: [ReadingWhereUniqueInput!]
  connectOrCreate: [ReadingCreateOrConnectWithoutUserInput!]
  create: [ReadingCreateWithoutUserInput!]
  createMany: ReadingCreateManyUserInputEnvelope
  delete: [ReadingWhereUniqueInput!]
  deleteMany: [ReadingScalarWhereInput!]
  disconnect: [ReadingWhereUniqueInput!]
  set: [ReadingWhereUniqueInput!]
  update: [ReadingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReadingUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReadingUpsertWithWhereUniqueWithoutUserInput!]
}

input ReadingUpdateOneWithoutReviewInput {
  connect: ReadingWhereUniqueInput
  connectOrCreate: ReadingCreateOrConnectWithoutReviewInput
  create: ReadingCreateWithoutReviewInput
  delete: Boolean
  disconnect: Boolean
  update: ReadingUpdateWithoutReviewInput
  upsert: ReadingUpsertWithoutReviewInput
}

input ReadingUpdateWithWhereUniqueWithoutBookInput {
  data: ReadingUpdateWithoutBookInput!
  where: ReadingWhereUniqueInput!
}

input ReadingUpdateWithWhereUniqueWithoutUserInput {
  data: ReadingUpdateWithoutUserInput!
  where: ReadingWhereUniqueInput!
}

input ReadingUpdateWithoutBookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateFinished: NullableDateTimeFieldUpdateOperationsInput
  dateStarted: NullableDateTimeFieldUpdateOperationsInput
  review: BookReviewUpdateOneWithoutReadingInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReadingsInput
}

input ReadingUpdateWithoutReviewInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutReadingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateFinished: NullableDateTimeFieldUpdateOperationsInput
  dateStarted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReadingsInput
}

input ReadingUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutReadingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateFinished: NullableDateTimeFieldUpdateOperationsInput
  dateStarted: NullableDateTimeFieldUpdateOperationsInput
  review: BookReviewUpdateOneWithoutReadingInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReadingUpsertWithWhereUniqueWithoutBookInput {
  create: ReadingCreateWithoutBookInput!
  update: ReadingUpdateWithoutBookInput!
  where: ReadingWhereUniqueInput!
}

input ReadingUpsertWithWhereUniqueWithoutUserInput {
  create: ReadingCreateWithoutUserInput!
  update: ReadingUpdateWithoutUserInput!
  where: ReadingWhereUniqueInput!
}

input ReadingUpsertWithoutReviewInput {
  create: ReadingCreateWithoutReviewInput!
  update: ReadingUpdateWithoutReviewInput!
}

input ReadingWhereInput {
  AND: [ReadingWhereInput!]
  NOT: [ReadingWhereInput!]
  OR: [ReadingWhereInput!]
  archivedAt: DateTimeNullableFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  dateFinished: DateTimeNullableFilter
  dateStarted: DateTimeNullableFilter
  id: StringFilter
  review: BookReviewRelationFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReadingWhereUniqueInput {
  id: String
}

type Redirect {
  id: String!
  new_path: String!
  old_path: String!
}

type RedirectAvgAggregate {
  id: String
}

input RedirectAvgOrderByAggregateInput {
  id: SortOrder
}

type RedirectCountAggregate {
  _all: Int!
  id: String!
  new_path: Int!
  old_path: Int!
}

input RedirectCountOrderByAggregateInput {
  id: SortOrder
  new_path: SortOrder
  old_path: SortOrder
}

input RedirectCreateInput {
  new_path: String!
  old_path: String!
}

input RedirectCreateManyInput {
  id: String
  new_path: String!
  old_path: String!
}

type RedirectGroupBy {
  _avg: RedirectAvgAggregate
  _count: RedirectCountAggregate
  _max: RedirectMaxAggregate
  _min: RedirectMinAggregate
  _sum: RedirectSumAggregate
  id: String!
  new_path: String!
  old_path: String!
}

type RedirectMaxAggregate {
  id: String
  new_path: String
  old_path: String
}

input RedirectMaxOrderByAggregateInput {
  id: SortOrder
  new_path: SortOrder
  old_path: SortOrder
}

type RedirectMinAggregate {
  id: String
  new_path: String
  old_path: String
}

input RedirectMinOrderByAggregateInput {
  id: SortOrder
  new_path: SortOrder
  old_path: SortOrder
}

input RedirectOrderByWithAggregationInput {
  _avg: RedirectAvgOrderByAggregateInput
  _count: RedirectCountOrderByAggregateInput
  _max: RedirectMaxOrderByAggregateInput
  _min: RedirectMinOrderByAggregateInput
  _sum: RedirectSumOrderByAggregateInput
  id: SortOrder
  new_path: SortOrder
  old_path: SortOrder
}

input RedirectOrderByWithRelationInput {
  id: SortOrder
  new_path: SortOrder
  old_path: SortOrder
}

enum RedirectScalarFieldEnum {
  id
  new_path
  old_path
}

input RedirectScalarWhereWithAggregatesInput {
  AND: [RedirectScalarWhereWithAggregatesInput!]
  NOT: [RedirectScalarWhereWithAggregatesInput!]
  OR: [RedirectScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  new_path: StringWithAggregatesFilter
  old_path: StringWithAggregatesFilter
}

type RedirectSumAggregate {
  id: String
}

input RedirectSumOrderByAggregateInput {
  id: SortOrder
}

input RedirectUpdateInput {
  new_path: StringFieldUpdateOperationsInput
  old_path: StringFieldUpdateOperationsInput
}

input RedirectUpdateManyMutationInput {
  new_path: StringFieldUpdateOperationsInput
  old_path: StringFieldUpdateOperationsInput
}

input RedirectWhereInput {
  AND: [RedirectWhereInput!]
  NOT: [RedirectWhereInput!]
  OR: [RedirectWhereInput!]
  id: StringFilter
  new_path: StringFilter
  old_path: StringFilter
}

input RedirectWhereUniqueInput {
  id: String
}

type Routine {
  _count: RoutineCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  durationInMinutes: Int
  habits(cursor: RoutineHabitWhereUniqueInput, distinct: [RoutineHabitScalarFieldEnum!], orderBy: [RoutineHabitOrderByWithRelationInput!], skip: Int, take: Int, where: RoutineHabitWhereInput): [RoutineHabit!]!
  id: String!
  name: String!
  notes: String
  updatedAt: DateTimeISO!
  userId: String!
}

type RoutineAvgAggregate {
  durationInMinutes: Float
  id: String
  userId: String
}

input RoutineAvgOrderByAggregateInput {
  durationInMinutes: SortOrder
  id: SortOrder
  userId: SortOrder
}

type RoutineCount {
  habits: Int!
}

type RoutineCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  durationInMinutes: Int!
  id: String!
  name: Int!
  notes: Int!
  updatedAt: Int!
  userId: String!
}

input RoutineCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  name: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RoutineCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  habits: RoutineHabitCreateNestedManyWithoutRoutineInput
  name: String!
  notes: String
  updatedAt: DateTimeISO
  userId: String!
}

input RoutineCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  id: String
  name: String!
  notes: String
  updatedAt: DateTimeISO
  userId: String!
}

input RoutineCreateNestedOneWithoutHabitsInput {
  connect: RoutineWhereUniqueInput
  connectOrCreate: RoutineCreateOrConnectWithoutHabitsInput
  create: RoutineCreateWithoutHabitsInput
}

input RoutineCreateOrConnectWithoutHabitsInput {
  create: RoutineCreateWithoutHabitsInput!
  where: RoutineWhereUniqueInput!
}

input RoutineCreateWithoutHabitsInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  name: String!
  notes: String
  updatedAt: DateTimeISO
  userId: String!
}

type RoutineGroupBy {
  _avg: RoutineAvgAggregate
  _count: RoutineCountAggregate
  _max: RoutineMaxAggregate
  _min: RoutineMinAggregate
  _sum: RoutineSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  durationInMinutes: Int
  id: String!
  name: String!
  notes: String
  updatedAt: DateTimeISO!
  userId: String!
}

type RoutineHabit {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  durationInMinutes: Int!
  habit: Habit!
  habitId: String!
  id: String!
  position: Int!
  routine: Routine!
  routineId: String!
  updatedAt: DateTimeISO!
}

type RoutineHabitAvgAggregate {
  durationInMinutes: Float
  habitId: String
  id: String
  position: Float
  routineId: Float
}

input RoutineHabitAvgOrderByAggregateInput {
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
}

type RoutineHabitCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  durationInMinutes: Int!
  habitId: String!
  id: String!
  position: Int!
  routineId: String!
  updatedAt: Int!
}

input RoutineHabitCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
  updatedAt: SortOrder
}

input RoutineHabitCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  habit: HabitCreateNestedOneWithoutRoutinesInput!
  id: String
  position: Int!
  routine: RoutineCreateNestedOneWithoutHabitsInput!
  updatedAt: DateTimeISO
}

input RoutineHabitCreateManyHabitInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  id: String
  position: Int!
  routineId: String!
  updatedAt: DateTimeISO
}

input RoutineHabitCreateManyHabitInputEnvelope {
  data: [RoutineHabitCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input RoutineHabitCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  habitId: String!
  id: String
  position: Int!
  routineId: String!
  updatedAt: DateTimeISO
}

input RoutineHabitCreateManyRoutineInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  habitId: String!
  id: String
  position: Int!
  updatedAt: DateTimeISO
}

input RoutineHabitCreateManyRoutineInputEnvelope {
  data: [RoutineHabitCreateManyRoutineInput!]!
  skipDuplicates: Boolean
}

input RoutineHabitCreateNestedManyWithoutHabitInput {
  connect: [RoutineHabitWhereUniqueInput!]
  connectOrCreate: [RoutineHabitCreateOrConnectWithoutHabitInput!]
  create: [RoutineHabitCreateWithoutHabitInput!]
  createMany: RoutineHabitCreateManyHabitInputEnvelope
}

input RoutineHabitCreateNestedManyWithoutRoutineInput {
  connect: [RoutineHabitWhereUniqueInput!]
  connectOrCreate: [RoutineHabitCreateOrConnectWithoutRoutineInput!]
  create: [RoutineHabitCreateWithoutRoutineInput!]
  createMany: RoutineHabitCreateManyRoutineInputEnvelope
}

input RoutineHabitCreateOrConnectWithoutHabitInput {
  create: RoutineHabitCreateWithoutHabitInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitCreateOrConnectWithoutRoutineInput {
  create: RoutineHabitCreateWithoutRoutineInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitCreateWithoutHabitInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  id: String
  position: Int!
  routine: RoutineCreateNestedOneWithoutHabitsInput!
  updatedAt: DateTimeISO
}

input RoutineHabitCreateWithoutRoutineInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int!
  habit: HabitCreateNestedOneWithoutRoutinesInput!
  id: String
  position: Int!
  updatedAt: DateTimeISO
}

type RoutineHabitGroupBy {
  _avg: RoutineHabitAvgAggregate
  _count: RoutineHabitCountAggregate
  _max: RoutineHabitMaxAggregate
  _min: RoutineHabitMinAggregate
  _sum: RoutineHabitSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  durationInMinutes: Int!
  habitId: String!
  id: String!
  position: Int!
  routineId: String!
  updatedAt: DateTimeISO!
}

input RoutineHabitListRelationFilter {
  every: RoutineHabitWhereInput
  none: RoutineHabitWhereInput
  some: RoutineHabitWhereInput
}

type RoutineHabitMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  habitId: String
  id: String
  position: Int
  routineId: String
  updatedAt: DateTimeISO
}

input RoutineHabitMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
  updatedAt: SortOrder
}

type RoutineHabitMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  habitId: String
  id: String
  position: Int
  routineId: String
  updatedAt: DateTimeISO
}

input RoutineHabitMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
  updatedAt: SortOrder
}

input RoutineHabitOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoutineHabitOrderByWithAggregationInput {
  _avg: RoutineHabitAvgOrderByAggregateInput
  _count: RoutineHabitCountOrderByAggregateInput
  _max: RoutineHabitMaxOrderByAggregateInput
  _min: RoutineHabitMinOrderByAggregateInput
  _sum: RoutineHabitSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
  updatedAt: SortOrder
}

input RoutineHabitOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routine: RoutineOrderByWithRelationInput
  routineId: SortOrder
  updatedAt: SortOrder
}

input RoutineHabitRoutineIdPositionCompoundUniqueInput {
  position: Int!
  routineId: String!
}

enum RoutineHabitScalarFieldEnum {
  archivedAt
  createdAt
  durationInMinutes
  habitId
  id
  position
  routineId
  updatedAt
}

input RoutineHabitScalarWhereInput {
  AND: [RoutineHabitScalarWhereInput!]
  NOT: [RoutineHabitScalarWhereInput!]
  OR: [RoutineHabitScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  durationInMinutes: IntFilter
  habitId: StringFilter
  id: StringFilter
  position: IntFilter
  routineId: StringFilter
  updatedAt: DateTimeFilter
}

input RoutineHabitScalarWhereWithAggregatesInput {
  AND: [RoutineHabitScalarWhereWithAggregatesInput!]
  NOT: [RoutineHabitScalarWhereWithAggregatesInput!]
  OR: [RoutineHabitScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  durationInMinutes: IntWithAggregatesFilter
  habitId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  position: IntWithAggregatesFilter
  routineId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type RoutineHabitSumAggregate {
  durationInMinutes: Int
  habitId: String
  id: String
  position: Int
  routineId: String
}

input RoutineHabitSumOrderByAggregateInput {
  durationInMinutes: SortOrder
  habitId: SortOrder
  id: SortOrder
  position: SortOrder
  routineId: SortOrder
}

input RoutineHabitUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutRoutinesInput
  position: IntFieldUpdateOperationsInput
  routine: RoutineUpdateOneRequiredWithoutHabitsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoutineHabitUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoutineHabitUpdateManyWithWhereWithoutHabitInput {
  data: RoutineHabitUpdateManyMutationInput!
  where: RoutineHabitScalarWhereInput!
}

input RoutineHabitUpdateManyWithWhereWithoutRoutineInput {
  data: RoutineHabitUpdateManyMutationInput!
  where: RoutineHabitScalarWhereInput!
}

input RoutineHabitUpdateManyWithoutHabitInput {
  connect: [RoutineHabitWhereUniqueInput!]
  connectOrCreate: [RoutineHabitCreateOrConnectWithoutHabitInput!]
  create: [RoutineHabitCreateWithoutHabitInput!]
  createMany: RoutineHabitCreateManyHabitInputEnvelope
  delete: [RoutineHabitWhereUniqueInput!]
  deleteMany: [RoutineHabitScalarWhereInput!]
  disconnect: [RoutineHabitWhereUniqueInput!]
  set: [RoutineHabitWhereUniqueInput!]
  update: [RoutineHabitUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [RoutineHabitUpdateManyWithWhereWithoutHabitInput!]
  upsert: [RoutineHabitUpsertWithWhereUniqueWithoutHabitInput!]
}

input RoutineHabitUpdateManyWithoutRoutineInput {
  connect: [RoutineHabitWhereUniqueInput!]
  connectOrCreate: [RoutineHabitCreateOrConnectWithoutRoutineInput!]
  create: [RoutineHabitCreateWithoutRoutineInput!]
  createMany: RoutineHabitCreateManyRoutineInputEnvelope
  delete: [RoutineHabitWhereUniqueInput!]
  deleteMany: [RoutineHabitScalarWhereInput!]
  disconnect: [RoutineHabitWhereUniqueInput!]
  set: [RoutineHabitWhereUniqueInput!]
  update: [RoutineHabitUpdateWithWhereUniqueWithoutRoutineInput!]
  updateMany: [RoutineHabitUpdateManyWithWhereWithoutRoutineInput!]
  upsert: [RoutineHabitUpsertWithWhereUniqueWithoutRoutineInput!]
}

input RoutineHabitUpdateWithWhereUniqueWithoutHabitInput {
  data: RoutineHabitUpdateWithoutHabitInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitUpdateWithWhereUniqueWithoutRoutineInput {
  data: RoutineHabitUpdateWithoutRoutineInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitUpdateWithoutHabitInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  routine: RoutineUpdateOneRequiredWithoutHabitsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoutineHabitUpdateWithoutRoutineInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  habit: HabitUpdateOneRequiredWithoutRoutinesInput
  position: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoutineHabitUpsertWithWhereUniqueWithoutHabitInput {
  create: RoutineHabitCreateWithoutHabitInput!
  update: RoutineHabitUpdateWithoutHabitInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitUpsertWithWhereUniqueWithoutRoutineInput {
  create: RoutineHabitCreateWithoutRoutineInput!
  update: RoutineHabitUpdateWithoutRoutineInput!
  where: RoutineHabitWhereUniqueInput!
}

input RoutineHabitWhereInput {
  AND: [RoutineHabitWhereInput!]
  NOT: [RoutineHabitWhereInput!]
  OR: [RoutineHabitWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  durationInMinutes: IntFilter
  habit: HabitRelationFilter
  habitId: StringFilter
  id: StringFilter
  position: IntFilter
  routine: RoutineRelationFilter
  routineId: StringFilter
  updatedAt: DateTimeFilter
}

input RoutineHabitWhereUniqueInput {
  id: String
  routineId_position: RoutineHabitRoutineIdPositionCompoundUniqueInput
}

type RoutineMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  id: String
  name: String
  notes: String
  updatedAt: DateTimeISO
  userId: String
}

input RoutineMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  name: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type RoutineMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  durationInMinutes: Int
  id: String
  name: String
  notes: String
  updatedAt: DateTimeISO
  userId: String
}

input RoutineMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  name: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RoutineOrderByWithAggregationInput {
  _avg: RoutineAvgOrderByAggregateInput
  _count: RoutineCountOrderByAggregateInput
  _max: RoutineMaxOrderByAggregateInput
  _min: RoutineMinOrderByAggregateInput
  _sum: RoutineSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  name: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RoutineOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  durationInMinutes: SortOrder
  habits: RoutineHabitOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RoutineRelationFilter {
  is: RoutineWhereInput
  isNot: RoutineWhereInput
}

enum RoutineScalarFieldEnum {
  archivedAt
  createdAt
  durationInMinutes
  id
  name
  notes
  updatedAt
  userId
}

input RoutineScalarWhereWithAggregatesInput {
  AND: [RoutineScalarWhereWithAggregatesInput!]
  NOT: [RoutineScalarWhereWithAggregatesInput!]
  OR: [RoutineScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  durationInMinutes: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type RoutineSumAggregate {
  durationInMinutes: Int
  id: String
  userId: String
}

input RoutineSumOrderByAggregateInput {
  durationInMinutes: SortOrder
  id: SortOrder
  userId: SortOrder
}

input RoutineUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: NullableIntFieldUpdateOperationsInput
  habits: RoutineHabitUpdateManyWithoutRoutineInput
  name: StringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input RoutineUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input RoutineUpdateOneRequiredWithoutHabitsInput {
  connect: RoutineWhereUniqueInput
  connectOrCreate: RoutineCreateOrConnectWithoutHabitsInput
  create: RoutineCreateWithoutHabitsInput
  update: RoutineUpdateWithoutHabitsInput
  upsert: RoutineUpsertWithoutHabitsInput
}

input RoutineUpdateWithoutHabitsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  durationInMinutes: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input RoutineUpsertWithoutHabitsInput {
  create: RoutineCreateWithoutHabitsInput!
  update: RoutineUpdateWithoutHabitsInput!
}

input RoutineWhereInput {
  AND: [RoutineWhereInput!]
  NOT: [RoutineWhereInput!]
  OR: [RoutineWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  durationInMinutes: IntNullableFilter
  habits: RoutineHabitListRelationFilter
  id: StringFilter
  name: StringFilter
  notes: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input RoutineWhereUniqueInput {
  id: String
}

type ScheduleTemplate {
  _count: ScheduleTemplateCount
  actionScheduleTemplates(cursor: ActionScheduleTemplateWhereUniqueInput, distinct: [ActionScheduleTemplateScalarFieldEnum!], orderBy: [ActionScheduleTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleTemplateWhereInput): [ActionScheduleTemplate!]!
  chron: String
  frequency: FREQUENCY!
  id: String!
  multiplier: Int!
}

type ScheduleTemplateAvgAggregate {
  id: String
  multiplier: Float
}

input ScheduleTemplateAvgOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleTemplateCount {
  actionScheduleTemplates: Int!
}

type ScheduleTemplateCountAggregate {
  _all: Int!
  chron: Int!
  frequency: Int!
  id: String!
  multiplier: Int!
}

input ScheduleTemplateCountOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateCreateInput {
  actionScheduleTemplates: ActionScheduleTemplateCreateNestedManyWithoutScheduleTemplateInput
  chron: String
  frequency: FREQUENCY
  multiplier: Int
}

input ScheduleTemplateCreateManyInput {
  chron: String
  frequency: FREQUENCY
  id: String
  multiplier: Int
}

input ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput {
  connect: ScheduleTemplateWhereUniqueInput
  connectOrCreate: ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput
}

input ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput {
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput!
  where: ScheduleTemplateWhereUniqueInput!
}

input ScheduleTemplateCreateWithoutActionScheduleTemplatesInput {
  chron: String
  frequency: FREQUENCY
  multiplier: Int
}

type ScheduleTemplateGroupBy {
  _avg: ScheduleTemplateAvgAggregate
  _count: ScheduleTemplateCountAggregate
  _max: ScheduleTemplateMaxAggregate
  _min: ScheduleTemplateMinAggregate
  _sum: ScheduleTemplateSumAggregate
  chron: String
  frequency: FREQUENCY!
  id: String!
  multiplier: Int!
}

type ScheduleTemplateMaxAggregate {
  chron: String
  frequency: FREQUENCY
  id: String
  multiplier: Int
}

input ScheduleTemplateMaxOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleTemplateMinAggregate {
  chron: String
  frequency: FREQUENCY
  id: String
  multiplier: Int
}

input ScheduleTemplateMinOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateOrderByWithAggregationInput {
  _avg: ScheduleTemplateAvgOrderByAggregateInput
  _count: ScheduleTemplateCountOrderByAggregateInput
  _max: ScheduleTemplateMaxOrderByAggregateInput
  _min: ScheduleTemplateMinOrderByAggregateInput
  _sum: ScheduleTemplateSumOrderByAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateOrderByWithRelationInput {
  actionScheduleTemplates: ActionScheduleTemplateOrderByRelationAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateRelationFilter {
  is: ScheduleTemplateWhereInput
  isNot: ScheduleTemplateWhereInput
}

enum ScheduleTemplateScalarFieldEnum {
  chron
  frequency
  id
  multiplier
}

input ScheduleTemplateScalarWhereWithAggregatesInput {
  AND: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  NOT: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  OR: [ScheduleTemplateScalarWhereWithAggregatesInput!]
  chron: StringNullableWithAggregatesFilter
  frequency: EnumFREQUENCYWithAggregatesFilter
  id: StringWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
}

type ScheduleTemplateSumAggregate {
  id: String
  multiplier: Int
}

input ScheduleTemplateSumOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleTemplateUpdateInput {
  actionScheduleTemplates: ActionScheduleTemplateUpdateManyWithoutScheduleTemplateInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpdateManyMutationInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput {
  connect: ScheduleTemplateWhereUniqueInput
  connectOrCreate: ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput
  update: ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput
  upsert: ScheduleTemplateUpsertWithoutActionScheduleTemplatesInput
}

input ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumFREQUENCYFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleTemplateUpsertWithoutActionScheduleTemplatesInput {
  create: ScheduleTemplateCreateWithoutActionScheduleTemplatesInput!
  update: ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput!
}

input ScheduleTemplateWhereInput {
  AND: [ScheduleTemplateWhereInput!]
  NOT: [ScheduleTemplateWhereInput!]
  OR: [ScheduleTemplateWhereInput!]
  actionScheduleTemplates: ActionScheduleTemplateListRelationFilter
  chron: StringNullableFilter
  frequency: EnumFREQUENCYFilter
  id: StringFilter
  multiplier: IntFilter
}

input ScheduleTemplateWhereUniqueInput {
  id: String
}

type Shelving {
  archivedAt: DateTimeISO
  book: Book!
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  position: Int!
  rationale: String
  shelf: Bookshelf!
  shelfId: String!
  updatedAt: DateTimeISO!
}

type ShelvingAvgAggregate {
  bookId: Float
  id: String
  position: Float
  shelfId: Float
}

input ShelvingAvgOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  position: SortOrder
  shelfId: SortOrder
}

type ShelvingCountAggregate {
  _all: Int!
  archivedAt: Int!
  bookId: String!
  createdAt: Int!
  id: String!
  position: Int!
  rationale: Int!
  shelfId: String!
  updatedAt: Int!
}

input ShelvingCountOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  rationale: SortOrder
  shelfId: SortOrder
  updatedAt: SortOrder
}

input ShelvingCreateInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutShelvingsInput!
  createdAt: DateTimeISO
  position: Int
  rationale: String
  shelf: BookshelfCreateNestedOneWithoutShelvingsInput!
  updatedAt: DateTimeISO
}

input ShelvingCreateManyBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  position: Int
  rationale: String
  shelfId: String!
  updatedAt: DateTimeISO
}

input ShelvingCreateManyBookInputEnvelope {
  data: [ShelvingCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input ShelvingCreateManyInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  id: String
  position: Int
  rationale: String
  shelfId: String!
  updatedAt: DateTimeISO
}

input ShelvingCreateManyShelfInput {
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO
  id: String
  position: Int
  rationale: String
  updatedAt: DateTimeISO
}

input ShelvingCreateManyShelfInputEnvelope {
  data: [ShelvingCreateManyShelfInput!]!
  skipDuplicates: Boolean
}

input ShelvingCreateNestedManyWithoutBookInput {
  connect: [ShelvingWhereUniqueInput!]
  connectOrCreate: [ShelvingCreateOrConnectWithoutBookInput!]
  create: [ShelvingCreateWithoutBookInput!]
  createMany: ShelvingCreateManyBookInputEnvelope
}

input ShelvingCreateNestedManyWithoutShelfInput {
  connect: [ShelvingWhereUniqueInput!]
  connectOrCreate: [ShelvingCreateOrConnectWithoutShelfInput!]
  create: [ShelvingCreateWithoutShelfInput!]
  createMany: ShelvingCreateManyShelfInputEnvelope
}

input ShelvingCreateOrConnectWithoutBookInput {
  create: ShelvingCreateWithoutBookInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingCreateOrConnectWithoutShelfInput {
  create: ShelvingCreateWithoutShelfInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingCreateWithoutBookInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  position: Int
  rationale: String
  shelf: BookshelfCreateNestedOneWithoutShelvingsInput!
  updatedAt: DateTimeISO
}

input ShelvingCreateWithoutShelfInput {
  archivedAt: DateTimeISO
  book: BookCreateNestedOneWithoutShelvingsInput!
  createdAt: DateTimeISO
  position: Int
  rationale: String
  updatedAt: DateTimeISO
}

type ShelvingGroupBy {
  _avg: ShelvingAvgAggregate
  _count: ShelvingCountAggregate
  _max: ShelvingMaxAggregate
  _min: ShelvingMinAggregate
  _sum: ShelvingSumAggregate
  archivedAt: DateTimeISO
  bookId: String!
  createdAt: DateTimeISO!
  id: String!
  position: Int!
  rationale: String
  shelfId: String!
  updatedAt: DateTimeISO!
}

input ShelvingListRelationFilter {
  every: ShelvingWhereInput
  none: ShelvingWhereInput
  some: ShelvingWhereInput
}

type ShelvingMaxAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  id: String
  position: Int
  rationale: String
  shelfId: String
  updatedAt: DateTimeISO
}

input ShelvingMaxOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  rationale: SortOrder
  shelfId: SortOrder
  updatedAt: SortOrder
}

type ShelvingMinAggregate {
  archivedAt: DateTimeISO
  bookId: String
  createdAt: DateTimeISO
  id: String
  position: Int
  rationale: String
  shelfId: String
  updatedAt: DateTimeISO
}

input ShelvingMinOrderByAggregateInput {
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  rationale: SortOrder
  shelfId: SortOrder
  updatedAt: SortOrder
}

input ShelvingOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShelvingOrderByWithAggregationInput {
  _avg: ShelvingAvgOrderByAggregateInput
  _count: ShelvingCountOrderByAggregateInput
  _max: ShelvingMaxOrderByAggregateInput
  _min: ShelvingMinOrderByAggregateInput
  _sum: ShelvingSumOrderByAggregateInput
  archivedAt: SortOrder
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  rationale: SortOrder
  shelfId: SortOrder
  updatedAt: SortOrder
}

input ShelvingOrderByWithRelationInput {
  archivedAt: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  position: SortOrder
  rationale: SortOrder
  shelf: BookshelfOrderByWithRelationInput
  shelfId: SortOrder
  updatedAt: SortOrder
}

enum ShelvingScalarFieldEnum {
  archivedAt
  bookId
  createdAt
  id
  position
  rationale
  shelfId
  updatedAt
}

input ShelvingScalarWhereInput {
  AND: [ShelvingScalarWhereInput!]
  NOT: [ShelvingScalarWhereInput!]
  OR: [ShelvingScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  position: IntFilter
  rationale: StringNullableFilter
  shelfId: StringFilter
  updatedAt: DateTimeFilter
}

input ShelvingScalarWhereWithAggregatesInput {
  AND: [ShelvingScalarWhereWithAggregatesInput!]
  NOT: [ShelvingScalarWhereWithAggregatesInput!]
  OR: [ShelvingScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  position: IntWithAggregatesFilter
  rationale: StringNullableWithAggregatesFilter
  shelfId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ShelvingShelfIdPositionCompoundUniqueInput {
  position: Int!
  shelfId: String!
}

type ShelvingSumAggregate {
  bookId: String
  id: String
  position: Int
  shelfId: String
}

input ShelvingSumOrderByAggregateInput {
  bookId: SortOrder
  id: SortOrder
  position: SortOrder
  shelfId: SortOrder
}

input ShelvingUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutShelvingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  rationale: NullableStringFieldUpdateOperationsInput
  shelf: BookshelfUpdateOneRequiredWithoutShelvingsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShelvingUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  rationale: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShelvingUpdateManyWithWhereWithoutBookInput {
  data: ShelvingUpdateManyMutationInput!
  where: ShelvingScalarWhereInput!
}

input ShelvingUpdateManyWithWhereWithoutShelfInput {
  data: ShelvingUpdateManyMutationInput!
  where: ShelvingScalarWhereInput!
}

input ShelvingUpdateManyWithoutBookInput {
  connect: [ShelvingWhereUniqueInput!]
  connectOrCreate: [ShelvingCreateOrConnectWithoutBookInput!]
  create: [ShelvingCreateWithoutBookInput!]
  createMany: ShelvingCreateManyBookInputEnvelope
  delete: [ShelvingWhereUniqueInput!]
  deleteMany: [ShelvingScalarWhereInput!]
  disconnect: [ShelvingWhereUniqueInput!]
  set: [ShelvingWhereUniqueInput!]
  update: [ShelvingUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ShelvingUpdateManyWithWhereWithoutBookInput!]
  upsert: [ShelvingUpsertWithWhereUniqueWithoutBookInput!]
}

input ShelvingUpdateManyWithoutShelfInput {
  connect: [ShelvingWhereUniqueInput!]
  connectOrCreate: [ShelvingCreateOrConnectWithoutShelfInput!]
  create: [ShelvingCreateWithoutShelfInput!]
  createMany: ShelvingCreateManyShelfInputEnvelope
  delete: [ShelvingWhereUniqueInput!]
  deleteMany: [ShelvingScalarWhereInput!]
  disconnect: [ShelvingWhereUniqueInput!]
  set: [ShelvingWhereUniqueInput!]
  update: [ShelvingUpdateWithWhereUniqueWithoutShelfInput!]
  updateMany: [ShelvingUpdateManyWithWhereWithoutShelfInput!]
  upsert: [ShelvingUpsertWithWhereUniqueWithoutShelfInput!]
}

input ShelvingUpdateWithWhereUniqueWithoutBookInput {
  data: ShelvingUpdateWithoutBookInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingUpdateWithWhereUniqueWithoutShelfInput {
  data: ShelvingUpdateWithoutShelfInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingUpdateWithoutBookInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  rationale: NullableStringFieldUpdateOperationsInput
  shelf: BookshelfUpdateOneRequiredWithoutShelvingsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShelvingUpdateWithoutShelfInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutShelvingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  position: IntFieldUpdateOperationsInput
  rationale: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShelvingUpsertWithWhereUniqueWithoutBookInput {
  create: ShelvingCreateWithoutBookInput!
  update: ShelvingUpdateWithoutBookInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingUpsertWithWhereUniqueWithoutShelfInput {
  create: ShelvingCreateWithoutShelfInput!
  update: ShelvingUpdateWithoutShelfInput!
  where: ShelvingWhereUniqueInput!
}

input ShelvingWhereInput {
  AND: [ShelvingWhereInput!]
  NOT: [ShelvingWhereInput!]
  OR: [ShelvingWhereInput!]
  archivedAt: DateTimeNullableFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  position: IntFilter
  rationale: StringNullableFilter
  shelf: BookshelfRelationFilter
  shelfId: StringFilter
  updatedAt: DateTimeFilter
}

input ShelvingWhereUniqueInput {
  id: String
  shelfId_position: ShelvingShelfIdPositionCompoundUniqueInput
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount
  archivedAt: DateTimeISO
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  dueDate: DateTimeISO
  habit: Habit
  habitId: String
  id: String!
  parent: Task
  parentId: String
  plannedStartDate: DateTimeISO
  rank: Int!
  subtasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  title: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type TaskAvgAggregate {
  habitId: String
  id: String
  parentId: Float
  rank: Float
  userId: String
}

input TaskAvgOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  rank: SortOrder
  userId: SortOrder
}

type TaskCount {
  calendarEvents: Int!
  subtasks: Int!
}

type TaskCountAggregate {
  _all: Int!
  archivedAt: Int!
  completedAt: Int!
  createdAt: Int!
  description: Int!
  dueDate: Int!
  habitId: String!
  id: String!
  parentId: String!
  plannedStartDate: Int!
  rank: Int!
  title: Int!
  updatedAt: Int!
  userId: String!
}

input TaskCountOrderByAggregateInput {
  archivedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  plannedStartDate: SortOrder
  rank: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskCreateInput {
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutTaskInput
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habit: HabitCreateNestedOneWithoutTasksInput
  habitId: String
  parent: TaskCreateNestedOneWithoutSubtasksInput
  parentId: String
  plannedStartDate: DateTimeISO
  rank: Int
  subtasks: TaskCreateNestedManyWithoutParentInput
  title: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutTasksInput
  userId: String
}

input TaskCreateManyHabitInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  id: String
  parentId: Int
  plannedStartDate: DateTimeISO
  rank: Int
  title: String!
  updatedAt: DateTimeISO
  userId: String!
}

input TaskCreateManyHabitInputEnvelope {
  data: [TaskCreateManyHabitInput!]!
  skipDuplicates: Boolean
}

input TaskCreateManyInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String
  parentId: Int
  plannedStartDate: DateTimeISO
  rank: Int
  title: String!
  updatedAt: DateTimeISO
  userId: String!
}

input TaskCreateManyParentInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String
  plannedStartDate: DateTimeISO
  rank: Int
  title: String!
  updatedAt: DateTimeISO
  userId: String!
}

input TaskCreateManyParentInputEnvelope {
  data: [TaskCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input TaskCreateManyUserInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String
  parentId: Int
  plannedStartDate: DateTimeISO
  rank: Int
  title: String!
  updatedAt: DateTimeISO
}

input TaskCreateManyUserInputEnvelope {
  data: [TaskCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutHabitInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutHabitInput!]
  create: [TaskCreateWithoutHabitInput!]
  createMany: TaskCreateManyHabitInputEnvelope
}

input TaskCreateNestedManyWithoutParentInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutParentInput!]
  create: [TaskCreateWithoutParentInput!]
  createMany: TaskCreateManyParentInputEnvelope
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
}

input TaskCreateNestedOneWithoutCalendarEventsInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCalendarEventsInput
  create: TaskCreateWithoutCalendarEventsInput
}

input TaskCreateNestedOneWithoutSubtasksInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutSubtasksInput
  create: TaskCreateWithoutSubtasksInput
}

input TaskCreateOrConnectWithoutCalendarEventsInput {
  create: TaskCreateWithoutCalendarEventsInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutHabitInput {
  create: TaskCreateWithoutHabitInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutParentInput {
  create: TaskCreateWithoutParentInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutSubtasksInput {
  create: TaskCreateWithoutSubtasksInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutCalendarEventsInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habit: HabitCreateNestedOneWithoutTasksInput
  parent: TaskCreateNestedOneWithoutSubtasksInput
  plannedStartDate: DateTimeISO
  rank: Int
  subtasks: TaskCreateNestedManyWithoutParentInput
  title: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutHabitInput {
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutTaskInput
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  parent: TaskCreateNestedOneWithoutSubtasksInput
  plannedStartDate: DateTimeISO
  rank: Int
  subtasks: TaskCreateNestedManyWithoutParentInput
  title: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutParentInput {
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutTaskInput
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habit: HabitCreateNestedOneWithoutTasksInput
  plannedStartDate: DateTimeISO
  rank: Int
  subtasks: TaskCreateNestedManyWithoutParentInput
  title: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutSubtasksInput {
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutTaskInput
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habit: HabitCreateNestedOneWithoutTasksInput
  parent: TaskCreateNestedOneWithoutSubtasksInput
  plannedStartDate: DateTimeISO
  rank: Int
  title: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutUserInput {
  archivedAt: DateTimeISO
  calendarEvents: CalendarEventCreateNestedManyWithoutTaskInput
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habit: HabitCreateNestedOneWithoutTasksInput
  parent: TaskCreateNestedOneWithoutSubtasksInput
  plannedStartDate: DateTimeISO
  rank: Int
  subtasks: TaskCreateNestedManyWithoutParentInput
  title: String!
  updatedAt: DateTimeISO
}

type TaskGroupBy {
  _avg: TaskAvgAggregate
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  _sum: TaskSumAggregate
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String!
  parentId: String
  plannedStartDate: DateTimeISO
  rank: Int!
  title: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String
  parentId: String
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  updatedAt: DateTimeISO
  userId: String
}

input TaskMaxOrderByAggregateInput {
  archivedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  plannedStartDate: SortOrder
  rank: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type TaskMinAggregate {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: String
  id: String
  parentId: String
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  updatedAt: DateTimeISO
  userId: String
}

input TaskMinOrderByAggregateInput {
  archivedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  plannedStartDate: SortOrder
  rank: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _avg: TaskAvgOrderByAggregateInput
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  _sum: TaskSumOrderByAggregateInput
  archivedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  plannedStartDate: SortOrder
  rank: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByWithRelationInput {
  archivedAt: SortOrder
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  completedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  habit: HabitOrderByWithRelationInput
  habitId: SortOrder
  id: SortOrder
  parent: TaskOrderByWithRelationInput
  parentId: SortOrder
  plannedStartDate: SortOrder
  rank: SortOrder
  subtasks: TaskOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  archivedAt
  completedAt
  createdAt
  description
  dueDate
  habitId
  id
  parentId
  plannedStartDate
  rank
  title
  updatedAt
  userId
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  habitId: StringNullableFilter
  id: StringFilter
  parentId: StringNullableFilter
  plannedStartDate: DateTimeNullableFilter
  rank: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  completedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  dueDate: DateTimeNullableWithAggregatesFilter
  habitId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  parentId: IntNullableWithAggregatesFilter
  plannedStartDate: DateTimeNullableWithAggregatesFilter
  rank: IntWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type TaskSumAggregate {
  habitId: String
  id: String
  parentId: String
  rank: Int
  userId: String
}

input TaskSumOrderByAggregateInput {
  habitId: SortOrder
  id: SortOrder
  parentId: SortOrder
  rank: SortOrder
  userId: SortOrder
}

input TaskUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutTaskInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutTasksInput
  parent: TaskUpdateOneWithoutSubtasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  subtasks: TaskUpdateManyWithoutParentInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutHabitInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutParentInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutHabitInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutHabitInput!]
  create: [TaskCreateWithoutHabitInput!]
  createMany: TaskCreateManyHabitInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutHabitInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutHabitInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutHabitInput!]
}

input TaskUpdateManyWithoutParentInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutParentInput!]
  create: [TaskCreateWithoutParentInput!]
  createMany: TaskCreateManyParentInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutParentInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutParentInput!]
}

input TaskUpdateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateOneWithoutCalendarEventsInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCalendarEventsInput
  create: TaskCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutCalendarEventsInput
  upsert: TaskUpsertWithoutCalendarEventsInput
}

input TaskUpdateOneWithoutSubtasksInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutSubtasksInput
  create: TaskCreateWithoutSubtasksInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutSubtasksInput
  upsert: TaskUpsertWithoutSubtasksInput
}

input TaskUpdateWithWhereUniqueWithoutHabitInput {
  data: TaskUpdateWithoutHabitInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutParentInput {
  data: TaskUpdateWithoutParentInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutCalendarEventsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutTasksInput
  parent: TaskUpdateOneWithoutSubtasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  subtasks: TaskUpdateManyWithoutParentInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutHabitInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutTaskInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  parent: TaskUpdateOneWithoutSubtasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  subtasks: TaskUpdateManyWithoutParentInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutParentInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutTaskInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutTasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  subtasks: TaskUpdateManyWithoutParentInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutSubtasksInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutTaskInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutTasksInput
  parent: TaskUpdateOneWithoutSubtasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  calendarEvents: CalendarEventUpdateManyWithoutTaskInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  habit: HabitUpdateOneWithoutTasksInput
  parent: TaskUpdateOneWithoutSubtasksInput
  plannedStartDate: NullableDateTimeFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  subtasks: TaskUpdateManyWithoutParentInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutHabitInput {
  create: TaskCreateWithoutHabitInput!
  update: TaskUpdateWithoutHabitInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutParentInput {
  create: TaskCreateWithoutParentInput!
  update: TaskUpdateWithoutParentInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutCalendarEventsInput {
  create: TaskCreateWithoutCalendarEventsInput!
  update: TaskUpdateWithoutCalendarEventsInput!
}

input TaskUpsertWithoutSubtasksInput {
  create: TaskCreateWithoutSubtasksInput!
  update: TaskUpdateWithoutSubtasksInput!
}

input TaskUserIdParentIdRankCompoundUniqueInput {
  parentId: String!
  rank: Int!
  userId: String!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  archivedAt: DateTimeNullableFilter
  calendarEvents: CalendarEventListRelationFilter
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  habit: HabitRelationFilter
  habitId: StringNullableFilter
  id: StringFilter
  parent: TaskRelationFilter
  parentId: StringNullableFilter
  plannedStartDate: DateTimeNullableFilter
  rank: IntFilter
  subtasks: TaskListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input TaskWhereUniqueInput {
  id: String
  userId_parentId_rank: TaskUserIdParentIdRankCompoundUniqueInput
}

type User {
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  beliefs(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): [Belief!]!
  bookReviews(cursor: BookReviewWhereUniqueInput, distinct: [BookReviewScalarFieldEnum!], orderBy: [BookReviewOrderByWithRelationInput!], skip: Int, take: Int, where: BookReviewWhereInput): [BookReview!]!
  bookshelves(cursor: BookshelfWhereUniqueInput, distinct: [BookshelfScalarFieldEnum!], orderBy: [BookshelfOrderByWithRelationInput!], skip: Int, take: Int, where: BookshelfWhereInput): [Bookshelf!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  dashboards(cursor: DashboardWhereUniqueInput, distinct: [DashboardScalarFieldEnum!], orderBy: [DashboardOrderByWithRelationInput!], skip: Int, take: Int, where: DashboardWhereInput): [Dashboard!]!
  email: String!
  emailVerified: DateTimeISO
  habits(cursor: HabitWhereUniqueInput, distinct: [HabitScalarFieldEnum!], orderBy: [HabitOrderByWithRelationInput!], skip: Int, take: Int, where: HabitWhereInput): [Habit!]!
  id: String!
  identities(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): [Identity!]!
  image: String
  isAdmin: Boolean!
  lastLogin: DateTimeISO
  lists(cursor: ListWhereUniqueInput, distinct: [ListScalarFieldEnum!], orderBy: [ListOrderByWithRelationInput!], skip: Int, take: Int, where: ListWhereInput): [List!]!
  mantras(cursor: MantraWhereUniqueInput, distinct: [MantraScalarFieldEnum!], orderBy: [MantraOrderByWithRelationInput!], skip: Int, take: Int, where: MantraWhereInput): [Mantra!]!
  name: String
  notebookPermissions(cursor: NotebookUserPermissionWhereUniqueInput, distinct: [NotebookUserPermissionScalarFieldEnum!], orderBy: [NotebookUserPermissionOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookUserPermissionWhereInput): [NotebookUserPermission!]!
  notebooks(cursor: NotebookWhereUniqueInput, distinct: [NotebookScalarFieldEnum!], orderBy: [NotebookOrderByWithRelationInput!], skip: Int, take: Int, where: NotebookWhereInput): [Notebook!]!
  readings(cursor: ReadingWhereUniqueInput, distinct: [ReadingScalarFieldEnum!], orderBy: [ReadingOrderByWithRelationInput!], skip: Int, take: Int, where: ReadingWhereInput): [Reading!]!
  settings: JSON!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  values(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): [Value!]!
}

type UserAvgAggregate {
  id: String
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  emailVerified: Int!
  id: String!
  image: Int!
  isAdmin: Int!
  lastLogin: Int!
  name: Int!
  settings: Int!
  uid: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  lastLogin: SortOrder
  name: SortOrder
  settings: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutBookReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookReviewsInput
  create: UserCreateWithoutBookReviewsInput
}

input UserCreateNestedOneWithoutBookshelvesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookshelvesInput
  create: UserCreateWithoutBookshelvesInput
}

input UserCreateNestedOneWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
}

input UserCreateNestedOneWithoutDashboardsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDashboardsInput
  create: UserCreateWithoutDashboardsInput
}

input UserCreateNestedOneWithoutHabitsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutHabitsInput
  create: UserCreateWithoutHabitsInput
}

input UserCreateNestedOneWithoutListsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutListsInput
  create: UserCreateWithoutListsInput
}

input UserCreateNestedOneWithoutNotebookPermissionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotebookPermissionsInput
  create: UserCreateWithoutNotebookPermissionsInput
}

input UserCreateNestedOneWithoutNotebooksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotebooksInput
  create: UserCreateWithoutNotebooksInput
}

input UserCreateNestedOneWithoutReadingsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReadingsInput
  create: UserCreateWithoutReadingsInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBookReviewsInput {
  create: UserCreateWithoutBookReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBookshelvesInput {
  create: UserCreateWithoutBookshelvesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutDashboardsInput {
  create: UserCreateWithoutDashboardsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutHabitsInput {
  create: UserCreateWithoutHabitsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutListsInput {
  create: UserCreateWithoutListsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotebookPermissionsInput {
  create: UserCreateWithoutNotebookPermissionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotebooksInput {
  create: UserCreateWithoutNotebooksInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReadingsInput {
  create: UserCreateWithoutReadingsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutBookReviewsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutBookshelvesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutCalendarsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutDashboardsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutHabitsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutListsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutNotebookPermissionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutNotebooksInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReadingsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  settings: JSON
  tasks: TaskCreateNestedManyWithoutUserInput
  values: ValueCreateNestedManyWithoutUserInput
}

input UserCreateWithoutTasksInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  beliefs: BeliefCreateNestedManyWithoutUserInput
  bookReviews: BookReviewCreateNestedManyWithoutUserInput
  bookshelves: BookshelfCreateNestedManyWithoutOwnerInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  dashboards: DashboardCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  habits: HabitCreateNestedManyWithoutUserInput
  id: String
  identities: IdentityCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  lists: ListCreateNestedManyWithoutOwnerInput
  mantras: MantraCreateNestedManyWithoutUserInput
  name: String
  notebookPermissions: NotebookUserPermissionCreateNestedManyWithoutUserInput
  notebooks: NotebookCreateNestedManyWithoutOwnerInput
  readings: ReadingCreateNestedManyWithoutUserInput
  settings: JSON
  values: ValueCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  isAdmin: Boolean!
  lastLogin: DateTimeISO
  name: String
  settings: JSON!
  uid: String!
}

type UserMaxAggregate {
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  uid: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  lastLogin: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  uid: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  lastLogin: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  lastLogin: SortOrder
  name: SortOrder
  settings: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  beliefs: BeliefOrderByRelationAggregateInput
  bookReviews: BookReviewOrderByRelationAggregateInput
  bookshelves: BookshelfOrderByRelationAggregateInput
  calendars: CalendarOrderByRelationAggregateInput
  dashboards: DashboardOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  habits: HabitOrderByRelationAggregateInput
  id: SortOrder
  identities: IdentityOrderByRelationAggregateInput
  image: SortOrder
  isAdmin: SortOrder
  lastLogin: SortOrder
  lists: ListOrderByRelationAggregateInput
  name: SortOrder
  notebookPermissions: NotebookUserPermissionOrderByRelationAggregateInput
  notebooks: NotebookOrderByRelationAggregateInput
  readings: ReadingOrderByRelationAggregateInput
  settings: SortOrder
  tasks: TaskOrderByRelationAggregateInput
  values: ValueOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  emailVerified
  id
  image
  isAdmin
  lastLogin
  name
  settings
  uid
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  lastLogin: DateTimeNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  settings: JsonWithAggregatesFilter
  uid: StringWithAggregatesFilter
}

type UserSumAggregate {
  id: String
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  settings: JSON
  uid: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutBookReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookReviewsInput
  create: UserCreateWithoutBookReviewsInput
  update: UserUpdateWithoutBookReviewsInput
  upsert: UserUpsertWithoutBookReviewsInput
}

input UserUpdateOneRequiredWithoutBookshelvesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookshelvesInput
  create: UserCreateWithoutBookshelvesInput
  update: UserUpdateWithoutBookshelvesInput
  upsert: UserUpsertWithoutBookshelvesInput
}

input UserUpdateOneRequiredWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
  update: UserUpdateWithoutCalendarsInput
  upsert: UserUpsertWithoutCalendarsInput
}

input UserUpdateOneRequiredWithoutDashboardsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDashboardsInput
  create: UserCreateWithoutDashboardsInput
  update: UserUpdateWithoutDashboardsInput
  upsert: UserUpsertWithoutDashboardsInput
}

input UserUpdateOneRequiredWithoutHabitsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutHabitsInput
  create: UserCreateWithoutHabitsInput
  update: UserUpdateWithoutHabitsInput
  upsert: UserUpsertWithoutHabitsInput
}

input UserUpdateOneRequiredWithoutListsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutListsInput
  create: UserCreateWithoutListsInput
  update: UserUpdateWithoutListsInput
  upsert: UserUpsertWithoutListsInput
}

input UserUpdateOneRequiredWithoutNotebookPermissionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotebookPermissionsInput
  create: UserCreateWithoutNotebookPermissionsInput
  update: UserUpdateWithoutNotebookPermissionsInput
  upsert: UserUpsertWithoutNotebookPermissionsInput
}

input UserUpdateOneRequiredWithoutNotebooksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotebooksInput
  create: UserCreateWithoutNotebooksInput
  update: UserUpdateWithoutNotebooksInput
  upsert: UserUpsertWithoutNotebooksInput
}

input UserUpdateOneRequiredWithoutReadingsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReadingsInput
  create: UserCreateWithoutReadingsInput
  update: UserUpdateWithoutReadingsInput
  upsert: UserUpsertWithoutReadingsInput
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithoutAccountsInput {
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutBookReviewsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutBookshelvesInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutCalendarsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutDashboardsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutHabitsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutListsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotebookPermissionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotebooksInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutReadingsInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  settings: JSON
  tasks: TaskUpdateManyWithoutUserInput
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpdateWithoutTasksInput {
  accounts: AccountUpdateManyWithoutUserInput
  beliefs: BeliefUpdateManyWithoutUserInput
  bookReviews: BookReviewUpdateManyWithoutUserInput
  bookshelves: BookshelfUpdateManyWithoutOwnerInput
  calendars: CalendarUpdateManyWithoutUserInput
  dashboards: DashboardUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  habits: HabitUpdateManyWithoutUserInput
  identities: IdentityUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastLogin: NullableDateTimeFieldUpdateOperationsInput
  lists: ListUpdateManyWithoutOwnerInput
  mantras: MantraUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  notebookPermissions: NotebookUserPermissionUpdateManyWithoutUserInput
  notebooks: NotebookUpdateManyWithoutOwnerInput
  readings: ReadingUpdateManyWithoutUserInput
  settings: JSON
  uid: StringFieldUpdateOperationsInput
  values: ValueUpdateManyWithoutUserInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutBookReviewsInput {
  create: UserCreateWithoutBookReviewsInput!
  update: UserUpdateWithoutBookReviewsInput!
}

input UserUpsertWithoutBookshelvesInput {
  create: UserCreateWithoutBookshelvesInput!
  update: UserUpdateWithoutBookshelvesInput!
}

input UserUpsertWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  update: UserUpdateWithoutCalendarsInput!
}

input UserUpsertWithoutDashboardsInput {
  create: UserCreateWithoutDashboardsInput!
  update: UserUpdateWithoutDashboardsInput!
}

input UserUpsertWithoutHabitsInput {
  create: UserCreateWithoutHabitsInput!
  update: UserUpdateWithoutHabitsInput!
}

input UserUpsertWithoutListsInput {
  create: UserCreateWithoutListsInput!
  update: UserUpdateWithoutListsInput!
}

input UserUpsertWithoutNotebookPermissionsInput {
  create: UserCreateWithoutNotebookPermissionsInput!
  update: UserUpdateWithoutNotebookPermissionsInput!
}

input UserUpsertWithoutNotebooksInput {
  create: UserCreateWithoutNotebooksInput!
  update: UserUpdateWithoutNotebooksInput!
}

input UserUpsertWithoutReadingsInput {
  create: UserCreateWithoutReadingsInput!
  update: UserUpdateWithoutReadingsInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  bookReviews: BookReviewListRelationFilter
  bookshelves: BookshelfListRelationFilter
  calendars: CalendarListRelationFilter
  dashboards: DashboardListRelationFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isAdmin: BoolFilter
  lastLogin: DateTimeNullableFilter
  lists: ListListRelationFilter
  name: StringNullableFilter
  notebookPermissions: NotebookUserPermissionListRelationFilter
  notebooks: NotebookListRelationFilter
  readings: ReadingListRelationFilter
  settings: JsonFilter
  tasks: TaskListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Value {
  _count: ValueCount
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type ValueAvgAggregate {
  id: String
}

input ValueAvgOrderByAggregateInput {
  id: SortOrder
}

type ValueCount {
  values: Int!
}

type ValueCountAggregate {
  _all: Int!
  archivedAt: Int!
  createdAt: Int!
  description: Int!
  id: String!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input ValueCountOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueCreateInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input ValueCreateManyInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  slug: String!
  updatedAt: DateTimeISO
}

input ValueCreateManyUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
}

input ValueCreateManyUserInputEnvelope {
  data: [ValueCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ValueCreateNestedManyWithoutUserInput {
  connect: [ValueWhereUniqueInput!]
  connectOrCreate: [ValueCreateOrConnectWithoutUserInput!]
  create: [ValueCreateWithoutUserInput!]
  createMany: ValueCreateManyUserInputEnvelope
}

input ValueCreateOrConnectWithoutUserInput {
  create: ValueCreateWithoutUserInput!
  where: ValueWhereUniqueInput!
}

input ValueCreateWithoutUserInput {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  isPublic: Boolean
  name: String!
  updatedAt: DateTimeISO
}

type ValueGroupBy {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  slug: String!
  updatedAt: DateTimeISO!
}

type ValueMaxAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input ValueMaxOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type ValueMinAggregate {
  archivedAt: DateTimeISO
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  slug: String
  updatedAt: DateTimeISO
}

input ValueMinOrderByAggregateInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input ValueOrderByWithAggregationInput {
  _avg: ValueAvgOrderByAggregateInput
  _count: ValueCountOrderByAggregateInput
  _max: ValueMaxOrderByAggregateInput
  _min: ValueMinOrderByAggregateInput
  _sum: ValueSumOrderByAggregateInput
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByWithRelationInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
  values: ValueOrderByRelationAggregateInput
}

enum ValueScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input ValueScalarWhereInput {
  AND: [ValueScalarWhereInput!]
  NOT: [ValueScalarWhereInput!]
  OR: [ValueScalarWhereInput!]
  archivedAt: DateTimeNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mantraId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ValueScalarWhereWithAggregatesInput {
  AND: [ValueScalarWhereWithAggregatesInput!]
  NOT: [ValueScalarWhereWithAggregatesInput!]
  OR: [ValueScalarWhereWithAggregatesInput!]
  archivedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ValueSumAggregate {
  id: String
}

input ValueSumOrderByAggregateInput {
  id: SortOrder
}

input ValueUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ValueUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ValueUpdateManyWithWhereWithoutUserInput {
  data: ValueUpdateManyMutationInput!
  where: ValueScalarWhereInput!
}

input ValueUpdateManyWithoutUserInput {
  connect: [ValueWhereUniqueInput!]
  connectOrCreate: [ValueCreateOrConnectWithoutUserInput!]
  create: [ValueCreateWithoutUserInput!]
  createMany: ValueCreateManyUserInputEnvelope
  delete: [ValueWhereUniqueInput!]
  deleteMany: [ValueScalarWhereInput!]
  disconnect: [ValueWhereUniqueInput!]
  set: [ValueWhereUniqueInput!]
  update: [ValueUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ValueUpdateManyWithWhereWithoutUserInput!]
  upsert: [ValueUpsertWithWhereUniqueWithoutUserInput!]
}

input ValueUpdateWithWhereUniqueWithoutUserInput {
  data: ValueUpdateWithoutUserInput!
  where: ValueWhereUniqueInput!
}

input ValueUpdateWithoutUserInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ValueUpsertWithWhereUniqueWithoutUserInput {
  create: ValueCreateWithoutUserInput!
  update: ValueUpdateWithoutUserInput!
  where: ValueWhereUniqueInput!
}

input ValueWhereInput {
  AND: [ValueWhereInput!]
  NOT: [ValueWhereInput!]
  OR: [ValueWhereInput!]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ValueWhereUniqueInput {
  id: String
  slug: String
}
