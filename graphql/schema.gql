# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: String!
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  user: User!
  userId: String!
}

type AccountCountAggregate {
  _all: Int!
  id: Int!
  provider: Int!
  providerAccountId: Int!
  type: Int!
  uid: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  userId: String!
}

input AccountCreateManyUserInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  id: String
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
}

type AccountGroupBy {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  id: String!
  provider: String!
  providerAccountId: String!
  type: String!
  uid: String!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  id: String
  provider: String
  providerAccountId: String
  type: String
  uid: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  id: String
  provider: String
  providerAccountId: String
  type: String
  uid: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  type: SortOrder
  uid: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  id
  provider
  providerAccountId
  type
  uid
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  id: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  type: StringFilter
  uid: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  type: StringWithAggregatesFilter
  uid: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AccountUpdateInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  uid: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  id: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  type: StringFilter
  uid: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type Action {
  UserAction(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
  _count: ActionCount!
  completions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  description: String
  id: Int!
  identityRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  name: String!
  schedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  slug: String!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type ActionAvgAggregate {
  id: Float
}

input ActionAvgOrderByAggregateInput {
  id: SortOrder
}

type ActionCompletion {
  action: Action!
  actionId: Int!
  date: DateTime!
  id: Int!
  user: User!
  userId: String!
}

type ActionCompletionAvgAggregate {
  actionId: Float
  id: Float
}

input ActionCompletionAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

type ActionCompletionCountAggregate {
  _all: Int!
  actionId: Int!
  date: Int!
  id: Int!
  userId: Int!
}

input ActionCompletionCountOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionCreateInput {
  action: ActionCreateNestedOneWithoutCompletionsInput!
  date: DateTime
  user: UserCreateNestedOneWithoutActionCompletionsInput!
}

input ActionCompletionCreateManyActionInput {
  date: DateTime
  id: Int
  userId: String!
}

input ActionCompletionCreateManyActionInputEnvelope {
  data: [ActionCompletionCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input ActionCompletionCreateManyInput {
  actionId: Int!
  date: DateTime
  id: Int
  userId: String!
}

input ActionCompletionCreateManyUserInput {
  actionId: Int!
  date: DateTime
  id: Int
}

input ActionCompletionCreateManyUserInputEnvelope {
  data: [ActionCompletionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ActionCompletionCreateNestedManyWithoutActionInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutActionInput!]
  create: [ActionCompletionCreateWithoutActionInput!]
  createMany: ActionCompletionCreateManyActionInputEnvelope
}

input ActionCompletionCreateNestedManyWithoutUserInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutUserInput!]
  create: [ActionCompletionCreateWithoutUserInput!]
  createMany: ActionCompletionCreateManyUserInputEnvelope
}

input ActionCompletionCreateOrConnectWithoutActionInput {
  create: ActionCompletionCreateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionCreateOrConnectWithoutUserInput {
  create: ActionCompletionCreateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionCreateWithoutActionInput {
  date: DateTime
  user: UserCreateNestedOneWithoutActionCompletionsInput!
}

input ActionCompletionCreateWithoutUserInput {
  action: ActionCreateNestedOneWithoutCompletionsInput!
  date: DateTime
}

type ActionCompletionGroupBy {
  _avg: ActionCompletionAvgAggregate
  _count: ActionCompletionCountAggregate
  _max: ActionCompletionMaxAggregate
  _min: ActionCompletionMinAggregate
  _sum: ActionCompletionSumAggregate
  actionId: Int!
  date: DateTime!
  id: Int!
  userId: String!
}

input ActionCompletionListRelationFilter {
  every: ActionCompletionWhereInput
  none: ActionCompletionWhereInput
  some: ActionCompletionWhereInput
}

type ActionCompletionMaxAggregate {
  actionId: Int
  date: DateTime
  id: Int
  userId: String
}

input ActionCompletionMaxOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ActionCompletionMinAggregate {
  actionId: Int
  date: DateTime
  id: Int
  userId: String
}

input ActionCompletionMinOrderByAggregateInput {
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionCompletionOrderByWithAggregationInput {
  _avg: ActionCompletionAvgOrderByAggregateInput
  _count: ActionCompletionCountOrderByAggregateInput
  _max: ActionCompletionMaxOrderByAggregateInput
  _min: ActionCompletionMinOrderByAggregateInput
  _sum: ActionCompletionSumOrderByAggregateInput
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ActionCompletionOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  date: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ActionCompletionScalarFieldEnum {
  actionId
  date
  id
  userId
}

input ActionCompletionScalarWhereInput {
  AND: [ActionCompletionScalarWhereInput!]
  NOT: [ActionCompletionScalarWhereInput!]
  OR: [ActionCompletionScalarWhereInput!]
  actionId: IntFilter
  date: DateTimeFilter
  id: IntFilter
  userId: StringFilter
}

input ActionCompletionScalarWhereWithAggregatesInput {
  AND: [ActionCompletionScalarWhereWithAggregatesInput!]
  NOT: [ActionCompletionScalarWhereWithAggregatesInput!]
  OR: [ActionCompletionScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type ActionCompletionSumAggregate {
  actionId: Int
  id: Int
}

input ActionCompletionSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

input ActionCompletionUpdateInput {
  action: ActionUpdateOneRequiredWithoutCompletionsInput
  date: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionCompletionsInput
}

input ActionCompletionUpdateManyMutationInput {
  date: DateTimeFieldUpdateOperationsInput
}

input ActionCompletionUpdateManyWithWhereWithoutActionInput {
  data: ActionCompletionUpdateManyMutationInput!
  where: ActionCompletionScalarWhereInput!
}

input ActionCompletionUpdateManyWithWhereWithoutUserInput {
  data: ActionCompletionUpdateManyMutationInput!
  where: ActionCompletionScalarWhereInput!
}

input ActionCompletionUpdateManyWithoutActionInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutActionInput!]
  create: [ActionCompletionCreateWithoutActionInput!]
  createMany: ActionCompletionCreateManyActionInputEnvelope
  delete: [ActionCompletionWhereUniqueInput!]
  deleteMany: [ActionCompletionScalarWhereInput!]
  disconnect: [ActionCompletionWhereUniqueInput!]
  set: [ActionCompletionWhereUniqueInput!]
  update: [ActionCompletionUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [ActionCompletionUpdateManyWithWhereWithoutActionInput!]
  upsert: [ActionCompletionUpsertWithWhereUniqueWithoutActionInput!]
}

input ActionCompletionUpdateManyWithoutUserInput {
  connect: [ActionCompletionWhereUniqueInput!]
  connectOrCreate: [ActionCompletionCreateOrConnectWithoutUserInput!]
  create: [ActionCompletionCreateWithoutUserInput!]
  createMany: ActionCompletionCreateManyUserInputEnvelope
  delete: [ActionCompletionWhereUniqueInput!]
  deleteMany: [ActionCompletionScalarWhereInput!]
  disconnect: [ActionCompletionWhereUniqueInput!]
  set: [ActionCompletionWhereUniqueInput!]
  update: [ActionCompletionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ActionCompletionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ActionCompletionUpsertWithWhereUniqueWithoutUserInput!]
}

input ActionCompletionUpdateWithWhereUniqueWithoutActionInput {
  data: ActionCompletionUpdateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpdateWithWhereUniqueWithoutUserInput {
  data: ActionCompletionUpdateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpdateWithoutActionInput {
  date: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionCompletionsInput
}

input ActionCompletionUpdateWithoutUserInput {
  action: ActionUpdateOneRequiredWithoutCompletionsInput
  date: DateTimeFieldUpdateOperationsInput
}

input ActionCompletionUpsertWithWhereUniqueWithoutActionInput {
  create: ActionCompletionCreateWithoutActionInput!
  update: ActionCompletionUpdateWithoutActionInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionUpsertWithWhereUniqueWithoutUserInput {
  create: ActionCompletionCreateWithoutUserInput!
  update: ActionCompletionUpdateWithoutUserInput!
  where: ActionCompletionWhereUniqueInput!
}

input ActionCompletionWhereInput {
  AND: [ActionCompletionWhereInput!]
  NOT: [ActionCompletionWhereInput!]
  OR: [ActionCompletionWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  date: DateTimeFilter
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ActionCompletionWhereUniqueInput {
  id: Int
}

type ActionCount {
  UserAction: Int!
  completions: Int!
  identityRelations: Int!
  schedules: Int!
  users: Int!
}

type ActionCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input ActionCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionCreateInput {
  UserAction: UserActionCreateNestedManyWithoutActionInput
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutActionInput
  slug: String!
  users: UserCreateNestedManyWithoutActionsInput
}

input ActionCreateManyInput {
  description: String
  id: Int
  name: String!
  slug: String!
}

input ActionCreateNestedManyWithoutUsersInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutUsersInput!]
  create: [ActionCreateWithoutUsersInput!]
}

input ActionCreateNestedOneWithoutCompletionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutCompletionsInput
  create: ActionCreateWithoutCompletionsInput
}

input ActionCreateNestedOneWithoutIdentityRelationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutIdentityRelationsInput
  create: ActionCreateWithoutIdentityRelationsInput
}

input ActionCreateNestedOneWithoutSchedulesInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutSchedulesInput
  create: ActionCreateWithoutSchedulesInput
}

input ActionCreateNestedOneWithoutUserActionInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutUserActionInput
  create: ActionCreateWithoutUserActionInput
}

input ActionCreateOrConnectWithoutCompletionsInput {
  create: ActionCreateWithoutCompletionsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutIdentityRelationsInput {
  create: ActionCreateWithoutIdentityRelationsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutSchedulesInput {
  create: ActionCreateWithoutSchedulesInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutUserActionInput {
  create: ActionCreateWithoutUserActionInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutUsersInput {
  create: ActionCreateWithoutUsersInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutCompletionsInput {
  UserAction: UserActionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutActionInput
  slug: String!
  users: UserCreateNestedManyWithoutActionsInput
}

input ActionCreateWithoutIdentityRelationsInput {
  UserAction: UserActionCreateNestedManyWithoutActionInput
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutActionInput
  slug: String!
  users: UserCreateNestedManyWithoutActionsInput
}

input ActionCreateWithoutSchedulesInput {
  UserAction: UserActionCreateNestedManyWithoutActionInput
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  slug: String!
  users: UserCreateNestedManyWithoutActionsInput
}

input ActionCreateWithoutUserActionInput {
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutActionInput
  slug: String!
  users: UserCreateNestedManyWithoutActionsInput
}

input ActionCreateWithoutUsersInput {
  UserAction: UserActionCreateNestedManyWithoutActionInput
  completions: ActionCompletionCreateNestedManyWithoutActionInput
  description: String
  identityRelations: IdentityActionRelationCreateNestedManyWithoutActionInput
  name: String!
  schedules: ActionScheduleCreateNestedManyWithoutActionInput
  slug: String!
}

type ActionGroupBy {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
  description: String
  id: Int!
  name: String!
  slug: String!
}

input ActionListRelationFilter {
  every: ActionWhereInput
  none: ActionWhereInput
  some: ActionWhereInput
}

type ActionMaxAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input ActionMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type ActionMinAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input ActionMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionOrderByWithAggregationInput {
  _avg: ActionAvgOrderByAggregateInput
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  _sum: ActionSumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ActionOrderByWithRelationInput {
  UserAction: UserActionOrderByRelationAggregateInput
  completions: ActionCompletionOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  identityRelations: IdentityActionRelationOrderByRelationAggregateInput
  name: SortOrder
  schedules: ActionScheduleOrderByRelationAggregateInput
  slug: SortOrder
  users: UserOrderByRelationAggregateInput
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  description
  id
  name
  slug
}

input ActionScalarWhereInput {
  AND: [ActionScalarWhereInput!]
  NOT: [ActionScalarWhereInput!]
  OR: [ActionScalarWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type ActionSchedule {
  _count: ActionScheduleCount!
  action: Action!
  actionId: Int!
  id: Int!
  quantity: Int!
  schedule: Schedule!
  scheduleId: Int!
  userActionSchedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
}

input ActionScheduleActionIdScheduleIdCompoundUniqueInput {
  actionId: Int!
  scheduleId: Int!
}

type ActionScheduleAvgAggregate {
  actionId: Float
  id: Float
  quantity: Float
  scheduleId: Float
}

input ActionScheduleAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

type ActionScheduleCount {
  userActionSchedules: Int!
}

type ActionScheduleCountAggregate {
  _all: Int!
  actionId: Int!
  id: Int!
  quantity: Int!
  scheduleId: Int!
}

input ActionScheduleCountOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

input ActionScheduleCreateInput {
  action: ActionCreateNestedOneWithoutSchedulesInput!
  quantity: Int
  schedule: ScheduleCreateNestedOneWithoutActionSchedulesInput!
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleInput
}

input ActionScheduleCreateManyActionInput {
  id: Int
  quantity: Int
  scheduleId: Int!
}

input ActionScheduleCreateManyActionInputEnvelope {
  data: [ActionScheduleCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleCreateManyInput {
  actionId: Int!
  id: Int
  quantity: Int
  scheduleId: Int!
}

input ActionScheduleCreateManyScheduleInput {
  actionId: Int!
  id: Int
  quantity: Int
}

input ActionScheduleCreateManyScheduleInputEnvelope {
  data: [ActionScheduleCreateManyScheduleInput!]!
  skipDuplicates: Boolean
}

input ActionScheduleCreateNestedManyWithoutActionInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutActionInput!]
  create: [ActionScheduleCreateWithoutActionInput!]
  createMany: ActionScheduleCreateManyActionInputEnvelope
}

input ActionScheduleCreateNestedManyWithoutScheduleInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutScheduleInput!]
  create: [ActionScheduleCreateWithoutScheduleInput!]
  createMany: ActionScheduleCreateManyScheduleInputEnvelope
}

input ActionScheduleCreateNestedOneWithoutUserActionSchedulesInput {
  connect: ActionScheduleWhereUniqueInput
  connectOrCreate: ActionScheduleCreateOrConnectWithoutUserActionSchedulesInput
  create: ActionScheduleCreateWithoutUserActionSchedulesInput
}

input ActionScheduleCreateOrConnectWithoutActionInput {
  create: ActionScheduleCreateWithoutActionInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateOrConnectWithoutScheduleInput {
  create: ActionScheduleCreateWithoutScheduleInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateOrConnectWithoutUserActionSchedulesInput {
  create: ActionScheduleCreateWithoutUserActionSchedulesInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleCreateWithoutActionInput {
  quantity: Int
  schedule: ScheduleCreateNestedOneWithoutActionSchedulesInput!
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleInput
}

input ActionScheduleCreateWithoutScheduleInput {
  action: ActionCreateNestedOneWithoutSchedulesInput!
  quantity: Int
  userActionSchedules: UserActionScheduleCreateNestedManyWithoutActionScheduleInput
}

input ActionScheduleCreateWithoutUserActionSchedulesInput {
  action: ActionCreateNestedOneWithoutSchedulesInput!
  quantity: Int
  schedule: ScheduleCreateNestedOneWithoutActionSchedulesInput!
}

type ActionScheduleGroupBy {
  _avg: ActionScheduleAvgAggregate
  _count: ActionScheduleCountAggregate
  _max: ActionScheduleMaxAggregate
  _min: ActionScheduleMinAggregate
  _sum: ActionScheduleSumAggregate
  actionId: Int!
  id: Int!
  quantity: Int!
  scheduleId: Int!
}

input ActionScheduleListRelationFilter {
  every: ActionScheduleWhereInput
  none: ActionScheduleWhereInput
  some: ActionScheduleWhereInput
}

type ActionScheduleMaxAggregate {
  actionId: Int
  id: Int
  quantity: Int
  scheduleId: Int
}

input ActionScheduleMaxOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

type ActionScheduleMinAggregate {
  actionId: Int
  id: Int
  quantity: Int
  scheduleId: Int
}

input ActionScheduleMinOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

input ActionScheduleOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionScheduleOrderByWithAggregationInput {
  _avg: ActionScheduleAvgOrderByAggregateInput
  _count: ActionScheduleCountOrderByAggregateInput
  _max: ActionScheduleMaxOrderByAggregateInput
  _min: ActionScheduleMinOrderByAggregateInput
  _sum: ActionScheduleSumOrderByAggregateInput
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

input ActionScheduleOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  schedule: ScheduleOrderByWithRelationInput
  scheduleId: SortOrder
  userActionSchedules: UserActionScheduleOrderByRelationAggregateInput
}

input ActionScheduleRelationFilter {
  is: ActionScheduleWhereInput
  isNot: ActionScheduleWhereInput
}

enum ActionScheduleScalarFieldEnum {
  actionId
  id
  quantity
  scheduleId
}

input ActionScheduleScalarWhereInput {
  AND: [ActionScheduleScalarWhereInput!]
  NOT: [ActionScheduleScalarWhereInput!]
  OR: [ActionScheduleScalarWhereInput!]
  actionId: IntFilter
  id: IntFilter
  quantity: IntFilter
  scheduleId: IntFilter
}

input ActionScheduleScalarWhereWithAggregatesInput {
  AND: [ActionScheduleScalarWhereWithAggregatesInput!]
  NOT: [ActionScheduleScalarWhereWithAggregatesInput!]
  OR: [ActionScheduleScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  scheduleId: IntWithAggregatesFilter
}

type ActionScheduleSumAggregate {
  actionId: Int
  id: Int
  quantity: Int
  scheduleId: Int
}

input ActionScheduleSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  quantity: SortOrder
  scheduleId: SortOrder
}

input ActionScheduleUpdateInput {
  action: ActionUpdateOneRequiredWithoutSchedulesInput
  quantity: IntFieldUpdateOperationsInput
  schedule: ScheduleUpdateOneRequiredWithoutActionSchedulesInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleInput
}

input ActionScheduleUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
}

input ActionScheduleUpdateManyWithWhereWithoutActionInput {
  data: ActionScheduleUpdateManyMutationInput!
  where: ActionScheduleScalarWhereInput!
}

input ActionScheduleUpdateManyWithWhereWithoutScheduleInput {
  data: ActionScheduleUpdateManyMutationInput!
  where: ActionScheduleScalarWhereInput!
}

input ActionScheduleUpdateManyWithoutActionInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutActionInput!]
  create: [ActionScheduleCreateWithoutActionInput!]
  createMany: ActionScheduleCreateManyActionInputEnvelope
  delete: [ActionScheduleWhereUniqueInput!]
  deleteMany: [ActionScheduleScalarWhereInput!]
  disconnect: [ActionScheduleWhereUniqueInput!]
  set: [ActionScheduleWhereUniqueInput!]
  update: [ActionScheduleUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [ActionScheduleUpdateManyWithWhereWithoutActionInput!]
  upsert: [ActionScheduleUpsertWithWhereUniqueWithoutActionInput!]
}

input ActionScheduleUpdateManyWithoutScheduleInput {
  connect: [ActionScheduleWhereUniqueInput!]
  connectOrCreate: [ActionScheduleCreateOrConnectWithoutScheduleInput!]
  create: [ActionScheduleCreateWithoutScheduleInput!]
  createMany: ActionScheduleCreateManyScheduleInputEnvelope
  delete: [ActionScheduleWhereUniqueInput!]
  deleteMany: [ActionScheduleScalarWhereInput!]
  disconnect: [ActionScheduleWhereUniqueInput!]
  set: [ActionScheduleWhereUniqueInput!]
  update: [ActionScheduleUpdateWithWhereUniqueWithoutScheduleInput!]
  updateMany: [ActionScheduleUpdateManyWithWhereWithoutScheduleInput!]
  upsert: [ActionScheduleUpsertWithWhereUniqueWithoutScheduleInput!]
}

input ActionScheduleUpdateOneRequiredWithoutUserActionSchedulesInput {
  connect: ActionScheduleWhereUniqueInput
  connectOrCreate: ActionScheduleCreateOrConnectWithoutUserActionSchedulesInput
  create: ActionScheduleCreateWithoutUserActionSchedulesInput
  update: ActionScheduleUpdateWithoutUserActionSchedulesInput
  upsert: ActionScheduleUpsertWithoutUserActionSchedulesInput
}

input ActionScheduleUpdateWithWhereUniqueWithoutActionInput {
  data: ActionScheduleUpdateWithoutActionInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpdateWithWhereUniqueWithoutScheduleInput {
  data: ActionScheduleUpdateWithoutScheduleInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpdateWithoutActionInput {
  quantity: IntFieldUpdateOperationsInput
  schedule: ScheduleUpdateOneRequiredWithoutActionSchedulesInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleInput
}

input ActionScheduleUpdateWithoutScheduleInput {
  action: ActionUpdateOneRequiredWithoutSchedulesInput
  quantity: IntFieldUpdateOperationsInput
  userActionSchedules: UserActionScheduleUpdateManyWithoutActionScheduleInput
}

input ActionScheduleUpdateWithoutUserActionSchedulesInput {
  action: ActionUpdateOneRequiredWithoutSchedulesInput
  quantity: IntFieldUpdateOperationsInput
  schedule: ScheduleUpdateOneRequiredWithoutActionSchedulesInput
}

input ActionScheduleUpsertWithWhereUniqueWithoutActionInput {
  create: ActionScheduleCreateWithoutActionInput!
  update: ActionScheduleUpdateWithoutActionInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpsertWithWhereUniqueWithoutScheduleInput {
  create: ActionScheduleCreateWithoutScheduleInput!
  update: ActionScheduleUpdateWithoutScheduleInput!
  where: ActionScheduleWhereUniqueInput!
}

input ActionScheduleUpsertWithoutUserActionSchedulesInput {
  create: ActionScheduleCreateWithoutUserActionSchedulesInput!
  update: ActionScheduleUpdateWithoutUserActionSchedulesInput!
}

input ActionScheduleWhereInput {
  AND: [ActionScheduleWhereInput!]
  NOT: [ActionScheduleWhereInput!]
  OR: [ActionScheduleWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  id: IntFilter
  quantity: IntFilter
  schedule: ScheduleRelationFilter
  scheduleId: IntFilter
  userActionSchedules: UserActionScheduleListRelationFilter
}

input ActionScheduleWhereUniqueInput {
  actionId_scheduleId: ActionScheduleActionIdScheduleIdCompoundUniqueInput
  id: Int
}

type ActionSumAggregate {
  id: Int
}

input ActionSumOrderByAggregateInput {
  id: SortOrder
}

input ActionUpdateInput {
  UserAction: UserActionUpdateManyWithoutActionInput
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutActionsInput
}

input ActionUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input ActionUpdateManyWithWhereWithoutUsersInput {
  data: ActionUpdateManyMutationInput!
  where: ActionScalarWhereInput!
}

input ActionUpdateManyWithoutUsersInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutUsersInput!]
  create: [ActionCreateWithoutUsersInput!]
  delete: [ActionWhereUniqueInput!]
  deleteMany: [ActionScalarWhereInput!]
  disconnect: [ActionWhereUniqueInput!]
  set: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [ActionUpdateManyWithWhereWithoutUsersInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutUsersInput!]
}

input ActionUpdateOneRequiredWithoutCompletionsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutCompletionsInput
  create: ActionCreateWithoutCompletionsInput
  update: ActionUpdateWithoutCompletionsInput
  upsert: ActionUpsertWithoutCompletionsInput
}

input ActionUpdateOneRequiredWithoutIdentityRelationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutIdentityRelationsInput
  create: ActionCreateWithoutIdentityRelationsInput
  update: ActionUpdateWithoutIdentityRelationsInput
  upsert: ActionUpsertWithoutIdentityRelationsInput
}

input ActionUpdateOneRequiredWithoutSchedulesInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutSchedulesInput
  create: ActionCreateWithoutSchedulesInput
  update: ActionUpdateWithoutSchedulesInput
  upsert: ActionUpsertWithoutSchedulesInput
}

input ActionUpdateOneRequiredWithoutUserActionInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutUserActionInput
  create: ActionCreateWithoutUserActionInput
  update: ActionUpdateWithoutUserActionInput
  upsert: ActionUpsertWithoutUserActionInput
}

input ActionUpdateWithWhereUniqueWithoutUsersInput {
  data: ActionUpdateWithoutUsersInput!
  where: ActionWhereUniqueInput!
}

input ActionUpdateWithoutCompletionsInput {
  UserAction: UserActionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutActionsInput
}

input ActionUpdateWithoutIdentityRelationsInput {
  UserAction: UserActionUpdateManyWithoutActionInput
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutActionsInput
}

input ActionUpdateWithoutSchedulesInput {
  UserAction: UserActionUpdateManyWithoutActionInput
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutActionsInput
}

input ActionUpdateWithoutUserActionInput {
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutActionsInput
}

input ActionUpdateWithoutUsersInput {
  UserAction: UserActionUpdateManyWithoutActionInput
  completions: ActionCompletionUpdateManyWithoutActionInput
  description: NullableStringFieldUpdateOperationsInput
  identityRelations: IdentityActionRelationUpdateManyWithoutActionInput
  name: StringFieldUpdateOperationsInput
  schedules: ActionScheduleUpdateManyWithoutActionInput
  slug: StringFieldUpdateOperationsInput
}

input ActionUpsertWithWhereUniqueWithoutUsersInput {
  create: ActionCreateWithoutUsersInput!
  update: ActionUpdateWithoutUsersInput!
  where: ActionWhereUniqueInput!
}

input ActionUpsertWithoutCompletionsInput {
  create: ActionCreateWithoutCompletionsInput!
  update: ActionUpdateWithoutCompletionsInput!
}

input ActionUpsertWithoutIdentityRelationsInput {
  create: ActionCreateWithoutIdentityRelationsInput!
  update: ActionUpdateWithoutIdentityRelationsInput!
}

input ActionUpsertWithoutSchedulesInput {
  create: ActionCreateWithoutSchedulesInput!
  update: ActionUpdateWithoutSchedulesInput!
}

input ActionUpsertWithoutUserActionInput {
  create: ActionCreateWithoutUserActionInput!
  update: ActionUpdateWithoutUserActionInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  UserAction: UserActionListRelationFilter
  completions: ActionCompletionListRelationFilter
  description: StringNullableFilter
  id: IntFilter
  identityRelations: IdentityActionRelationListRelationFilter
  name: StringFilter
  schedules: ActionScheduleListRelationFilter
  slug: StringFilter
  users: UserListRelationFilter
}

input ActionWhereUniqueInput {
  id: Int
  slug: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
}

type AggregateAction {
  _avg: ActionAvgAggregate
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  _sum: ActionSumAggregate
}

type AggregateActionCompletion {
  _avg: ActionCompletionAvgAggregate
  _count: ActionCompletionCountAggregate
  _max: ActionCompletionMaxAggregate
  _min: ActionCompletionMinAggregate
  _sum: ActionCompletionSumAggregate
}

type AggregateActionSchedule {
  _avg: ActionScheduleAvgAggregate
  _count: ActionScheduleCountAggregate
  _max: ActionScheduleMaxAggregate
  _min: ActionScheduleMinAggregate
  _sum: ActionScheduleSumAggregate
}

type AggregateBelief {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
}

type AggregateBeliefSelection {
  _avg: BeliefSelectionAvgAggregate
  _count: BeliefSelectionCountAggregate
  _max: BeliefSelectionMaxAggregate
  _min: BeliefSelectionMinAggregate
  _sum: BeliefSelectionSumAggregate
}

type AggregateCalendar {
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
}

type AggregateCalendarEvent {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
}

type AggregateIdentity {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
}

type AggregateIdentityActionRelation {
  _avg: IdentityActionRelationAvgAggregate
  _count: IdentityActionRelationCountAggregate
  _max: IdentityActionRelationMaxAggregate
  _min: IdentityActionRelationMinAggregate
  _sum: IdentityActionRelationSumAggregate
}

type AggregateIdentitySelection {
  _avg: IdentitySelectionAvgAggregate
  _count: IdentitySelectionCountAggregate
  _max: IdentitySelectionMaxAggregate
  _min: IdentitySelectionMinAggregate
  _sum: IdentitySelectionSumAggregate
}

type AggregateSchedule {
  _avg: ScheduleAvgAggregate
  _count: ScheduleCountAggregate
  _max: ScheduleMaxAggregate
  _min: ScheduleMinAggregate
  _sum: ScheduleSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateUserAction {
  _avg: UserActionAvgAggregate
  _count: UserActionCountAggregate
  _max: UserActionMaxAggregate
  _min: UserActionMinAggregate
  _sum: UserActionSumAggregate
}

type AggregateUserActionSchedule {
  _avg: UserActionScheduleAvgAggregate
  _count: UserActionScheduleCountAggregate
  _max: UserActionScheduleMaxAggregate
  _min: UserActionScheduleMinAggregate
  _sum: UserActionScheduleSumAggregate
}

type AggregateValue {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
}

type AggregateValueSelection {
  _avg: ValueSelectionAvgAggregate
  _count: ValueSelectionCountAggregate
  _max: ValueSelectionMaxAggregate
  _min: ValueSelectionMinAggregate
  _sum: ValueSelectionSumAggregate
}

type Belief {
  _count: BeliefCount!
  beliefSelection(cursor: BeliefSelectionWhereUniqueInput, distinct: [BeliefSelectionScalarFieldEnum!], orderBy: [BeliefSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): [BeliefSelection!]!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BeliefAvgAggregate {
  id: Float
}

input BeliefAvgOrderByAggregateInput {
  id: SortOrder
}

type BeliefCount {
  beliefSelection: Int!
}

type BeliefCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input BeliefCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefCreateInput {
  beliefSelection: BeliefSelectionCreateNestedManyWithoutBeliefInput
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
}

input BeliefCreateManyInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input BeliefCreateNestedOneWithoutBeliefSelectionInput {
  connect: BeliefWhereUniqueInput
  connectOrCreate: BeliefCreateOrConnectWithoutBeliefSelectionInput
  create: BeliefCreateWithoutBeliefSelectionInput
}

input BeliefCreateOrConnectWithoutBeliefSelectionInput {
  create: BeliefCreateWithoutBeliefSelectionInput!
  where: BeliefWhereUniqueInput!
}

input BeliefCreateWithoutBeliefSelectionInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BeliefGroupBy {
  _avg: BeliefAvgAggregate
  _count: BeliefCountAggregate
  _max: BeliefMaxAggregate
  _min: BeliefMinAggregate
  _sum: BeliefSumAggregate
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BeliefMaxAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input BeliefMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type BeliefMinAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input BeliefMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByWithAggregationInput {
  _avg: BeliefAvgOrderByAggregateInput
  _count: BeliefCountOrderByAggregateInput
  _max: BeliefMaxOrderByAggregateInput
  _min: BeliefMinOrderByAggregateInput
  _sum: BeliefSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefOrderByWithRelationInput {
  beliefSelection: BeliefSelectionOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input BeliefRelationFilter {
  is: BeliefWhereInput
  isNot: BeliefWhereInput
}

enum BeliefScalarFieldEnum {
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input BeliefScalarWhereWithAggregatesInput {
  AND: [BeliefScalarWhereWithAggregatesInput!]
  NOT: [BeliefScalarWhereWithAggregatesInput!]
  OR: [BeliefScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type BeliefSelection {
  belief: Belief!
  beliefId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  user: User!
  userId: String!
}

type BeliefSelectionAvgAggregate {
  beliefId: Float
  id: Float
}

input BeliefSelectionAvgOrderByAggregateInput {
  beliefId: SortOrder
  id: SortOrder
}

type BeliefSelectionCountAggregate {
  _all: Int!
  beliefId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input BeliefSelectionCountOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BeliefSelectionCreateInput {
  belief: BeliefCreateNestedOneWithoutBeliefSelectionInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBeliefSelectionsInput!
}

input BeliefSelectionCreateManyBeliefInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input BeliefSelectionCreateManyBeliefInputEnvelope {
  data: [BeliefSelectionCreateManyBeliefInput!]!
  skipDuplicates: Boolean
}

input BeliefSelectionCreateManyInput {
  beliefId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input BeliefSelectionCreateManyUserInput {
  beliefId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input BeliefSelectionCreateManyUserInputEnvelope {
  data: [BeliefSelectionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BeliefSelectionCreateNestedManyWithoutBeliefInput {
  connect: [BeliefSelectionWhereUniqueInput!]
  connectOrCreate: [BeliefSelectionCreateOrConnectWithoutBeliefInput!]
  create: [BeliefSelectionCreateWithoutBeliefInput!]
  createMany: BeliefSelectionCreateManyBeliefInputEnvelope
}

input BeliefSelectionCreateNestedManyWithoutUserInput {
  connect: [BeliefSelectionWhereUniqueInput!]
  connectOrCreate: [BeliefSelectionCreateOrConnectWithoutUserInput!]
  create: [BeliefSelectionCreateWithoutUserInput!]
  createMany: BeliefSelectionCreateManyUserInputEnvelope
}

input BeliefSelectionCreateOrConnectWithoutBeliefInput {
  create: BeliefSelectionCreateWithoutBeliefInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionCreateOrConnectWithoutUserInput {
  create: BeliefSelectionCreateWithoutUserInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionCreateWithoutBeliefInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBeliefSelectionsInput!
}

input BeliefSelectionCreateWithoutUserInput {
  belief: BeliefCreateNestedOneWithoutBeliefSelectionInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type BeliefSelectionGroupBy {
  _avg: BeliefSelectionAvgAggregate
  _count: BeliefSelectionCountAggregate
  _max: BeliefSelectionMaxAggregate
  _min: BeliefSelectionMinAggregate
  _sum: BeliefSelectionSumAggregate
  beliefId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  userId: String!
}

input BeliefSelectionListRelationFilter {
  every: BeliefSelectionWhereInput
  none: BeliefSelectionWhereInput
  some: BeliefSelectionWhereInput
}

type BeliefSelectionMaxAggregate {
  beliefId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
}

input BeliefSelectionMaxOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type BeliefSelectionMinAggregate {
  beliefId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
}

input BeliefSelectionMinOrderByAggregateInput {
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BeliefSelectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input BeliefSelectionOrderByWithAggregationInput {
  _avg: BeliefSelectionAvgOrderByAggregateInput
  _count: BeliefSelectionCountOrderByAggregateInput
  _max: BeliefSelectionMaxOrderByAggregateInput
  _min: BeliefSelectionMinOrderByAggregateInput
  _sum: BeliefSelectionSumOrderByAggregateInput
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BeliefSelectionOrderByWithRelationInput {
  belief: BeliefOrderByWithRelationInput
  beliefId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum BeliefSelectionScalarFieldEnum {
  beliefId
  createdAt
  deletedAt
  id
  updatedAt
  userId
}

input BeliefSelectionScalarWhereInput {
  AND: [BeliefSelectionScalarWhereInput!]
  NOT: [BeliefSelectionScalarWhereInput!]
  OR: [BeliefSelectionScalarWhereInput!]
  beliefId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input BeliefSelectionScalarWhereWithAggregatesInput {
  AND: [BeliefSelectionScalarWhereWithAggregatesInput!]
  NOT: [BeliefSelectionScalarWhereWithAggregatesInput!]
  OR: [BeliefSelectionScalarWhereWithAggregatesInput!]
  beliefId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type BeliefSelectionSumAggregate {
  beliefId: Int
  id: Int
}

input BeliefSelectionSumOrderByAggregateInput {
  beliefId: SortOrder
  id: SortOrder
}

input BeliefSelectionUpdateInput {
  belief: BeliefUpdateOneRequiredWithoutBeliefSelectionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBeliefSelectionsInput
}

input BeliefSelectionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefSelectionUpdateManyWithWhereWithoutBeliefInput {
  data: BeliefSelectionUpdateManyMutationInput!
  where: BeliefSelectionScalarWhereInput!
}

input BeliefSelectionUpdateManyWithWhereWithoutUserInput {
  data: BeliefSelectionUpdateManyMutationInput!
  where: BeliefSelectionScalarWhereInput!
}

input BeliefSelectionUpdateManyWithoutBeliefInput {
  connect: [BeliefSelectionWhereUniqueInput!]
  connectOrCreate: [BeliefSelectionCreateOrConnectWithoutBeliefInput!]
  create: [BeliefSelectionCreateWithoutBeliefInput!]
  createMany: BeliefSelectionCreateManyBeliefInputEnvelope
  delete: [BeliefSelectionWhereUniqueInput!]
  deleteMany: [BeliefSelectionScalarWhereInput!]
  disconnect: [BeliefSelectionWhereUniqueInput!]
  set: [BeliefSelectionWhereUniqueInput!]
  update: [BeliefSelectionUpdateWithWhereUniqueWithoutBeliefInput!]
  updateMany: [BeliefSelectionUpdateManyWithWhereWithoutBeliefInput!]
  upsert: [BeliefSelectionUpsertWithWhereUniqueWithoutBeliefInput!]
}

input BeliefSelectionUpdateManyWithoutUserInput {
  connect: [BeliefSelectionWhereUniqueInput!]
  connectOrCreate: [BeliefSelectionCreateOrConnectWithoutUserInput!]
  create: [BeliefSelectionCreateWithoutUserInput!]
  createMany: BeliefSelectionCreateManyUserInputEnvelope
  delete: [BeliefSelectionWhereUniqueInput!]
  deleteMany: [BeliefSelectionScalarWhereInput!]
  disconnect: [BeliefSelectionWhereUniqueInput!]
  set: [BeliefSelectionWhereUniqueInput!]
  update: [BeliefSelectionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BeliefSelectionUpdateManyWithWhereWithoutUserInput!]
  upsert: [BeliefSelectionUpsertWithWhereUniqueWithoutUserInput!]
}

input BeliefSelectionUpdateWithWhereUniqueWithoutBeliefInput {
  data: BeliefSelectionUpdateWithoutBeliefInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionUpdateWithWhereUniqueWithoutUserInput {
  data: BeliefSelectionUpdateWithoutUserInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionUpdateWithoutBeliefInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBeliefSelectionsInput
}

input BeliefSelectionUpdateWithoutUserInput {
  belief: BeliefUpdateOneRequiredWithoutBeliefSelectionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefSelectionUpsertWithWhereUniqueWithoutBeliefInput {
  create: BeliefSelectionCreateWithoutBeliefInput!
  update: BeliefSelectionUpdateWithoutBeliefInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionUpsertWithWhereUniqueWithoutUserInput {
  create: BeliefSelectionCreateWithoutUserInput!
  update: BeliefSelectionUpdateWithoutUserInput!
  where: BeliefSelectionWhereUniqueInput!
}

input BeliefSelectionUserIdBeliefIdCompoundUniqueInput {
  beliefId: Int!
  userId: String!
}

input BeliefSelectionWhereInput {
  AND: [BeliefSelectionWhereInput!]
  NOT: [BeliefSelectionWhereInput!]
  OR: [BeliefSelectionWhereInput!]
  belief: BeliefRelationFilter
  beliefId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input BeliefSelectionWhereUniqueInput {
  id: Int
  userId_beliefId: BeliefSelectionUserIdBeliefIdCompoundUniqueInput
}

type BeliefSumAggregate {
  id: Int
}

input BeliefSumOrderByAggregateInput {
  id: SortOrder
}

input BeliefUpdateInput {
  beliefSelection: BeliefSelectionUpdateManyWithoutBeliefInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefUpdateOneRequiredWithoutBeliefSelectionInput {
  connect: BeliefWhereUniqueInput
  connectOrCreate: BeliefCreateOrConnectWithoutBeliefSelectionInput
  create: BeliefCreateWithoutBeliefSelectionInput
  update: BeliefUpdateWithoutBeliefSelectionInput
  upsert: BeliefUpsertWithoutBeliefSelectionInput
}

input BeliefUpdateWithoutBeliefSelectionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BeliefUpsertWithoutBeliefSelectionInput {
  create: BeliefCreateWithoutBeliefSelectionInput!
  update: BeliefUpdateWithoutBeliefSelectionInput!
}

input BeliefWhereInput {
  AND: [BeliefWhereInput!]
  NOT: [BeliefWhereInput!]
  OR: [BeliefWhereInput!]
  beliefSelection: BeliefSelectionListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeNullableFilter
}

input BeliefWhereUniqueInput {
  id: Int
  slug: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Calendar {
  _count: CalendarCount!
  color: Color
  events(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  id: String!
  isPublic: Boolean!
  name: String
  user: User!
  userId: String!
}

type CalendarCount {
  events: Int!
}

type CalendarCountAggregate {
  _all: Int!
  color: Int!
  id: Int!
  isPublic: Int!
  name: Int!
  userId: Int!
}

input CalendarCountOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  userId: SortOrder
}

input CalendarCreateInput {
  color: Color
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  id: String
  isPublic: Boolean
  name: String
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateManyInput {
  color: Color
  id: String
  isPublic: Boolean
  name: String
  userId: String!
}

input CalendarCreateManyUserInput {
  color: Color
  id: String
  isPublic: Boolean
  name: String
}

input CalendarCreateManyUserInputEnvelope {
  data: [CalendarCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CalendarCreateNestedManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
}

input CalendarCreateNestedOneWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
}

input CalendarCreateOrConnectWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateOrConnectWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarCreateWithoutEventsInput {
  color: Color
  id: String
  isPublic: Boolean
  name: String
  user: UserCreateNestedOneWithoutCalendarsInput!
}

input CalendarCreateWithoutUserInput {
  color: Color
  events: CalendarEventCreateNestedManyWithoutCalendarInput
  id: String
  isPublic: Boolean
  name: String
}

type CalendarEvent {
  calendar: Calendar!
  calendarId: String!
  createdAt: DateTime!
  end: DateTime!
  id: String!
  schedule: Schedule
  scheduleId: Int
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

type CalendarEventAvgAggregate {
  scheduleId: Float
}

input CalendarEventAvgOrderByAggregateInput {
  scheduleId: SortOrder
}

type CalendarEventCountAggregate {
  _all: Int!
  calendarId: Int!
  createdAt: Int!
  end: Int!
  id: Int!
  scheduleId: Int!
  start: Int!
  title: Int!
  updatedAt: Int!
}

input CalendarEventCountOrderByAggregateInput {
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventCreateInput {
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  createdAt: DateTime
  end: DateTime!
  id: String
  schedule: ScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventCreateManyCalendarInput {
  createdAt: DateTime
  end: DateTime!
  id: String
  scheduleId: Int
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventCreateManyCalendarInputEnvelope {
  data: [CalendarEventCreateManyCalendarInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateManyInput {
  calendarId: String!
  createdAt: DateTime
  end: DateTime!
  id: String
  scheduleId: Int
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventCreateManyScheduleInput {
  calendarId: String!
  createdAt: DateTime
  end: DateTime!
  id: String
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventCreateManyScheduleInputEnvelope {
  data: [CalendarEventCreateManyScheduleInput!]!
  skipDuplicates: Boolean
}

input CalendarEventCreateNestedManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
}

input CalendarEventCreateNestedManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
}

input CalendarEventCreateOrConnectWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateOrConnectWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventCreateWithoutCalendarInput {
  createdAt: DateTime
  end: DateTime!
  id: String
  schedule: ScheduleCreateNestedOneWithoutCalendarEventsInput
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventCreateWithoutScheduleInput {
  calendar: CalendarCreateNestedOneWithoutEventsInput!
  createdAt: DateTime
  end: DateTime!
  id: String
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

type CalendarEventGroupBy {
  _avg: CalendarEventAvgAggregate
  _count: CalendarEventCountAggregate
  _max: CalendarEventMaxAggregate
  _min: CalendarEventMinAggregate
  _sum: CalendarEventSumAggregate
  calendarId: String!
  createdAt: DateTime!
  end: DateTime!
  id: String!
  scheduleId: Int
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

input CalendarEventListRelationFilter {
  every: CalendarEventWhereInput
  none: CalendarEventWhereInput
  some: CalendarEventWhereInput
}

type CalendarEventMaxAggregate {
  calendarId: String
  createdAt: DateTime
  end: DateTime
  id: String
  scheduleId: Int
  start: DateTime
  title: String
  updatedAt: DateTime
}

input CalendarEventMaxOrderByAggregateInput {
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type CalendarEventMinAggregate {
  calendarId: String
  createdAt: DateTime
  end: DateTime
  id: String
  scheduleId: Int
  start: DateTime
  title: String
  updatedAt: DateTime
}

input CalendarEventMinOrderByAggregateInput {
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarEventOrderByWithAggregationInput {
  _avg: CalendarEventAvgOrderByAggregateInput
  _count: CalendarEventCountOrderByAggregateInput
  _max: CalendarEventMaxOrderByAggregateInput
  _min: CalendarEventMinOrderByAggregateInput
  _sum: CalendarEventSumOrderByAggregateInput
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CalendarEventOrderByWithRelationInput {
  calendar: CalendarOrderByWithRelationInput
  calendarId: SortOrder
  createdAt: SortOrder
  end: SortOrder
  id: SortOrder
  schedule: ScheduleOrderByWithRelationInput
  scheduleId: SortOrder
  start: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum CalendarEventScalarFieldEnum {
  calendarId
  createdAt
  end
  id
  scheduleId
  start
  title
  updatedAt
}

input CalendarEventScalarWhereInput {
  AND: [CalendarEventScalarWhereInput!]
  NOT: [CalendarEventScalarWhereInput!]
  OR: [CalendarEventScalarWhereInput!]
  calendarId: StringFilter
  createdAt: DateTimeFilter
  end: DateTimeFilter
  id: StringFilter
  scheduleId: IntNullableFilter
  start: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
}

input CalendarEventScalarWhereWithAggregatesInput {
  AND: [CalendarEventScalarWhereWithAggregatesInput!]
  NOT: [CalendarEventScalarWhereWithAggregatesInput!]
  OR: [CalendarEventScalarWhereWithAggregatesInput!]
  calendarId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  end: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  scheduleId: IntNullableWithAggregatesFilter
  start: DateTimeWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type CalendarEventSumAggregate {
  scheduleId: Int
}

input CalendarEventSumOrderByAggregateInput {
  scheduleId: SortOrder
}

input CalendarEventUpdateInput {
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schedule: ScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateManyWithWhereWithoutCalendarInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithWhereWithoutScheduleInput {
  data: CalendarEventUpdateManyMutationInput!
  where: CalendarEventScalarWhereInput!
}

input CalendarEventUpdateManyWithoutCalendarInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutCalendarInput!]
  create: [CalendarEventCreateWithoutCalendarInput!]
  createMany: CalendarEventCreateManyCalendarInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutCalendarInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutCalendarInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutCalendarInput!]
}

input CalendarEventUpdateManyWithoutScheduleInput {
  connect: [CalendarEventWhereUniqueInput!]
  connectOrCreate: [CalendarEventCreateOrConnectWithoutScheduleInput!]
  create: [CalendarEventCreateWithoutScheduleInput!]
  createMany: CalendarEventCreateManyScheduleInputEnvelope
  delete: [CalendarEventWhereUniqueInput!]
  deleteMany: [CalendarEventScalarWhereInput!]
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  update: [CalendarEventUpdateWithWhereUniqueWithoutScheduleInput!]
  updateMany: [CalendarEventUpdateManyWithWhereWithoutScheduleInput!]
  upsert: [CalendarEventUpsertWithWhereUniqueWithoutScheduleInput!]
}

input CalendarEventUpdateWithWhereUniqueWithoutCalendarInput {
  data: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithWhereUniqueWithoutScheduleInput {
  data: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpdateWithoutCalendarInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schedule: ScheduleUpdateOneWithoutCalendarEventsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpdateWithoutScheduleInput {
  calendar: CalendarUpdateOneRequiredWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CalendarEventUpsertWithWhereUniqueWithoutCalendarInput {
  create: CalendarEventCreateWithoutCalendarInput!
  update: CalendarEventUpdateWithoutCalendarInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventUpsertWithWhereUniqueWithoutScheduleInput {
  create: CalendarEventCreateWithoutScheduleInput!
  update: CalendarEventUpdateWithoutScheduleInput!
  where: CalendarEventWhereUniqueInput!
}

input CalendarEventWhereInput {
  AND: [CalendarEventWhereInput!]
  NOT: [CalendarEventWhereInput!]
  OR: [CalendarEventWhereInput!]
  calendar: CalendarRelationFilter
  calendarId: StringFilter
  createdAt: DateTimeFilter
  end: DateTimeFilter
  id: StringFilter
  schedule: ScheduleRelationFilter
  scheduleId: IntNullableFilter
  start: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
}

input CalendarEventWhereUniqueInput {
  id: String
}

type CalendarGroupBy {
  _count: CalendarCountAggregate
  _max: CalendarMaxAggregate
  _min: CalendarMinAggregate
  color: Color
  id: String!
  isPublic: Boolean!
  name: String
  userId: String!
}

input CalendarListRelationFilter {
  every: CalendarWhereInput
  none: CalendarWhereInput
  some: CalendarWhereInput
}

type CalendarMaxAggregate {
  color: Color
  id: String
  isPublic: Boolean
  name: String
  userId: String
}

input CalendarMaxOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  userId: SortOrder
}

type CalendarMinAggregate {
  color: Color
  id: String
  isPublic: Boolean
  name: String
  userId: String
}

input CalendarMinOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  userId: SortOrder
}

input CalendarOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalendarOrderByWithAggregationInput {
  _count: CalendarCountOrderByAggregateInput
  _max: CalendarMaxOrderByAggregateInput
  _min: CalendarMinOrderByAggregateInput
  color: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  userId: SortOrder
}

input CalendarOrderByWithRelationInput {
  color: SortOrder
  events: CalendarEventOrderByRelationAggregateInput
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input CalendarRelationFilter {
  is: CalendarWhereInput
  isNot: CalendarWhereInput
}

enum CalendarScalarFieldEnum {
  color
  id
  isPublic
  name
  userId
}

input CalendarScalarWhereInput {
  AND: [CalendarScalarWhereInput!]
  NOT: [CalendarScalarWhereInput!]
  OR: [CalendarScalarWhereInput!]
  color: EnumColorNullableFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringNullableFilter
  userId: StringFilter
}

input CalendarScalarWhereWithAggregatesInput {
  AND: [CalendarScalarWhereWithAggregatesInput!]
  NOT: [CalendarScalarWhereWithAggregatesInput!]
  OR: [CalendarScalarWhereWithAggregatesInput!]
  color: EnumColorNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPublic: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input CalendarUpdateInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateManyMutationInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input CalendarUpdateManyWithWhereWithoutUserInput {
  data: CalendarUpdateManyMutationInput!
  where: CalendarScalarWhereInput!
}

input CalendarUpdateManyWithoutUserInput {
  connect: [CalendarWhereUniqueInput!]
  connectOrCreate: [CalendarCreateOrConnectWithoutUserInput!]
  create: [CalendarCreateWithoutUserInput!]
  createMany: CalendarCreateManyUserInputEnvelope
  delete: [CalendarWhereUniqueInput!]
  deleteMany: [CalendarScalarWhereInput!]
  disconnect: [CalendarWhereUniqueInput!]
  set: [CalendarWhereUniqueInput!]
  update: [CalendarUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CalendarUpdateManyWithWhereWithoutUserInput!]
  upsert: [CalendarUpsertWithWhereUniqueWithoutUserInput!]
}

input CalendarUpdateOneRequiredWithoutEventsInput {
  connect: CalendarWhereUniqueInput
  connectOrCreate: CalendarCreateOrConnectWithoutEventsInput
  create: CalendarCreateWithoutEventsInput
  update: CalendarUpdateWithoutEventsInput
  upsert: CalendarUpsertWithoutEventsInput
}

input CalendarUpdateWithWhereUniqueWithoutUserInput {
  data: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpdateWithoutEventsInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCalendarsInput
}

input CalendarUpdateWithoutUserInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  events: CalendarEventUpdateManyWithoutCalendarInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input CalendarUpsertWithWhereUniqueWithoutUserInput {
  create: CalendarCreateWithoutUserInput!
  update: CalendarUpdateWithoutUserInput!
  where: CalendarWhereUniqueInput!
}

input CalendarUpsertWithoutEventsInput {
  create: CalendarCreateWithoutEventsInput!
  update: CalendarUpdateWithoutEventsInput!
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  color: EnumColorNullableFilter
  events: CalendarEventListRelationFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CalendarWhereUniqueInput {
  id: String
}

enum Color {
  BLUE
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input EnumColorNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumColorNullableFilter
  _min: NestedEnumColorNullableFilter
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableWithAggregatesFilter
  notIn: [Color!]
}

input EnumUNITFieldUpdateOperationsInput {
  set: UNIT
}

input EnumUNITFilter {
  equals: UNIT
  in: [UNIT!]
  not: NestedEnumUNITFilter
  notIn: [UNIT!]
}

input EnumUNITWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUNITFilter
  _min: NestedEnumUNITFilter
  equals: UNIT
  in: [UNIT!]
  not: NestedEnumUNITWithAggregatesFilter
  notIn: [UNIT!]
}

type Identity {
  _count: IdentityCount!
  actionRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  description: String
  id: Int!
  identitySelections(cursor: IdentitySelectionWhereUniqueInput, distinct: [IdentitySelectionScalarFieldEnum!], orderBy: [IdentitySelectionOrderByWithRelationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): [IdentitySelection!]!
  name: String!
  slug: String!
}

type IdentityActionRelation {
  action: Action!
  actionId: Int!
  deleted: DateTime
  id: Int!
  identity: Identity!
  identityId: Int!
}

type IdentityActionRelationAvgAggregate {
  actionId: Float
  id: Float
  identityId: Float
}

input IdentityActionRelationAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActionRelationCountAggregate {
  _all: Int!
  actionId: Int!
  deleted: Int!
  id: Int!
  identityId: Int!
}

input IdentityActionRelationCountOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationCreateInput {
  action: ActionCreateNestedOneWithoutIdentityRelationsInput!
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

input IdentityActionRelationCreateManyActionInput {
  deleted: DateTime
  id: Int
  identityId: Int!
}

input IdentityActionRelationCreateManyActionInputEnvelope {
  data: [IdentityActionRelationCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input IdentityActionRelationCreateManyIdentityInput {
  actionId: Int!
  deleted: DateTime
  id: Int
}

input IdentityActionRelationCreateManyIdentityInputEnvelope {
  data: [IdentityActionRelationCreateManyIdentityInput!]!
  skipDuplicates: Boolean
}

input IdentityActionRelationCreateManyInput {
  actionId: Int!
  deleted: DateTime
  id: Int
  identityId: Int!
}

input IdentityActionRelationCreateNestedManyWithoutActionInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActionRelationCreateWithoutActionInput!]
  createMany: IdentityActionRelationCreateManyActionInputEnvelope
}

input IdentityActionRelationCreateNestedManyWithoutIdentityInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutIdentityInput!]
  create: [IdentityActionRelationCreateWithoutIdentityInput!]
  createMany: IdentityActionRelationCreateManyIdentityInputEnvelope
}

input IdentityActionRelationCreateOrConnectWithoutActionInput {
  create: IdentityActionRelationCreateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationCreateOrConnectWithoutIdentityInput {
  create: IdentityActionRelationCreateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationCreateWithoutActionInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutActionRelationsInput!
}

input IdentityActionRelationCreateWithoutIdentityInput {
  action: ActionCreateNestedOneWithoutIdentityRelationsInput!
  deleted: DateTime
}

type IdentityActionRelationGroupBy {
  _avg: IdentityActionRelationAvgAggregate
  _count: IdentityActionRelationCountAggregate
  _max: IdentityActionRelationMaxAggregate
  _min: IdentityActionRelationMinAggregate
  _sum: IdentityActionRelationSumAggregate
  actionId: Int!
  deleted: DateTime
  id: Int!
  identityId: Int!
}

input IdentityActionRelationIdentityIdActionIdCompoundUniqueInput {
  actionId: Int!
  identityId: Int!
}

input IdentityActionRelationListRelationFilter {
  every: IdentityActionRelationWhereInput
  none: IdentityActionRelationWhereInput
  some: IdentityActionRelationWhereInput
}

type IdentityActionRelationMaxAggregate {
  actionId: Int
  deleted: DateTime
  id: Int
  identityId: Int
}

input IdentityActionRelationMaxOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

type IdentityActionRelationMinAggregate {
  actionId: Int
  deleted: DateTime
  id: Int
  identityId: Int
}

input IdentityActionRelationMinOrderByAggregateInput {
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentityActionRelationOrderByWithAggregationInput {
  _avg: IdentityActionRelationAvgOrderByAggregateInput
  _count: IdentityActionRelationCountOrderByAggregateInput
  _max: IdentityActionRelationMaxOrderByAggregateInput
  _min: IdentityActionRelationMinOrderByAggregateInput
  _sum: IdentityActionRelationSumOrderByAggregateInput
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  deleted: SortOrder
  id: SortOrder
  identity: IdentityOrderByWithRelationInput
  identityId: SortOrder
}

enum IdentityActionRelationScalarFieldEnum {
  actionId
  deleted
  id
  identityId
}

input IdentityActionRelationScalarWhereInput {
  AND: [IdentityActionRelationScalarWhereInput!]
  NOT: [IdentityActionRelationScalarWhereInput!]
  OR: [IdentityActionRelationScalarWhereInput!]
  actionId: IntFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  identityId: IntFilter
}

input IdentityActionRelationScalarWhereWithAggregatesInput {
  AND: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  NOT: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  OR: [IdentityActionRelationScalarWhereWithAggregatesInput!]
  actionId: IntWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  identityId: IntWithAggregatesFilter
}

type IdentityActionRelationSumAggregate {
  actionId: Int
  id: Int
  identityId: Int
}

input IdentityActionRelationSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  identityId: SortOrder
}

input IdentityActionRelationUpdateInput {
  action: ActionUpdateOneRequiredWithoutIdentityRelationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActionRelationUpdateManyMutationInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input IdentityActionRelationUpdateManyWithWhereWithoutActionInput {
  data: IdentityActionRelationUpdateManyMutationInput!
  where: IdentityActionRelationScalarWhereInput!
}

input IdentityActionRelationUpdateManyWithWhereWithoutIdentityInput {
  data: IdentityActionRelationUpdateManyMutationInput!
  where: IdentityActionRelationScalarWhereInput!
}

input IdentityActionRelationUpdateManyWithoutActionInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutActionInput!]
  create: [IdentityActionRelationCreateWithoutActionInput!]
  createMany: IdentityActionRelationCreateManyActionInputEnvelope
  delete: [IdentityActionRelationWhereUniqueInput!]
  deleteMany: [IdentityActionRelationScalarWhereInput!]
  disconnect: [IdentityActionRelationWhereUniqueInput!]
  set: [IdentityActionRelationWhereUniqueInput!]
  update: [IdentityActionRelationUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [IdentityActionRelationUpdateManyWithWhereWithoutActionInput!]
  upsert: [IdentityActionRelationUpsertWithWhereUniqueWithoutActionInput!]
}

input IdentityActionRelationUpdateManyWithoutIdentityInput {
  connect: [IdentityActionRelationWhereUniqueInput!]
  connectOrCreate: [IdentityActionRelationCreateOrConnectWithoutIdentityInput!]
  create: [IdentityActionRelationCreateWithoutIdentityInput!]
  createMany: IdentityActionRelationCreateManyIdentityInputEnvelope
  delete: [IdentityActionRelationWhereUniqueInput!]
  deleteMany: [IdentityActionRelationScalarWhereInput!]
  disconnect: [IdentityActionRelationWhereUniqueInput!]
  set: [IdentityActionRelationWhereUniqueInput!]
  update: [IdentityActionRelationUpdateWithWhereUniqueWithoutIdentityInput!]
  updateMany: [IdentityActionRelationUpdateManyWithWhereWithoutIdentityInput!]
  upsert: [IdentityActionRelationUpsertWithWhereUniqueWithoutIdentityInput!]
}

input IdentityActionRelationUpdateWithWhereUniqueWithoutActionInput {
  data: IdentityActionRelationUpdateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpdateWithWhereUniqueWithoutIdentityInput {
  data: IdentityActionRelationUpdateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpdateWithoutActionInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutActionRelationsInput
}

input IdentityActionRelationUpdateWithoutIdentityInput {
  action: ActionUpdateOneRequiredWithoutIdentityRelationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input IdentityActionRelationUpsertWithWhereUniqueWithoutActionInput {
  create: IdentityActionRelationCreateWithoutActionInput!
  update: IdentityActionRelationUpdateWithoutActionInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationUpsertWithWhereUniqueWithoutIdentityInput {
  create: IdentityActionRelationCreateWithoutIdentityInput!
  update: IdentityActionRelationUpdateWithoutIdentityInput!
  where: IdentityActionRelationWhereUniqueInput!
}

input IdentityActionRelationWhereInput {
  AND: [IdentityActionRelationWhereInput!]
  NOT: [IdentityActionRelationWhereInput!]
  OR: [IdentityActionRelationWhereInput!]
  action: ActionRelationFilter
  actionId: IntFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  identity: IdentityRelationFilter
  identityId: IntFilter
}

input IdentityActionRelationWhereUniqueInput {
  id: Int
  identityId_actionId: IdentityActionRelationIdentityIdActionIdCompoundUniqueInput
}

type IdentityAvgAggregate {
  id: Float
}

input IdentityAvgOrderByAggregateInput {
  id: SortOrder
}

type IdentityCount {
  actionRelations: Int!
  identitySelections: Int!
}

type IdentityCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input IdentityCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityCreateInput {
  actionRelations: IdentityActionRelationCreateNestedManyWithoutIdentityInput
  description: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutIdentityInput
  name: String!
  slug: String!
}

input IdentityCreateManyInput {
  description: String
  id: Int
  name: String!
  slug: String!
}

input IdentityCreateNestedOneWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
}

input IdentityCreateNestedOneWithoutIdentitySelectionsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutIdentitySelectionsInput
  create: IdentityCreateWithoutIdentitySelectionsInput
}

input IdentityCreateOrConnectWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateOrConnectWithoutIdentitySelectionsInput {
  create: IdentityCreateWithoutIdentitySelectionsInput!
  where: IdentityWhereUniqueInput!
}

input IdentityCreateWithoutActionRelationsInput {
  description: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutIdentityInput
  name: String!
  slug: String!
}

input IdentityCreateWithoutIdentitySelectionsInput {
  actionRelations: IdentityActionRelationCreateNestedManyWithoutIdentityInput
  description: String
  name: String!
  slug: String!
}

type IdentityGroupBy {
  _avg: IdentityAvgAggregate
  _count: IdentityCountAggregate
  _max: IdentityMaxAggregate
  _min: IdentityMinAggregate
  _sum: IdentitySumAggregate
  description: String
  id: Int!
  name: String!
  slug: String!
}

type IdentityMaxAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input IdentityMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type IdentityMinAggregate {
  description: String
  id: Int
  name: String
  slug: String
}

input IdentityMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByWithAggregationInput {
  _avg: IdentityAvgOrderByAggregateInput
  _count: IdentityCountOrderByAggregateInput
  _max: IdentityMaxOrderByAggregateInput
  _min: IdentityMinOrderByAggregateInput
  _sum: IdentitySumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input IdentityOrderByWithRelationInput {
  actionRelations: IdentityActionRelationOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  identitySelections: IdentitySelectionOrderByRelationAggregateInput
  name: SortOrder
  slug: SortOrder
}

input IdentityRelationFilter {
  is: IdentityWhereInput
  isNot: IdentityWhereInput
}

enum IdentityScalarFieldEnum {
  description
  id
  name
  slug
}

input IdentityScalarWhereWithAggregatesInput {
  AND: [IdentityScalarWhereWithAggregatesInput!]
  NOT: [IdentityScalarWhereWithAggregatesInput!]
  OR: [IdentityScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type IdentitySelection {
  deleted: DateTime
  id: Int!
  identity: Identity!
  identityId: Int!
  user: User!
  userId: String!
}

type IdentitySelectionAvgAggregate {
  id: Float
  identityId: Float
}

input IdentitySelectionAvgOrderByAggregateInput {
  id: SortOrder
  identityId: SortOrder
}

type IdentitySelectionCountAggregate {
  _all: Int!
  deleted: Int!
  id: Int!
  identityId: Int!
  userId: Int!
}

input IdentitySelectionCountOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input IdentitySelectionCreateInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutIdentitySelectionsInput!
  user: UserCreateNestedOneWithoutIdentitySelectionsInput!
}

input IdentitySelectionCreateManyIdentityInput {
  deleted: DateTime
  id: Int
  userId: String!
}

input IdentitySelectionCreateManyIdentityInputEnvelope {
  data: [IdentitySelectionCreateManyIdentityInput!]!
  skipDuplicates: Boolean
}

input IdentitySelectionCreateManyInput {
  deleted: DateTime
  id: Int
  identityId: Int!
  userId: String!
}

input IdentitySelectionCreateManyUserInput {
  deleted: DateTime
  id: Int
  identityId: Int!
}

input IdentitySelectionCreateManyUserInputEnvelope {
  data: [IdentitySelectionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input IdentitySelectionCreateNestedManyWithoutIdentityInput {
  connect: [IdentitySelectionWhereUniqueInput!]
  connectOrCreate: [IdentitySelectionCreateOrConnectWithoutIdentityInput!]
  create: [IdentitySelectionCreateWithoutIdentityInput!]
  createMany: IdentitySelectionCreateManyIdentityInputEnvelope
}

input IdentitySelectionCreateNestedManyWithoutUserInput {
  connect: [IdentitySelectionWhereUniqueInput!]
  connectOrCreate: [IdentitySelectionCreateOrConnectWithoutUserInput!]
  create: [IdentitySelectionCreateWithoutUserInput!]
  createMany: IdentitySelectionCreateManyUserInputEnvelope
}

input IdentitySelectionCreateOrConnectWithoutIdentityInput {
  create: IdentitySelectionCreateWithoutIdentityInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionCreateOrConnectWithoutUserInput {
  create: IdentitySelectionCreateWithoutUserInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionCreateWithoutIdentityInput {
  deleted: DateTime
  user: UserCreateNestedOneWithoutIdentitySelectionsInput!
}

input IdentitySelectionCreateWithoutUserInput {
  deleted: DateTime
  identity: IdentityCreateNestedOneWithoutIdentitySelectionsInput!
}

type IdentitySelectionGroupBy {
  _avg: IdentitySelectionAvgAggregate
  _count: IdentitySelectionCountAggregate
  _max: IdentitySelectionMaxAggregate
  _min: IdentitySelectionMinAggregate
  _sum: IdentitySelectionSumAggregate
  deleted: DateTime
  id: Int!
  identityId: Int!
  userId: String!
}

input IdentitySelectionListRelationFilter {
  every: IdentitySelectionWhereInput
  none: IdentitySelectionWhereInput
  some: IdentitySelectionWhereInput
}

type IdentitySelectionMaxAggregate {
  deleted: DateTime
  id: Int
  identityId: Int
  userId: String
}

input IdentitySelectionMaxOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

type IdentitySelectionMinAggregate {
  deleted: DateTime
  id: Int
  identityId: Int
  userId: String
}

input IdentitySelectionMinOrderByAggregateInput {
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input IdentitySelectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input IdentitySelectionOrderByWithAggregationInput {
  _avg: IdentitySelectionAvgOrderByAggregateInput
  _count: IdentitySelectionCountOrderByAggregateInput
  _max: IdentitySelectionMaxOrderByAggregateInput
  _min: IdentitySelectionMinOrderByAggregateInput
  _sum: IdentitySelectionSumOrderByAggregateInput
  deleted: SortOrder
  id: SortOrder
  identityId: SortOrder
  userId: SortOrder
}

input IdentitySelectionOrderByWithRelationInput {
  deleted: SortOrder
  id: SortOrder
  identity: IdentityOrderByWithRelationInput
  identityId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum IdentitySelectionScalarFieldEnum {
  deleted
  id
  identityId
  userId
}

input IdentitySelectionScalarWhereInput {
  AND: [IdentitySelectionScalarWhereInput!]
  NOT: [IdentitySelectionScalarWhereInput!]
  OR: [IdentitySelectionScalarWhereInput!]
  deleted: DateTimeNullableFilter
  id: IntFilter
  identityId: IntFilter
  userId: StringFilter
}

input IdentitySelectionScalarWhereWithAggregatesInput {
  AND: [IdentitySelectionScalarWhereWithAggregatesInput!]
  NOT: [IdentitySelectionScalarWhereWithAggregatesInput!]
  OR: [IdentitySelectionScalarWhereWithAggregatesInput!]
  deleted: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  identityId: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type IdentitySelectionSumAggregate {
  id: Int
  identityId: Int
}

input IdentitySelectionSumOrderByAggregateInput {
  id: SortOrder
  identityId: SortOrder
}

input IdentitySelectionUpdateInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutIdentitySelectionsInput
  user: UserUpdateOneRequiredWithoutIdentitySelectionsInput
}

input IdentitySelectionUpdateManyMutationInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
}

input IdentitySelectionUpdateManyWithWhereWithoutIdentityInput {
  data: IdentitySelectionUpdateManyMutationInput!
  where: IdentitySelectionScalarWhereInput!
}

input IdentitySelectionUpdateManyWithWhereWithoutUserInput {
  data: IdentitySelectionUpdateManyMutationInput!
  where: IdentitySelectionScalarWhereInput!
}

input IdentitySelectionUpdateManyWithoutIdentityInput {
  connect: [IdentitySelectionWhereUniqueInput!]
  connectOrCreate: [IdentitySelectionCreateOrConnectWithoutIdentityInput!]
  create: [IdentitySelectionCreateWithoutIdentityInput!]
  createMany: IdentitySelectionCreateManyIdentityInputEnvelope
  delete: [IdentitySelectionWhereUniqueInput!]
  deleteMany: [IdentitySelectionScalarWhereInput!]
  disconnect: [IdentitySelectionWhereUniqueInput!]
  set: [IdentitySelectionWhereUniqueInput!]
  update: [IdentitySelectionUpdateWithWhereUniqueWithoutIdentityInput!]
  updateMany: [IdentitySelectionUpdateManyWithWhereWithoutIdentityInput!]
  upsert: [IdentitySelectionUpsertWithWhereUniqueWithoutIdentityInput!]
}

input IdentitySelectionUpdateManyWithoutUserInput {
  connect: [IdentitySelectionWhereUniqueInput!]
  connectOrCreate: [IdentitySelectionCreateOrConnectWithoutUserInput!]
  create: [IdentitySelectionCreateWithoutUserInput!]
  createMany: IdentitySelectionCreateManyUserInputEnvelope
  delete: [IdentitySelectionWhereUniqueInput!]
  deleteMany: [IdentitySelectionScalarWhereInput!]
  disconnect: [IdentitySelectionWhereUniqueInput!]
  set: [IdentitySelectionWhereUniqueInput!]
  update: [IdentitySelectionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [IdentitySelectionUpdateManyWithWhereWithoutUserInput!]
  upsert: [IdentitySelectionUpsertWithWhereUniqueWithoutUserInput!]
}

input IdentitySelectionUpdateWithWhereUniqueWithoutIdentityInput {
  data: IdentitySelectionUpdateWithoutIdentityInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionUpdateWithWhereUniqueWithoutUserInput {
  data: IdentitySelectionUpdateWithoutUserInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionUpdateWithoutIdentityInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutIdentitySelectionsInput
}

input IdentitySelectionUpdateWithoutUserInput {
  deleted: NullableDateTimeFieldUpdateOperationsInput
  identity: IdentityUpdateOneRequiredWithoutIdentitySelectionsInput
}

input IdentitySelectionUpsertWithWhereUniqueWithoutIdentityInput {
  create: IdentitySelectionCreateWithoutIdentityInput!
  update: IdentitySelectionUpdateWithoutIdentityInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionUpsertWithWhereUniqueWithoutUserInput {
  create: IdentitySelectionCreateWithoutUserInput!
  update: IdentitySelectionUpdateWithoutUserInput!
  where: IdentitySelectionWhereUniqueInput!
}

input IdentitySelectionUserIdIdentityIdCompoundUniqueInput {
  identityId: Int!
  userId: String!
}

input IdentitySelectionWhereInput {
  AND: [IdentitySelectionWhereInput!]
  NOT: [IdentitySelectionWhereInput!]
  OR: [IdentitySelectionWhereInput!]
  deleted: DateTimeNullableFilter
  id: IntFilter
  identity: IdentityRelationFilter
  identityId: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input IdentitySelectionWhereUniqueInput {
  id: Int
  userId_identityId: IdentitySelectionUserIdIdentityIdCompoundUniqueInput
}

type IdentitySumAggregate {
  id: Int
}

input IdentitySumOrderByAggregateInput {
  id: SortOrder
}

input IdentityUpdateInput {
  actionRelations: IdentityActionRelationUpdateManyWithoutIdentityInput
  description: NullableStringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutIdentityInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateOneRequiredWithoutActionRelationsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutActionRelationsInput
  create: IdentityCreateWithoutActionRelationsInput
  update: IdentityUpdateWithoutActionRelationsInput
  upsert: IdentityUpsertWithoutActionRelationsInput
}

input IdentityUpdateOneRequiredWithoutIdentitySelectionsInput {
  connect: IdentityWhereUniqueInput
  connectOrCreate: IdentityCreateOrConnectWithoutIdentitySelectionsInput
  create: IdentityCreateWithoutIdentitySelectionsInput
  update: IdentityUpdateWithoutIdentitySelectionsInput
  upsert: IdentityUpsertWithoutIdentitySelectionsInput
}

input IdentityUpdateWithoutActionRelationsInput {
  description: NullableStringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutIdentityInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpdateWithoutIdentitySelectionsInput {
  actionRelations: IdentityActionRelationUpdateManyWithoutIdentityInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input IdentityUpsertWithoutActionRelationsInput {
  create: IdentityCreateWithoutActionRelationsInput!
  update: IdentityUpdateWithoutActionRelationsInput!
}

input IdentityUpsertWithoutIdentitySelectionsInput {
  create: IdentityCreateWithoutIdentitySelectionsInput!
  update: IdentityUpdateWithoutIdentitySelectionsInput!
}

input IdentityWhereInput {
  AND: [IdentityWhereInput!]
  NOT: [IdentityWhereInput!]
  OR: [IdentityWhereInput!]
  actionRelations: IdentityActionRelationListRelationFilter
  description: StringNullableFilter
  id: IntFilter
  identitySelections: IdentitySelectionListRelationFilter
  name: StringFilter
  slug: StringFilter
}

input IdentityWhereUniqueInput {
  id: Int
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createAction(data: ActionCreateInput!): Action!
  createActionCompletion(data: ActionCompletionCreateInput!): ActionCompletion!
  createActionSchedule(data: ActionScheduleCreateInput!): ActionSchedule!
  createBelief(data: BeliefCreateInput!): Belief!
  createBeliefSelection(data: BeliefSelectionCreateInput!): BeliefSelection!
  createCalendar(data: CalendarCreateInput!): Calendar!
  createCalendarEvent(data: CalendarEventCreateInput!): CalendarEvent!
  createIdentity(data: IdentityCreateInput!): Identity!
  createIdentityActionRelation(data: IdentityActionRelationCreateInput!): IdentityActionRelation!
  createIdentitySelection(data: IdentitySelectionCreateInput!): IdentitySelection!
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionCompletion(data: [ActionCompletionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyActionSchedule(data: [ActionScheduleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBelief(data: [BeliefCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBeliefSelection(data: [BeliefSelectionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendar(data: [CalendarCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCalendarEvent(data: [CalendarEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentity(data: [IdentityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentityActionRelation(data: [IdentityActionRelationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyIdentitySelection(data: [IdentitySelectionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySchedule(data: [ScheduleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserAction(data: [UserActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserActionSchedule(data: [UserActionScheduleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyValue(data: [ValueCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyValueSelection(data: [ValueSelectionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  createUser(data: UserCreateInput!): User!
  createUserAction(data: UserActionCreateInput!): UserAction!
  createUserActionSchedule(data: UserActionScheduleCreateInput!): UserActionSchedule!
  createValue(data: ValueCreateInput!): Value!
  createValueSelection(data: ValueSelectionCreateInput!): ValueSelection!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionCompletion(where: ActionCompletionWhereUniqueInput!): ActionCompletion
  deleteActionSchedule(where: ActionScheduleWhereUniqueInput!): ActionSchedule
  deleteBelief(where: BeliefWhereUniqueInput!): Belief
  deleteBeliefSelection(where: BeliefSelectionWhereUniqueInput!): BeliefSelection
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  deleteIdentity(where: IdentityWhereUniqueInput!): Identity
  deleteIdentityActionRelation(where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  deleteIdentitySelection(where: IdentitySelectionWhereUniqueInput!): IdentitySelection
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyActionCompletion(where: ActionCompletionWhereInput): AffectedRowsOutput!
  deleteManyActionSchedule(where: ActionScheduleWhereInput): AffectedRowsOutput!
  deleteManyBelief(where: BeliefWhereInput): AffectedRowsOutput!
  deleteManyBeliefSelection(where: BeliefSelectionWhereInput): AffectedRowsOutput!
  deleteManyCalendar(where: CalendarWhereInput): AffectedRowsOutput!
  deleteManyCalendarEvent(where: CalendarEventWhereInput): AffectedRowsOutput!
  deleteManyIdentity(where: IdentityWhereInput): AffectedRowsOutput!
  deleteManyIdentityActionRelation(where: IdentityActionRelationWhereInput): AffectedRowsOutput!
  deleteManyIdentitySelection(where: IdentitySelectionWhereInput): AffectedRowsOutput!
  deleteManySchedule(where: ScheduleWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserAction(where: UserActionWhereInput): AffectedRowsOutput!
  deleteManyUserActionSchedule(where: UserActionScheduleWhereInput): AffectedRowsOutput!
  deleteManyValue(where: ValueWhereInput): AffectedRowsOutput!
  deleteManyValueSelection(where: ValueSelectionWhereInput): AffectedRowsOutput!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserAction(where: UserActionWhereUniqueInput!): UserAction
  deleteUserActionSchedule(where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  deleteValue(where: ValueWhereUniqueInput!): Value
  deleteValueSelection(where: ValueSelectionWhereUniqueInput!): ValueSelection
  toggleIdentitySelection(deleted: DateTime, identityId: Int!, userId: String!): IdentitySelection!
  toggleScheduleAdoption(abandonedAt: DateTime, actionId: Int!, userId: String!): Schedule!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionCompletion(data: ActionCompletionUpdateInput!, where: ActionCompletionWhereUniqueInput!): ActionCompletion
  updateActionSchedule(data: ActionScheduleUpdateInput!, where: ActionScheduleWhereUniqueInput!): ActionSchedule
  updateBelief(data: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief
  updateBeliefSelection(data: BeliefSelectionUpdateInput!, where: BeliefSelectionWhereUniqueInput!): BeliefSelection
  updateCalendar(data: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar
  updateCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity
  updateIdentityActionRelation(data: IdentityActionRelationUpdateInput!, where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  updateIdentitySelection(data: IdentitySelectionUpdateInput!, where: IdentitySelectionWhereUniqueInput!): IdentitySelection
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyActionCompletion(data: ActionCompletionUpdateManyMutationInput!, where: ActionCompletionWhereInput): AffectedRowsOutput!
  updateManyActionSchedule(data: ActionScheduleUpdateManyMutationInput!, where: ActionScheduleWhereInput): AffectedRowsOutput!
  updateManyBelief(data: BeliefUpdateManyMutationInput!, where: BeliefWhereInput): AffectedRowsOutput!
  updateManyBeliefSelection(data: BeliefSelectionUpdateManyMutationInput!, where: BeliefSelectionWhereInput): AffectedRowsOutput!
  updateManyCalendar(data: CalendarUpdateManyMutationInput!, where: CalendarWhereInput): AffectedRowsOutput!
  updateManyCalendarEvent(data: CalendarEventUpdateManyMutationInput!, where: CalendarEventWhereInput): AffectedRowsOutput!
  updateManyIdentity(data: IdentityUpdateManyMutationInput!, where: IdentityWhereInput): AffectedRowsOutput!
  updateManyIdentityActionRelation(data: IdentityActionRelationUpdateManyMutationInput!, where: IdentityActionRelationWhereInput): AffectedRowsOutput!
  updateManyIdentitySelection(data: IdentitySelectionUpdateManyMutationInput!, where: IdentitySelectionWhereInput): AffectedRowsOutput!
  updateManySchedule(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserAction(data: UserActionUpdateManyMutationInput!, where: UserActionWhereInput): AffectedRowsOutput!
  updateManyUserActionSchedule(data: UserActionScheduleUpdateManyMutationInput!, where: UserActionScheduleWhereInput): AffectedRowsOutput!
  updateManyValue(data: ValueUpdateManyMutationInput!, where: ValueWhereInput): AffectedRowsOutput!
  updateManyValueSelection(data: ValueSelectionUpdateManyMutationInput!, where: ValueSelectionWhereInput): AffectedRowsOutput!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserAction(data: UserActionUpdateInput!, where: UserActionWhereUniqueInput!): UserAction
  updateUserActionSchedule(data: UserActionScheduleUpdateInput!, where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  updateValue(data: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value
  updateValueSelection(data: ValueSelectionUpdateInput!, where: ValueSelectionWhereUniqueInput!): ValueSelection
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertActionCompletion(create: ActionCompletionCreateInput!, update: ActionCompletionUpdateInput!, where: ActionCompletionWhereUniqueInput!): ActionCompletion!
  upsertActionSchedule(create: ActionScheduleCreateInput!, update: ActionScheduleUpdateInput!, where: ActionScheduleWhereUniqueInput!): ActionSchedule!
  upsertBelief(create: BeliefCreateInput!, update: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief!
  upsertBeliefSelection(create: BeliefSelectionCreateInput!, update: BeliefSelectionUpdateInput!, where: BeliefSelectionWhereUniqueInput!): BeliefSelection!
  upsertCalendar(create: CalendarCreateInput!, update: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar!
  upsertCalendarEvent(create: CalendarEventCreateInput!, update: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  upsertIdentity(create: IdentityCreateInput!, update: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity!
  upsertIdentityActionRelation(create: IdentityActionRelationCreateInput!, update: IdentityActionRelationUpdateInput!, where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation!
  upsertIdentitySelection(create: IdentitySelectionCreateInput!, update: IdentitySelectionUpdateInput!, where: IdentitySelectionWhereUniqueInput!): IdentitySelection!
  upsertSchedule(create: ScheduleCreateInput!, update: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUserAction(create: UserActionCreateInput!, update: UserActionUpdateInput!, where: UserActionWhereUniqueInput!): UserAction!
  upsertUserActionSchedule(create: UserActionScheduleCreateInput!, update: UserActionScheduleUpdateInput!, where: UserActionScheduleWhereUniqueInput!): UserActionSchedule!
  upsertValue(create: ValueCreateInput!, update: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value!
  upsertValueSelection(create: ValueSelectionCreateInput!, update: ValueSelectionUpdateInput!, where: ValueSelectionWhereUniqueInput!): ValueSelection!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input NestedEnumColorNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumColorNullableFilter
  _min: NestedEnumColorNullableFilter
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableWithAggregatesFilter
  notIn: [Color!]
}

input NestedEnumUNITFilter {
  equals: UNIT
  in: [UNIT!]
  not: NestedEnumUNITFilter
  notIn: [UNIT!]
}

input NestedEnumUNITWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUNITFilter
  _min: NestedEnumUNITFilter
  equals: UNIT
  in: [UNIT!]
  not: NestedEnumUNITWithAggregatesFilter
  notIn: [UNIT!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumColorFieldUpdateOperationsInput {
  set: Color
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  action(where: ActionWhereUniqueInput!): Action
  actionCompletion(where: ActionCompletionWhereUniqueInput!): ActionCompletion
  actionCompletions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  actionSchedule(where: ActionScheduleWhereUniqueInput!): ActionSchedule
  actionSchedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateActionCompletion(cursor: ActionCompletionWhereUniqueInput, orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): AggregateActionCompletion!
  aggregateActionSchedule(cursor: ActionScheduleWhereUniqueInput, orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): AggregateActionSchedule!
  aggregateBelief(cursor: BeliefWhereUniqueInput, orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): AggregateBelief!
  aggregateBeliefSelection(cursor: BeliefSelectionWhereUniqueInput, orderBy: [BeliefSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): AggregateBeliefSelection!
  aggregateCalendar(cursor: CalendarWhereUniqueInput, orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): AggregateCalendar!
  aggregateCalendarEvent(cursor: CalendarEventWhereUniqueInput, orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): AggregateCalendarEvent!
  aggregateIdentity(cursor: IdentityWhereUniqueInput, orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): AggregateIdentity!
  aggregateIdentityActionRelation(cursor: IdentityActionRelationWhereUniqueInput, orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): AggregateIdentityActionRelation!
  aggregateIdentitySelection(cursor: IdentitySelectionWhereUniqueInput, orderBy: [IdentitySelectionOrderByWithRelationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): AggregateIdentitySelection!
  aggregateSchedule(cursor: ScheduleWhereUniqueInput, orderBy: [ScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleWhereInput): AggregateSchedule!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserAction(cursor: UserActionWhereUniqueInput, orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): AggregateUserAction!
  aggregateUserActionSchedule(cursor: UserActionScheduleWhereUniqueInput, orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): AggregateUserActionSchedule!
  aggregateValue(cursor: ValueWhereUniqueInput, orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): AggregateValue!
  aggregateValueSelection(cursor: ValueSelectionWhereUniqueInput, orderBy: [ValueSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): AggregateValueSelection!
  belief(where: BeliefWhereUniqueInput!): Belief
  beliefSelection(where: BeliefSelectionWhereUniqueInput!): BeliefSelection
  beliefSelections(cursor: BeliefSelectionWhereUniqueInput, distinct: [BeliefSelectionScalarFieldEnum!], orderBy: [BeliefSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): [BeliefSelection!]!
  beliefs(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): [Belief!]!
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionCompletion(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): ActionCompletion
  findFirstActionSchedule(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): ActionSchedule
  findFirstBelief(cursor: BeliefWhereUniqueInput, distinct: [BeliefScalarFieldEnum!], orderBy: [BeliefOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefWhereInput): Belief
  findFirstBeliefSelection(cursor: BeliefSelectionWhereUniqueInput, distinct: [BeliefSelectionScalarFieldEnum!], orderBy: [BeliefSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): BeliefSelection
  findFirstCalendar(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): Calendar
  findFirstCalendarEvent(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): CalendarEvent
  findFirstIdentity(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): Identity
  findFirstIdentityActionRelation(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): IdentityActionRelation
  findFirstIdentitySelection(cursor: IdentitySelectionWhereUniqueInput, distinct: [IdentitySelectionScalarFieldEnum!], orderBy: [IdentitySelectionOrderByWithRelationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): IdentitySelection
  findFirstSchedule(cursor: ScheduleWhereUniqueInput, distinct: [ScheduleScalarFieldEnum!], orderBy: [ScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleWhereInput): Schedule
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserAction(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): UserAction
  findFirstUserActionSchedule(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): UserActionSchedule
  findFirstValue(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): Value
  findFirstValueSelection(cursor: ValueSelectionWhereUniqueInput, distinct: [ValueSelectionScalarFieldEnum!], orderBy: [ValueSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): ValueSelection
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByActionCompletion(by: [ActionCompletionScalarFieldEnum!]!, having: ActionCompletionScalarWhereWithAggregatesInput, orderBy: [ActionCompletionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletionGroupBy!]!
  groupByActionSchedule(by: [ActionScheduleScalarFieldEnum!]!, having: ActionScheduleScalarWhereWithAggregatesInput, orderBy: [ActionScheduleOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionScheduleGroupBy!]!
  groupByBelief(by: [BeliefScalarFieldEnum!]!, having: BeliefScalarWhereWithAggregatesInput, orderBy: [BeliefOrderByWithAggregationInput!], skip: Int, take: Int, where: BeliefWhereInput): [BeliefGroupBy!]!
  groupByBeliefSelection(by: [BeliefSelectionScalarFieldEnum!]!, having: BeliefSelectionScalarWhereWithAggregatesInput, orderBy: [BeliefSelectionOrderByWithAggregationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): [BeliefSelectionGroupBy!]!
  groupByCalendar(by: [CalendarScalarFieldEnum!]!, having: CalendarScalarWhereWithAggregatesInput, orderBy: [CalendarOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarWhereInput): [CalendarGroupBy!]!
  groupByCalendarEvent(by: [CalendarEventScalarFieldEnum!]!, having: CalendarEventScalarWhereWithAggregatesInput, orderBy: [CalendarEventOrderByWithAggregationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEventGroupBy!]!
  groupByIdentity(by: [IdentityScalarFieldEnum!]!, having: IdentityScalarWhereWithAggregatesInput, orderBy: [IdentityOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityWhereInput): [IdentityGroupBy!]!
  groupByIdentityActionRelation(by: [IdentityActionRelationScalarFieldEnum!]!, having: IdentityActionRelationScalarWhereWithAggregatesInput, orderBy: [IdentityActionRelationOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelationGroupBy!]!
  groupByIdentitySelection(by: [IdentitySelectionScalarFieldEnum!]!, having: IdentitySelectionScalarWhereWithAggregatesInput, orderBy: [IdentitySelectionOrderByWithAggregationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): [IdentitySelectionGroupBy!]!
  groupBySchedule(by: [ScheduleScalarFieldEnum!]!, having: ScheduleScalarWhereWithAggregatesInput, orderBy: [ScheduleOrderByWithAggregationInput!], skip: Int, take: Int, where: ScheduleWhereInput): [ScheduleGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserAction(by: [UserActionScalarFieldEnum!]!, having: UserActionScalarWhereWithAggregatesInput, orderBy: [UserActionOrderByWithAggregationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserActionGroupBy!]!
  groupByUserActionSchedule(by: [UserActionScheduleScalarFieldEnum!]!, having: UserActionScheduleScalarWhereWithAggregatesInput, orderBy: [UserActionScheduleOrderByWithAggregationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionScheduleGroupBy!]!
  groupByValue(by: [ValueScalarFieldEnum!]!, having: ValueScalarWhereWithAggregatesInput, orderBy: [ValueOrderByWithAggregationInput!], skip: Int, take: Int, where: ValueWhereInput): [ValueGroupBy!]!
  groupByValueSelection(by: [ValueSelectionScalarFieldEnum!]!, having: ValueSelectionScalarWhereWithAggregatesInput, orderBy: [ValueSelectionOrderByWithAggregationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): [ValueSelectionGroupBy!]!
  identities(cursor: IdentityWhereUniqueInput, distinct: [IdentityScalarFieldEnum!], orderBy: [IdentityOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityWhereInput): [Identity!]!
  identity(where: IdentityWhereUniqueInput!): Identity
  identityActionRelation(where: IdentityActionRelationWhereUniqueInput!): IdentityActionRelation
  identityActionRelations(cursor: IdentityActionRelationWhereUniqueInput, distinct: [IdentityActionRelationScalarFieldEnum!], orderBy: [IdentityActionRelationOrderByWithRelationInput!], skip: Int, take: Int, where: IdentityActionRelationWhereInput): [IdentityActionRelation!]!
  identitySelection(where: IdentitySelectionWhereUniqueInput!): IdentitySelection
  identitySelections(cursor: IdentitySelectionWhereUniqueInput, distinct: [IdentitySelectionScalarFieldEnum!], orderBy: [IdentitySelectionOrderByWithRelationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): [IdentitySelection!]!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(cursor: ScheduleWhereUniqueInput, distinct: [ScheduleScalarFieldEnum!], orderBy: [ScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleWhereInput): [Schedule!]!
  user(where: UserWhereUniqueInput!): User
  userAction(where: UserActionWhereUniqueInput!): UserAction
  userActionSchedule(where: UserActionScheduleWhereUniqueInput!): UserActionSchedule
  userActionSchedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
  userActions(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  value(where: ValueWhereUniqueInput!): Value
  valueSelection(where: ValueSelectionWhereUniqueInput!): ValueSelection
  valueSelections(cursor: ValueSelectionWhereUniqueInput, distinct: [ValueSelectionScalarFieldEnum!], orderBy: [ValueSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): [ValueSelection!]!
  values(cursor: ValueWhereUniqueInput, distinct: [ValueScalarFieldEnum!], orderBy: [ValueOrderByWithRelationInput!], skip: Int, take: Int, where: ValueWhereInput): [Value!]!
}

enum QueryMode {
  default
  insensitive
}

type Schedule {
  _count: ScheduleCount!
  actionSchedules(cursor: ActionScheduleWhereUniqueInput, distinct: [ActionScheduleScalarFieldEnum!], orderBy: [ActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: ActionScheduleWhereInput): [ActionSchedule!]!
  calendarEvents(cursor: CalendarEventWhereUniqueInput, distinct: [CalendarEventScalarFieldEnum!], orderBy: [CalendarEventOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarEventWhereInput): [CalendarEvent!]!
  chron: String
  frequency: UNIT!
  id: Int!
  multiplier: Int!
}

type ScheduleAvgAggregate {
  id: Float
  multiplier: Float
}

input ScheduleAvgOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleCount {
  actionSchedules: Int!
  calendarEvents: Int!
}

type ScheduleCountAggregate {
  _all: Int!
  chron: Int!
  frequency: Int!
  id: Int!
  multiplier: Int!
}

input ScheduleCountOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleCreateInput {
  actionSchedules: ActionScheduleCreateNestedManyWithoutScheduleInput
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  chron: String
  frequency: UNIT
  multiplier: Int
}

input ScheduleCreateManyInput {
  chron: String
  frequency: UNIT
  id: Int
  multiplier: Int
}

input ScheduleCreateNestedOneWithoutActionSchedulesInput {
  connect: ScheduleWhereUniqueInput
  connectOrCreate: ScheduleCreateOrConnectWithoutActionSchedulesInput
  create: ScheduleCreateWithoutActionSchedulesInput
}

input ScheduleCreateNestedOneWithoutCalendarEventsInput {
  connect: ScheduleWhereUniqueInput
  connectOrCreate: ScheduleCreateOrConnectWithoutCalendarEventsInput
  create: ScheduleCreateWithoutCalendarEventsInput
}

input ScheduleCreateOrConnectWithoutActionSchedulesInput {
  create: ScheduleCreateWithoutActionSchedulesInput!
  where: ScheduleWhereUniqueInput!
}

input ScheduleCreateOrConnectWithoutCalendarEventsInput {
  create: ScheduleCreateWithoutCalendarEventsInput!
  where: ScheduleWhereUniqueInput!
}

input ScheduleCreateWithoutActionSchedulesInput {
  calendarEvents: CalendarEventCreateNestedManyWithoutScheduleInput
  chron: String
  frequency: UNIT
  multiplier: Int
}

input ScheduleCreateWithoutCalendarEventsInput {
  actionSchedules: ActionScheduleCreateNestedManyWithoutScheduleInput
  chron: String
  frequency: UNIT
  multiplier: Int
}

type ScheduleGroupBy {
  _avg: ScheduleAvgAggregate
  _count: ScheduleCountAggregate
  _max: ScheduleMaxAggregate
  _min: ScheduleMinAggregate
  _sum: ScheduleSumAggregate
  chron: String
  frequency: UNIT!
  id: Int!
  multiplier: Int!
}

type ScheduleMaxAggregate {
  chron: String
  frequency: UNIT
  id: Int
  multiplier: Int
}

input ScheduleMaxOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

type ScheduleMinAggregate {
  chron: String
  frequency: UNIT
  id: Int
  multiplier: Int
}

input ScheduleMinOrderByAggregateInput {
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleOrderByWithAggregationInput {
  _avg: ScheduleAvgOrderByAggregateInput
  _count: ScheduleCountOrderByAggregateInput
  _max: ScheduleMaxOrderByAggregateInput
  _min: ScheduleMinOrderByAggregateInput
  _sum: ScheduleSumOrderByAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleOrderByWithRelationInput {
  actionSchedules: ActionScheduleOrderByRelationAggregateInput
  calendarEvents: CalendarEventOrderByRelationAggregateInput
  chron: SortOrder
  frequency: SortOrder
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleRelationFilter {
  is: ScheduleWhereInput
  isNot: ScheduleWhereInput
}

enum ScheduleScalarFieldEnum {
  chron
  frequency
  id
  multiplier
}

input ScheduleScalarWhereWithAggregatesInput {
  AND: [ScheduleScalarWhereWithAggregatesInput!]
  NOT: [ScheduleScalarWhereWithAggregatesInput!]
  OR: [ScheduleScalarWhereWithAggregatesInput!]
  chron: StringNullableWithAggregatesFilter
  frequency: EnumUNITWithAggregatesFilter
  id: IntWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
}

type ScheduleSumAggregate {
  id: Int
  multiplier: Int
}

input ScheduleSumOrderByAggregateInput {
  id: SortOrder
  multiplier: SortOrder
}

input ScheduleUpdateInput {
  actionSchedules: ActionScheduleUpdateManyWithoutScheduleInput
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumUNITFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleUpdateManyMutationInput {
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumUNITFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleUpdateOneRequiredWithoutActionSchedulesInput {
  connect: ScheduleWhereUniqueInput
  connectOrCreate: ScheduleCreateOrConnectWithoutActionSchedulesInput
  create: ScheduleCreateWithoutActionSchedulesInput
  update: ScheduleUpdateWithoutActionSchedulesInput
  upsert: ScheduleUpsertWithoutActionSchedulesInput
}

input ScheduleUpdateOneWithoutCalendarEventsInput {
  connect: ScheduleWhereUniqueInput
  connectOrCreate: ScheduleCreateOrConnectWithoutCalendarEventsInput
  create: ScheduleCreateWithoutCalendarEventsInput
  delete: Boolean
  disconnect: Boolean
  update: ScheduleUpdateWithoutCalendarEventsInput
  upsert: ScheduleUpsertWithoutCalendarEventsInput
}

input ScheduleUpdateWithoutActionSchedulesInput {
  calendarEvents: CalendarEventUpdateManyWithoutScheduleInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumUNITFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleUpdateWithoutCalendarEventsInput {
  actionSchedules: ActionScheduleUpdateManyWithoutScheduleInput
  chron: NullableStringFieldUpdateOperationsInput
  frequency: EnumUNITFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
}

input ScheduleUpsertWithoutActionSchedulesInput {
  create: ScheduleCreateWithoutActionSchedulesInput!
  update: ScheduleUpdateWithoutActionSchedulesInput!
}

input ScheduleUpsertWithoutCalendarEventsInput {
  create: ScheduleCreateWithoutCalendarEventsInput!
  update: ScheduleUpdateWithoutCalendarEventsInput!
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  actionSchedules: ActionScheduleListRelationFilter
  calendarEvents: CalendarEventListRelationFilter
  chron: StringNullableFilter
  frequency: EnumUNITFilter
  id: IntFilter
  multiplier: IntFilter
}

input ScheduleWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum UNIT {
  DAY
  HOUR
  MINUTE
  MONTH
  WEEK
  YEAR
}

type User {
  UserAction(cursor: UserActionWhereUniqueInput, distinct: [UserActionScalarFieldEnum!], orderBy: [UserActionOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionWhereInput): [UserAction!]!
  _count: UserCount!
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  actionCompletions(cursor: ActionCompletionWhereUniqueInput, distinct: [ActionCompletionScalarFieldEnum!], orderBy: [ActionCompletionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionCompletionWhereInput): [ActionCompletion!]!
  actionSchedules(cursor: UserActionScheduleWhereUniqueInput, distinct: [UserActionScheduleScalarFieldEnum!], orderBy: [UserActionScheduleOrderByWithRelationInput!], skip: Int, take: Int, where: UserActionScheduleWhereInput): [UserActionSchedule!]!
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  beliefSelections(cursor: BeliefSelectionWhereUniqueInput, distinct: [BeliefSelectionScalarFieldEnum!], orderBy: [BeliefSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: BeliefSelectionWhereInput): [BeliefSelection!]!
  calendars(cursor: CalendarWhereUniqueInput, distinct: [CalendarScalarFieldEnum!], orderBy: [CalendarOrderByWithRelationInput!], skip: Int, take: Int, where: CalendarWhereInput): [Calendar!]!
  email: String!
  emailVerified: DateTime
  id: String!
  identitySelections(cursor: IdentitySelectionWhereUniqueInput, distinct: [IdentitySelectionScalarFieldEnum!], orderBy: [IdentitySelectionOrderByWithRelationInput!], skip: Int, take: Int, where: IdentitySelectionWhereInput): [IdentitySelection!]!
  image: String
  isAdmin: Boolean!
  name: String
  valueSelections(cursor: ValueSelectionWhereUniqueInput, distinct: [ValueSelectionScalarFieldEnum!], orderBy: [ValueSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): [ValueSelection!]!
}

type UserAction {
  abandonedAt: DateTime
  action: Action!
  actionId: Int!
  adoptedAt: DateTime!
  id: Int!
  user: User!
  userId: String!
}

type UserActionAvgAggregate {
  actionId: Float
  id: Float
}

input UserActionAvgOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

type UserActionCountAggregate {
  _all: Int!
  abandonedAt: Int!
  actionId: Int!
  adoptedAt: Int!
  id: Int!
  userId: Int!
}

input UserActionCountOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionCreateInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionInput!
  adoptedAt: DateTime
  user: UserCreateNestedOneWithoutUserActionInput!
}

input UserActionCreateManyActionInput {
  abandonedAt: DateTime
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionCreateManyActionInputEnvelope {
  data: [UserActionCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input UserActionCreateManyInput {
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionCreateManyUserInput {
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime
  id: Int
}

input UserActionCreateManyUserInputEnvelope {
  data: [UserActionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserActionCreateNestedManyWithoutActionInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutActionInput!]
  create: [UserActionCreateWithoutActionInput!]
  createMany: UserActionCreateManyActionInputEnvelope
}

input UserActionCreateNestedManyWithoutUserInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutUserInput!]
  create: [UserActionCreateWithoutUserInput!]
  createMany: UserActionCreateManyUserInputEnvelope
}

input UserActionCreateOrConnectWithoutActionInput {
  create: UserActionCreateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateOrConnectWithoutUserInput {
  create: UserActionCreateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionCreateWithoutActionInput {
  abandonedAt: DateTime
  adoptedAt: DateTime
  user: UserCreateNestedOneWithoutUserActionInput!
}

input UserActionCreateWithoutUserInput {
  abandonedAt: DateTime
  action: ActionCreateNestedOneWithoutUserActionInput!
  adoptedAt: DateTime
}

type UserActionGroupBy {
  _avg: UserActionAvgAggregate
  _count: UserActionCountAggregate
  _max: UserActionMaxAggregate
  _min: UserActionMinAggregate
  _sum: UserActionSumAggregate
  abandonedAt: DateTime
  actionId: Int!
  adoptedAt: DateTime!
  id: Int!
  userId: String!
}

input UserActionListRelationFilter {
  every: UserActionWhereInput
  none: UserActionWhereInput
  some: UserActionWhereInput
}

type UserActionMaxAggregate {
  abandonedAt: DateTime
  actionId: Int
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionMaxOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

type UserActionMinAggregate {
  abandonedAt: DateTime
  actionId: Int
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionMinOrderByAggregateInput {
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserActionOrderByWithAggregationInput {
  _avg: UserActionAvgOrderByAggregateInput
  _count: UserActionCountOrderByAggregateInput
  _max: UserActionMaxOrderByAggregateInput
  _min: UserActionMinOrderByAggregateInput
  _sum: UserActionSumOrderByAggregateInput
  abandonedAt: SortOrder
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionOrderByWithRelationInput {
  abandonedAt: SortOrder
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserActionScalarFieldEnum {
  abandonedAt
  actionId
  adoptedAt
  id
  userId
}

input UserActionScalarWhereInput {
  AND: [UserActionScalarWhereInput!]
  NOT: [UserActionScalarWhereInput!]
  OR: [UserActionScalarWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionId: IntFilter
  adoptedAt: DateTimeFilter
  id: IntFilter
  userId: StringFilter
}

input UserActionScalarWhereWithAggregatesInput {
  AND: [UserActionScalarWhereWithAggregatesInput!]
  NOT: [UserActionScalarWhereWithAggregatesInput!]
  OR: [UserActionScalarWhereWithAggregatesInput!]
  abandonedAt: DateTimeNullableWithAggregatesFilter
  actionId: IntWithAggregatesFilter
  adoptedAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserActionSchedule {
  abandonedAt: DateTime
  actionSchedule: ActionSchedule!
  actionScheduleId: Int!
  active: Boolean!
  adoptedAt: DateTime!
  id: Int!
  user: User!
  userId: String!
}

type UserActionScheduleAvgAggregate {
  actionScheduleId: Float
  id: Float
}

input UserActionScheduleAvgOrderByAggregateInput {
  actionScheduleId: SortOrder
  id: SortOrder
}

type UserActionScheduleCountAggregate {
  _all: Int!
  abandonedAt: Int!
  actionScheduleId: Int!
  active: Int!
  adoptedAt: Int!
  id: Int!
  userId: Int!
}

input UserActionScheduleCountOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionScheduleCreateInput {
  abandonedAt: DateTime
  actionSchedule: ActionScheduleCreateNestedOneWithoutUserActionSchedulesInput!
  active: Boolean
  adoptedAt: DateTime
  user: UserCreateNestedOneWithoutActionSchedulesInput!
}

input UserActionScheduleCreateManyActionScheduleInput {
  abandonedAt: DateTime
  active: Boolean
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionScheduleCreateManyActionScheduleInputEnvelope {
  data: [UserActionScheduleCreateManyActionScheduleInput!]!
  skipDuplicates: Boolean
}

input UserActionScheduleCreateManyInput {
  abandonedAt: DateTime
  actionScheduleId: Int!
  active: Boolean
  adoptedAt: DateTime
  id: Int
  userId: String!
}

input UserActionScheduleCreateManyUserInput {
  abandonedAt: DateTime
  actionScheduleId: Int!
  active: Boolean
  adoptedAt: DateTime
  id: Int
}

input UserActionScheduleCreateManyUserInputEnvelope {
  data: [UserActionScheduleCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserActionScheduleCreateNestedManyWithoutActionScheduleInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutActionScheduleInput!]
  create: [UserActionScheduleCreateWithoutActionScheduleInput!]
  createMany: UserActionScheduleCreateManyActionScheduleInputEnvelope
}

input UserActionScheduleCreateNestedManyWithoutUserInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutUserInput!]
  create: [UserActionScheduleCreateWithoutUserInput!]
  createMany: UserActionScheduleCreateManyUserInputEnvelope
}

input UserActionScheduleCreateOrConnectWithoutActionScheduleInput {
  create: UserActionScheduleCreateWithoutActionScheduleInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleCreateOrConnectWithoutUserInput {
  create: UserActionScheduleCreateWithoutUserInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleCreateWithoutActionScheduleInput {
  abandonedAt: DateTime
  active: Boolean
  adoptedAt: DateTime
  user: UserCreateNestedOneWithoutActionSchedulesInput!
}

input UserActionScheduleCreateWithoutUserInput {
  abandonedAt: DateTime
  actionSchedule: ActionScheduleCreateNestedOneWithoutUserActionSchedulesInput!
  active: Boolean
  adoptedAt: DateTime
}

type UserActionScheduleGroupBy {
  _avg: UserActionScheduleAvgAggregate
  _count: UserActionScheduleCountAggregate
  _max: UserActionScheduleMaxAggregate
  _min: UserActionScheduleMinAggregate
  _sum: UserActionScheduleSumAggregate
  abandonedAt: DateTime
  actionScheduleId: Int!
  active: Boolean!
  adoptedAt: DateTime!
  id: Int!
  userId: String!
}

input UserActionScheduleListRelationFilter {
  every: UserActionScheduleWhereInput
  none: UserActionScheduleWhereInput
  some: UserActionScheduleWhereInput
}

type UserActionScheduleMaxAggregate {
  abandonedAt: DateTime
  actionScheduleId: Int
  active: Boolean
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionScheduleMaxOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

type UserActionScheduleMinAggregate {
  abandonedAt: DateTime
  actionScheduleId: Int
  active: Boolean
  adoptedAt: DateTime
  id: Int
  userId: String
}

input UserActionScheduleMinOrderByAggregateInput {
  abandonedAt: SortOrder
  actionScheduleId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionScheduleOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserActionScheduleOrderByWithAggregationInput {
  _avg: UserActionScheduleAvgOrderByAggregateInput
  _count: UserActionScheduleCountOrderByAggregateInput
  _max: UserActionScheduleMaxOrderByAggregateInput
  _min: UserActionScheduleMinOrderByAggregateInput
  _sum: UserActionScheduleSumOrderByAggregateInput
  abandonedAt: SortOrder
  actionScheduleId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserActionScheduleOrderByWithRelationInput {
  abandonedAt: SortOrder
  actionSchedule: ActionScheduleOrderByWithRelationInput
  actionScheduleId: SortOrder
  active: SortOrder
  adoptedAt: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserActionScheduleScalarFieldEnum {
  abandonedAt
  actionScheduleId
  active
  adoptedAt
  id
  userId
}

input UserActionScheduleScalarWhereInput {
  AND: [UserActionScheduleScalarWhereInput!]
  NOT: [UserActionScheduleScalarWhereInput!]
  OR: [UserActionScheduleScalarWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionScheduleId: IntFilter
  active: BoolFilter
  adoptedAt: DateTimeFilter
  id: IntFilter
  userId: StringFilter
}

input UserActionScheduleScalarWhereWithAggregatesInput {
  AND: [UserActionScheduleScalarWhereWithAggregatesInput!]
  NOT: [UserActionScheduleScalarWhereWithAggregatesInput!]
  OR: [UserActionScheduleScalarWhereWithAggregatesInput!]
  abandonedAt: DateTimeNullableWithAggregatesFilter
  actionScheduleId: IntWithAggregatesFilter
  active: BoolWithAggregatesFilter
  adoptedAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserActionScheduleSumAggregate {
  actionScheduleId: Int
  id: Int
}

input UserActionScheduleSumOrderByAggregateInput {
  actionScheduleId: SortOrder
  id: SortOrder
}

input UserActionScheduleUpdateInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  actionSchedule: ActionScheduleUpdateOneRequiredWithoutUserActionSchedulesInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionSchedulesInput
}

input UserActionScheduleUpdateManyMutationInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
}

input UserActionScheduleUpdateManyWithWhereWithoutActionScheduleInput {
  data: UserActionScheduleUpdateManyMutationInput!
  where: UserActionScheduleScalarWhereInput!
}

input UserActionScheduleUpdateManyWithWhereWithoutUserInput {
  data: UserActionScheduleUpdateManyMutationInput!
  where: UserActionScheduleScalarWhereInput!
}

input UserActionScheduleUpdateManyWithoutActionScheduleInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutActionScheduleInput!]
  create: [UserActionScheduleCreateWithoutActionScheduleInput!]
  createMany: UserActionScheduleCreateManyActionScheduleInputEnvelope
  delete: [UserActionScheduleWhereUniqueInput!]
  deleteMany: [UserActionScheduleScalarWhereInput!]
  disconnect: [UserActionScheduleWhereUniqueInput!]
  set: [UserActionScheduleWhereUniqueInput!]
  update: [UserActionScheduleUpdateWithWhereUniqueWithoutActionScheduleInput!]
  updateMany: [UserActionScheduleUpdateManyWithWhereWithoutActionScheduleInput!]
  upsert: [UserActionScheduleUpsertWithWhereUniqueWithoutActionScheduleInput!]
}

input UserActionScheduleUpdateManyWithoutUserInput {
  connect: [UserActionScheduleWhereUniqueInput!]
  connectOrCreate: [UserActionScheduleCreateOrConnectWithoutUserInput!]
  create: [UserActionScheduleCreateWithoutUserInput!]
  createMany: UserActionScheduleCreateManyUserInputEnvelope
  delete: [UserActionScheduleWhereUniqueInput!]
  deleteMany: [UserActionScheduleScalarWhereInput!]
  disconnect: [UserActionScheduleWhereUniqueInput!]
  set: [UserActionScheduleWhereUniqueInput!]
  update: [UserActionScheduleUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserActionScheduleUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserActionScheduleUpsertWithWhereUniqueWithoutUserInput!]
}

input UserActionScheduleUpdateWithWhereUniqueWithoutActionScheduleInput {
  data: UserActionScheduleUpdateWithoutActionScheduleInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpdateWithWhereUniqueWithoutUserInput {
  data: UserActionScheduleUpdateWithoutUserInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpdateWithoutActionScheduleInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutActionSchedulesInput
}

input UserActionScheduleUpdateWithoutUserInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  actionSchedule: ActionScheduleUpdateOneRequiredWithoutUserActionSchedulesInput
  active: BoolFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
}

input UserActionScheduleUpsertWithWhereUniqueWithoutActionScheduleInput {
  create: UserActionScheduleCreateWithoutActionScheduleInput!
  update: UserActionScheduleUpdateWithoutActionScheduleInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleUpsertWithWhereUniqueWithoutUserInput {
  create: UserActionScheduleCreateWithoutUserInput!
  update: UserActionScheduleUpdateWithoutUserInput!
  where: UserActionScheduleWhereUniqueInput!
}

input UserActionScheduleWhereInput {
  AND: [UserActionScheduleWhereInput!]
  NOT: [UserActionScheduleWhereInput!]
  OR: [UserActionScheduleWhereInput!]
  abandonedAt: DateTimeNullableFilter
  actionSchedule: ActionScheduleRelationFilter
  actionScheduleId: IntFilter
  active: BoolFilter
  adoptedAt: DateTimeFilter
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserActionScheduleWhereUniqueInput {
  id: Int
}

type UserActionSumAggregate {
  actionId: Int
  id: Int
}

input UserActionSumOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
}

input UserActionUpdateInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserActionInput
}

input UserActionUpdateManyMutationInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
}

input UserActionUpdateManyWithWhereWithoutActionInput {
  data: UserActionUpdateManyMutationInput!
  where: UserActionScalarWhereInput!
}

input UserActionUpdateManyWithWhereWithoutUserInput {
  data: UserActionUpdateManyMutationInput!
  where: UserActionScalarWhereInput!
}

input UserActionUpdateManyWithoutActionInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutActionInput!]
  create: [UserActionCreateWithoutActionInput!]
  createMany: UserActionCreateManyActionInputEnvelope
  delete: [UserActionWhereUniqueInput!]
  deleteMany: [UserActionScalarWhereInput!]
  disconnect: [UserActionWhereUniqueInput!]
  set: [UserActionWhereUniqueInput!]
  update: [UserActionUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [UserActionUpdateManyWithWhereWithoutActionInput!]
  upsert: [UserActionUpsertWithWhereUniqueWithoutActionInput!]
}

input UserActionUpdateManyWithoutUserInput {
  connect: [UserActionWhereUniqueInput!]
  connectOrCreate: [UserActionCreateOrConnectWithoutUserInput!]
  create: [UserActionCreateWithoutUserInput!]
  createMany: UserActionCreateManyUserInputEnvelope
  delete: [UserActionWhereUniqueInput!]
  deleteMany: [UserActionScalarWhereInput!]
  disconnect: [UserActionWhereUniqueInput!]
  set: [UserActionWhereUniqueInput!]
  update: [UserActionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserActionUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserActionUpsertWithWhereUniqueWithoutUserInput!]
}

input UserActionUpdateWithWhereUniqueWithoutActionInput {
  data: UserActionUpdateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpdateWithWhereUniqueWithoutUserInput {
  data: UserActionUpdateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpdateWithoutActionInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserActionInput
}

input UserActionUpdateWithoutUserInput {
  abandonedAt: NullableDateTimeFieldUpdateOperationsInput
  action: ActionUpdateOneRequiredWithoutUserActionInput
  adoptedAt: DateTimeFieldUpdateOperationsInput
}

input UserActionUpsertWithWhereUniqueWithoutActionInput {
  create: UserActionCreateWithoutActionInput!
  update: UserActionUpdateWithoutActionInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUpsertWithWhereUniqueWithoutUserInput {
  create: UserActionCreateWithoutUserInput!
  update: UserActionUpdateWithoutUserInput!
  where: UserActionWhereUniqueInput!
}

input UserActionUserIdActionIdCompoundUniqueInput {
  actionId: Int!
  userId: String!
}

input UserActionWhereInput {
  AND: [UserActionWhereInput!]
  NOT: [UserActionWhereInput!]
  OR: [UserActionWhereInput!]
  abandonedAt: DateTimeNullableFilter
  action: ActionRelationFilter
  actionId: IntFilter
  adoptedAt: DateTimeFilter
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserActionWhereUniqueInput {
  id: Int
  userId_actionId: UserActionUserIdActionIdCompoundUniqueInput
}

type UserCount {
  UserAction: Int!
  accounts: Int!
  actionCompletions: Int!
  actionSchedules: Int!
  actions: Int!
  beliefSelections: Int!
  calendars: Int!
  identitySelections: Int!
  valueSelections: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  isAdmin: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserCreateInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserCreateNestedManyWithoutActionsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutActionsInput!]
  create: [UserCreateWithoutActionsInput!]
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutActionCompletionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionCompletionsInput
  create: UserCreateWithoutActionCompletionsInput
}

input UserCreateNestedOneWithoutActionSchedulesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionSchedulesInput
  create: UserCreateWithoutActionSchedulesInput
}

input UserCreateNestedOneWithoutBeliefSelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBeliefSelectionsInput
  create: UserCreateWithoutBeliefSelectionsInput
}

input UserCreateNestedOneWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
}

input UserCreateNestedOneWithoutIdentitySelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutIdentitySelectionsInput
  create: UserCreateWithoutIdentitySelectionsInput
}

input UserCreateNestedOneWithoutUserActionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserActionInput
  create: UserCreateWithoutUserActionInput
}

input UserCreateNestedOneWithoutValueSelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutValueSelectionsInput
  create: UserCreateWithoutValueSelectionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutActionCompletionsInput {
  create: UserCreateWithoutActionCompletionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutActionSchedulesInput {
  create: UserCreateWithoutActionSchedulesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutActionsInput {
  create: UserCreateWithoutActionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBeliefSelectionsInput {
  create: UserCreateWithoutBeliefSelectionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutIdentitySelectionsInput {
  create: UserCreateWithoutIdentitySelectionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserActionInput {
  create: UserCreateWithoutUserActionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutValueSelectionsInput {
  create: UserCreateWithoutValueSelectionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutActionCompletionsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutActionSchedulesInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutActionsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutBeliefSelectionsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutCalendarsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutIdentitySelectionsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserActionInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
  valueSelections: ValueSelectionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutValueSelectionsInput {
  UserAction: UserActionCreateNestedManyWithoutUserInput
  accounts: AccountCreateNestedManyWithoutUserInput
  actionCompletions: ActionCompletionCreateNestedManyWithoutUserInput
  actionSchedules: UserActionScheduleCreateNestedManyWithoutUserInput
  actions: ActionCreateNestedManyWithoutUsersInput
  beliefSelections: BeliefSelectionCreateNestedManyWithoutUserInput
  calendars: CalendarCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTime
  id: String
  identitySelections: IdentitySelectionCreateNestedManyWithoutUserInput
  image: String
  isAdmin: Boolean
  name: String
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email: String!
  emailVerified: DateTime
  id: String!
  image: String
  isAdmin: Boolean!
  name: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  isAdmin: Boolean
  name: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  UserAction: UserActionOrderByRelationAggregateInput
  accounts: AccountOrderByRelationAggregateInput
  actionCompletions: ActionCompletionOrderByRelationAggregateInput
  actionSchedules: UserActionScheduleOrderByRelationAggregateInput
  actions: ActionOrderByRelationAggregateInput
  beliefSelections: BeliefSelectionOrderByRelationAggregateInput
  calendars: CalendarOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  identitySelections: IdentitySelectionOrderByRelationAggregateInput
  image: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  valueSelections: ValueSelectionOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  emailVerified
  id
  image
  isAdmin
  name
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isAdmin: BoolFilter
  name: StringNullableFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

input UserUpdateInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutActionsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutActionsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutActionsInput!]
  create: [UserCreateWithoutActionsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutActionsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutActionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutActionsInput!]
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutActionCompletionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionCompletionsInput
  create: UserCreateWithoutActionCompletionsInput
  update: UserUpdateWithoutActionCompletionsInput
  upsert: UserUpsertWithoutActionCompletionsInput
}

input UserUpdateOneRequiredWithoutActionSchedulesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutActionSchedulesInput
  create: UserCreateWithoutActionSchedulesInput
  update: UserUpdateWithoutActionSchedulesInput
  upsert: UserUpsertWithoutActionSchedulesInput
}

input UserUpdateOneRequiredWithoutBeliefSelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBeliefSelectionsInput
  create: UserCreateWithoutBeliefSelectionsInput
  update: UserUpdateWithoutBeliefSelectionsInput
  upsert: UserUpsertWithoutBeliefSelectionsInput
}

input UserUpdateOneRequiredWithoutCalendarsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCalendarsInput
  create: UserCreateWithoutCalendarsInput
  update: UserUpdateWithoutCalendarsInput
  upsert: UserUpsertWithoutCalendarsInput
}

input UserUpdateOneRequiredWithoutIdentitySelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutIdentitySelectionsInput
  create: UserCreateWithoutIdentitySelectionsInput
  update: UserUpdateWithoutIdentitySelectionsInput
  upsert: UserUpsertWithoutIdentitySelectionsInput
}

input UserUpdateOneRequiredWithoutUserActionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserActionInput
  create: UserCreateWithoutUserActionInput
  update: UserUpdateWithoutUserActionInput
  upsert: UserUpsertWithoutUserActionInput
}

input UserUpdateOneRequiredWithoutValueSelectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutValueSelectionsInput
  create: UserCreateWithoutValueSelectionsInput
  update: UserUpdateWithoutValueSelectionsInput
  upsert: UserUpsertWithoutValueSelectionsInput
}

input UserUpdateWithWhereUniqueWithoutActionsInput {
  data: UserUpdateWithoutActionsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutAccountsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutActionCompletionsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutActionSchedulesInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutActionsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutBeliefSelectionsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutCalendarsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutIdentitySelectionsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserActionInput {
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutUserInput
}

input UserUpdateWithoutValueSelectionsInput {
  UserAction: UserActionUpdateManyWithoutUserInput
  accounts: AccountUpdateManyWithoutUserInput
  actionCompletions: ActionCompletionUpdateManyWithoutUserInput
  actionSchedules: UserActionScheduleUpdateManyWithoutUserInput
  actions: ActionUpdateManyWithoutUsersInput
  beliefSelections: BeliefSelectionUpdateManyWithoutUserInput
  calendars: CalendarUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identitySelections: IdentitySelectionUpdateManyWithoutUserInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutActionsInput {
  create: UserCreateWithoutActionsInput!
  update: UserUpdateWithoutActionsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutActionCompletionsInput {
  create: UserCreateWithoutActionCompletionsInput!
  update: UserUpdateWithoutActionCompletionsInput!
}

input UserUpsertWithoutActionSchedulesInput {
  create: UserCreateWithoutActionSchedulesInput!
  update: UserUpdateWithoutActionSchedulesInput!
}

input UserUpsertWithoutBeliefSelectionsInput {
  create: UserCreateWithoutBeliefSelectionsInput!
  update: UserUpdateWithoutBeliefSelectionsInput!
}

input UserUpsertWithoutCalendarsInput {
  create: UserCreateWithoutCalendarsInput!
  update: UserUpdateWithoutCalendarsInput!
}

input UserUpsertWithoutIdentitySelectionsInput {
  create: UserCreateWithoutIdentitySelectionsInput!
  update: UserUpdateWithoutIdentitySelectionsInput!
}

input UserUpsertWithoutUserActionInput {
  create: UserCreateWithoutUserActionInput!
  update: UserUpdateWithoutUserActionInput!
}

input UserUpsertWithoutValueSelectionsInput {
  create: UserCreateWithoutValueSelectionsInput!
  update: UserUpdateWithoutValueSelectionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  UserAction: UserActionListRelationFilter
  accounts: AccountListRelationFilter
  actionCompletions: ActionCompletionListRelationFilter
  actionSchedules: UserActionScheduleListRelationFilter
  actions: ActionListRelationFilter
  beliefSelections: BeliefSelectionListRelationFilter
  calendars: CalendarListRelationFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  identitySelections: IdentitySelectionListRelationFilter
  image: StringNullableFilter
  isAdmin: BoolFilter
  name: StringNullableFilter
  valueSelections: ValueSelectionListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Value {
  _count: ValueCount!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
  valueSelections(cursor: ValueSelectionWhereUniqueInput, distinct: [ValueSelectionScalarFieldEnum!], orderBy: [ValueSelectionOrderByWithRelationInput!], skip: Int, take: Int, where: ValueSelectionWhereInput): [ValueSelection!]!
}

type ValueAvgAggregate {
  id: Float
}

input ValueAvgOrderByAggregateInput {
  id: SortOrder
}

type ValueCount {
  valueSelections: Int!
}

type ValueCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input ValueCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueCreateInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
  valueSelections: ValueSelectionCreateNestedManyWithoutValueInput
}

input ValueCreateManyInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input ValueCreateNestedOneWithoutValueSelectionsInput {
  connect: ValueWhereUniqueInput
  connectOrCreate: ValueCreateOrConnectWithoutValueSelectionsInput
  create: ValueCreateWithoutValueSelectionsInput
}

input ValueCreateOrConnectWithoutValueSelectionsInput {
  create: ValueCreateWithoutValueSelectionsInput!
  where: ValueWhereUniqueInput!
}

input ValueCreateWithoutValueSelectionsInput {
  createdAt: DateTime
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime
}

type ValueGroupBy {
  _avg: ValueAvgAggregate
  _count: ValueCountAggregate
  _max: ValueMaxAggregate
  _min: ValueMinAggregate
  _sum: ValueSumAggregate
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type ValueMaxAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input ValueMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type ValueMinAggregate {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input ValueMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByWithAggregationInput {
  _avg: ValueAvgOrderByAggregateInput
  _count: ValueCountOrderByAggregateInput
  _max: ValueMaxOrderByAggregateInput
  _min: ValueMinOrderByAggregateInput
  _sum: ValueSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input ValueOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
  valueSelections: ValueSelectionOrderByRelationAggregateInput
}

input ValueRelationFilter {
  is: ValueWhereInput
  isNot: ValueWhereInput
}

enum ValueScalarFieldEnum {
  createdAt
  description
  id
  name
  slug
  updatedAt
}

input ValueScalarWhereWithAggregatesInput {
  AND: [ValueScalarWhereWithAggregatesInput!]
  NOT: [ValueScalarWhereWithAggregatesInput!]
  OR: [ValueScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type ValueSelection {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  user: User!
  userId: String!
  value: Value!
  valueId: Int!
}

type ValueSelectionAvgAggregate {
  id: Float
  valueId: Float
}

input ValueSelectionAvgOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

type ValueSelectionCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
  valueId: Int!
}

input ValueSelectionCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input ValueSelectionCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutValueSelectionsInput!
  value: ValueCreateNestedOneWithoutValueSelectionsInput!
}

input ValueSelectionCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
  valueId: Int!
}

input ValueSelectionCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  valueId: Int!
}

input ValueSelectionCreateManyUserInputEnvelope {
  data: [ValueSelectionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ValueSelectionCreateManyValueInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String!
}

input ValueSelectionCreateManyValueInputEnvelope {
  data: [ValueSelectionCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input ValueSelectionCreateNestedManyWithoutUserInput {
  connect: [ValueSelectionWhereUniqueInput!]
  connectOrCreate: [ValueSelectionCreateOrConnectWithoutUserInput!]
  create: [ValueSelectionCreateWithoutUserInput!]
  createMany: ValueSelectionCreateManyUserInputEnvelope
}

input ValueSelectionCreateNestedManyWithoutValueInput {
  connect: [ValueSelectionWhereUniqueInput!]
  connectOrCreate: [ValueSelectionCreateOrConnectWithoutValueInput!]
  create: [ValueSelectionCreateWithoutValueInput!]
  createMany: ValueSelectionCreateManyValueInputEnvelope
}

input ValueSelectionCreateOrConnectWithoutUserInput {
  create: ValueSelectionCreateWithoutUserInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionCreateOrConnectWithoutValueInput {
  create: ValueSelectionCreateWithoutValueInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  value: ValueCreateNestedOneWithoutValueSelectionsInput!
}

input ValueSelectionCreateWithoutValueInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutValueSelectionsInput!
}

type ValueSelectionGroupBy {
  _avg: ValueSelectionAvgAggregate
  _count: ValueSelectionCountAggregate
  _max: ValueSelectionMaxAggregate
  _min: ValueSelectionMinAggregate
  _sum: ValueSelectionSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime
  userId: String!
  valueId: Int!
}

input ValueSelectionListRelationFilter {
  every: ValueSelectionWhereInput
  none: ValueSelectionWhereInput
  some: ValueSelectionWhereInput
}

type ValueSelectionMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
  valueId: Int
}

input ValueSelectionMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

type ValueSelectionMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: String
  valueId: Int
}

input ValueSelectionMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input ValueSelectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ValueSelectionOrderByWithAggregationInput {
  _avg: ValueSelectionAvgOrderByAggregateInput
  _count: ValueSelectionCountOrderByAggregateInput
  _max: ValueSelectionMaxOrderByAggregateInput
  _min: ValueSelectionMinOrderByAggregateInput
  _sum: ValueSelectionSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  valueId: SortOrder
}

input ValueSelectionOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  value: ValueOrderByWithRelationInput
  valueId: SortOrder
}

enum ValueSelectionScalarFieldEnum {
  createdAt
  deletedAt
  id
  updatedAt
  userId
  valueId
}

input ValueSelectionScalarWhereInput {
  AND: [ValueSelectionScalarWhereInput!]
  NOT: [ValueSelectionScalarWhereInput!]
  OR: [ValueSelectionScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
  valueId: IntFilter
}

input ValueSelectionScalarWhereWithAggregatesInput {
  AND: [ValueSelectionScalarWhereWithAggregatesInput!]
  NOT: [ValueSelectionScalarWhereWithAggregatesInput!]
  OR: [ValueSelectionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  valueId: IntWithAggregatesFilter
}

type ValueSelectionSumAggregate {
  id: Int
  valueId: Int
}

input ValueSelectionSumOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

input ValueSelectionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutValueSelectionsInput
  value: ValueUpdateOneRequiredWithoutValueSelectionsInput
}

input ValueSelectionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ValueSelectionUpdateManyWithWhereWithoutUserInput {
  data: ValueSelectionUpdateManyMutationInput!
  where: ValueSelectionScalarWhereInput!
}

input ValueSelectionUpdateManyWithWhereWithoutValueInput {
  data: ValueSelectionUpdateManyMutationInput!
  where: ValueSelectionScalarWhereInput!
}

input ValueSelectionUpdateManyWithoutUserInput {
  connect: [ValueSelectionWhereUniqueInput!]
  connectOrCreate: [ValueSelectionCreateOrConnectWithoutUserInput!]
  create: [ValueSelectionCreateWithoutUserInput!]
  createMany: ValueSelectionCreateManyUserInputEnvelope
  delete: [ValueSelectionWhereUniqueInput!]
  deleteMany: [ValueSelectionScalarWhereInput!]
  disconnect: [ValueSelectionWhereUniqueInput!]
  set: [ValueSelectionWhereUniqueInput!]
  update: [ValueSelectionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ValueSelectionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ValueSelectionUpsertWithWhereUniqueWithoutUserInput!]
}

input ValueSelectionUpdateManyWithoutValueInput {
  connect: [ValueSelectionWhereUniqueInput!]
  connectOrCreate: [ValueSelectionCreateOrConnectWithoutValueInput!]
  create: [ValueSelectionCreateWithoutValueInput!]
  createMany: ValueSelectionCreateManyValueInputEnvelope
  delete: [ValueSelectionWhereUniqueInput!]
  deleteMany: [ValueSelectionScalarWhereInput!]
  disconnect: [ValueSelectionWhereUniqueInput!]
  set: [ValueSelectionWhereUniqueInput!]
  update: [ValueSelectionUpdateWithWhereUniqueWithoutValueInput!]
  updateMany: [ValueSelectionUpdateManyWithWhereWithoutValueInput!]
  upsert: [ValueSelectionUpsertWithWhereUniqueWithoutValueInput!]
}

input ValueSelectionUpdateWithWhereUniqueWithoutUserInput {
  data: ValueSelectionUpdateWithoutUserInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionUpdateWithWhereUniqueWithoutValueInput {
  data: ValueSelectionUpdateWithoutValueInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  value: ValueUpdateOneRequiredWithoutValueSelectionsInput
}

input ValueSelectionUpdateWithoutValueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutValueSelectionsInput
}

input ValueSelectionUpsertWithWhereUniqueWithoutUserInput {
  create: ValueSelectionCreateWithoutUserInput!
  update: ValueSelectionUpdateWithoutUserInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionUpsertWithWhereUniqueWithoutValueInput {
  create: ValueSelectionCreateWithoutValueInput!
  update: ValueSelectionUpdateWithoutValueInput!
  where: ValueSelectionWhereUniqueInput!
}

input ValueSelectionUserIdValueIdCompoundUniqueInput {
  userId: String!
  valueId: Int!
}

input ValueSelectionWhereInput {
  AND: [ValueSelectionWhereInput!]
  NOT: [ValueSelectionWhereInput!]
  OR: [ValueSelectionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  value: ValueRelationFilter
  valueId: IntFilter
}

input ValueSelectionWhereUniqueInput {
  id: Int
  userId_valueId: ValueSelectionUserIdValueIdCompoundUniqueInput
}

type ValueSumAggregate {
  id: Int
}

input ValueSumOrderByAggregateInput {
  id: SortOrder
}

input ValueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  valueSelections: ValueSelectionUpdateManyWithoutValueInput
}

input ValueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ValueUpdateOneRequiredWithoutValueSelectionsInput {
  connect: ValueWhereUniqueInput
  connectOrCreate: ValueCreateOrConnectWithoutValueSelectionsInput
  create: ValueCreateWithoutValueSelectionsInput
  update: ValueUpdateWithoutValueSelectionsInput
  upsert: ValueUpsertWithoutValueSelectionsInput
}

input ValueUpdateWithoutValueSelectionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ValueUpsertWithoutValueSelectionsInput {
  create: ValueCreateWithoutValueSelectionsInput!
  update: ValueUpdateWithoutValueSelectionsInput!
}

input ValueWhereInput {
  AND: [ValueWhereInput!]
  NOT: [ValueWhereInput!]
  OR: [ValueWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeNullableFilter
  valueSelections: ValueSelectionListRelationFilter
}

input ValueWhereUniqueInput {
  id: Int
  slug: String
}
