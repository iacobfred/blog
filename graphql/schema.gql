# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

schema {
  query: Query
  mutation: Mutation
}

type Account {
  _id: ObjectId!
  accessToken: String
  accessTokenExpiry: DateTimeISO
  createdAt: DateTimeISO!
  id: ObjectId!
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]!
  syncToken: String
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input AccountCreateInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  provider: String!
  refreshToken: String
  remoteId: String!
  scopes: [String!]!
  syncToken: String
  userId: ObjectId!
}

input AccountUpdateInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  provider: String
  refreshToken: String
  remoteId: String
  scopes: [String!]
  syncToken: String
  userId: ObjectId
}

input AccountWhereInput {
  accessToken: String
  accessTokenExpiry: DateTimeISO
  id: ObjectId
  provider: String
  refreshToken: String
  remoteId: String
  scopes: [String!]
  syncToken: String
  userId: ObjectId
}

input AccountWhereUniqueInput {
  id: ObjectId
  remoteId: String
}

type Belief {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input BeliefCreateInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input BeliefUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input BeliefWhereInput {
  archivedAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  userId: ObjectId
}

input BeliefWhereUniqueInput {
  id: ObjectId
}

type Book {
  _id: ObjectId!
  archivedAt: DateTimeISO
  authorNames: [String!]!
  authorNamesLf: [String!]!
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
  updatedAt: DateTimeISO!
}

input BookCreateInput {
  archivedAt: DateTimeISO
  authorNames: [String!]!
  authorNamesLf: [String!]!
  description: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String!
  title: String!
}

input BookUpdateInput {
  archivedAt: DateTimeISO
  authorNames: [String!]
  authorNamesLf: [String!]
  description: String
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
}

input BookWhereInput {
  archivedAt: DateTimeISO
  authorNames: [String!]
  authorNamesLf: [String!]
  description: String
  id: ObjectId
  isbn: String
  isbn13: String
  originalPublicationYear: Int
  publicationYear: Int
  slug: String
  title: String
}

input BookWhereUniqueInput {
  id: ObjectId
}

type Calendar {
  _id: ObjectId!
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  createdAt: DateTimeISO!
  enabled: Boolean
  id: ObjectId!
  name: String!
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input CalendarCreateInput {
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  enabled: Boolean
  name: String!
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  userId: ObjectId!
}

type CalendarEvent {
  _id: ObjectId!
  allDay: Boolean!
  archivedAt: DateTimeISO
  calendarId: ObjectId!
  canceled: Boolean
  createdAt: DateTimeISO!
  end: DateTimeISO
  habitId: ObjectId
  id: ObjectId!
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO!
  taskId: ObjectId
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input CalendarEventCreateInput {
  allDay: Boolean!
  archivedAt: DateTimeISO
  calendarId: ObjectId!
  canceled: Boolean
  end: DateTimeISO
  habitId: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO!
  taskId: ObjectId
  title: String!
  userId: ObjectId!
}

input CalendarEventUpdateInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: ObjectId
  canceled: Boolean
  end: DateTimeISO
  habitId: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO
  taskId: ObjectId
  title: String
  userId: ObjectId
}

input CalendarEventWhereInput {
  allDay: Boolean
  archivedAt: DateTimeISO
  calendarId: ObjectId
  canceled: Boolean
  end: DateTimeISO
  habitId: ObjectId
  id: ObjectId
  notes: String
  remoteId: String
  scheduleId: ObjectId
  start: DateTimeISO
  taskId: ObjectId
  title: String
  userId: ObjectId
}

input CalendarEventWhereUniqueInput {
  id: ObjectId
}

input CalendarUpdateInput {
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  enabled: Boolean
  name: String
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  userId: ObjectId
}

input CalendarWhereInput {
  accountId: ObjectId
  archivedAt: DateTimeISO
  color: String
  enabled: Boolean
  id: ObjectId
  name: String
  primary: Boolean
  provider: String
  public: Boolean
  remoteId: String
  syncToken: String
  userId: ObjectId
}

input CalendarWhereUniqueInput {
  id: ObjectId
}

type Dashboard {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  isDefault: Boolean
  layouts: JSON!
  name: String!
  public: Boolean
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input DashboardCreateInput {
  archivedAt: DateTimeISO
  description: String
  isDefault: Boolean
  layouts: JSON!
  name: String!
  public: Boolean
  userId: ObjectId!
}

input DashboardUpdateInput {
  archivedAt: DateTimeISO
  description: String
  isDefault: Boolean
  layouts: JSON
  name: String
  public: Boolean
  userId: ObjectId
}

input DashboardWhereInput {
  archivedAt: DateTimeISO
  description: String
  id: ObjectId
  isDefault: Boolean
  layouts: JSON
  name: String
  public: Boolean
  userId: ObjectId
}

input DashboardWhereUniqueInput {
  id: ObjectId
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTimeISO

type Goal {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String!
  habitId: ObjectId
  id: ObjectId!
  parentId: ObjectId
  updatedAt: DateTimeISO!
}

input GoalCreateInput {
  archivedAt: DateTimeISO
  description: String!
  habitId: ObjectId
  parentId: ObjectId
}

input GoalUpdateInput {
  archivedAt: DateTimeISO
  description: String
  habitId: ObjectId
  parentId: ObjectId
}

input GoalWhereInput {
  archivedAt: DateTimeISO
  description: String
  habitId: ObjectId
  id: ObjectId
  parentId: ObjectId
}

input GoalWhereUniqueInput {
  id: ObjectId
}

type Habit {
  _id: ObjectId!
  archivedAt: DateTimeISO
  chronString: String
  createdAt: DateTimeISO!
  defaultDurationInMinutes: Int
  id: ObjectId!
  name: String!
  public: Boolean
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input HabitCreateInput {
  archivedAt: DateTimeISO
  chronString: String
  defaultDurationInMinutes: Int
  name: String!
  public: Boolean
  userId: ObjectId!
}

input HabitUpdateInput {
  archivedAt: DateTimeISO
  chronString: String
  defaultDurationInMinutes: Int
  name: String
  public: Boolean
  userId: ObjectId
}

input HabitWhereInput {
  archivedAt: DateTimeISO
  chronString: String
  defaultDurationInMinutes: Int
  id: ObjectId
  name: String
  public: Boolean
  userId: ObjectId
}

input HabitWhereUniqueInput {
  id: ObjectId
}

type Identity {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input IdentityCreateInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input IdentityUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input IdentityWhereInput {
  archivedAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  userId: ObjectId
}

input IdentityWhereUniqueInput {
  id: ObjectId
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type List {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  fields: JSON!
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ListCreateInput {
  archivedAt: DateTimeISO
  description: String
  fields: JSON!
  name: String!
  userId: ObjectId!
}

type ListItem {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  data: JSON!
  id: ObjectId!
  listId: ObjectId!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ListItemCreateInput {
  archivedAt: DateTimeISO
  data: JSON!
  listId: ObjectId!
  userId: ObjectId!
}

input ListItemUpdateInput {
  archivedAt: DateTimeISO
  data: JSON
  listId: ObjectId
  userId: ObjectId
}

input ListItemWhereInput {
  archivedAt: DateTimeISO
  data: JSON
  id: ObjectId
  listId: ObjectId
  userId: ObjectId
}

input ListItemWhereUniqueInput {
  id: ObjectId
}

input ListUpdateInput {
  archivedAt: DateTimeISO
  description: String
  fields: JSON
  name: String
  userId: ObjectId
}

input ListWhereInput {
  archivedAt: DateTimeISO
  description: String
  fields: JSON
  id: ObjectId
  name: String
  userId: ObjectId
}

input ListWhereUniqueInput {
  id: ObjectId
}

type Mantra {
  _id: ObjectId!
  archivedAt: DateTimeISO
  content: String!
  createdAt: DateTimeISO!
  id: ObjectId!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input MantraCreateInput {
  archivedAt: DateTimeISO
  content: String!
  userId: ObjectId!
}

input MantraUpdateInput {
  archivedAt: DateTimeISO
  content: String
  userId: ObjectId
}

input MantraWhereInput {
  archivedAt: DateTimeISO
  content: String
  id: ObjectId
  userId: ObjectId
}

input MantraWhereUniqueInput {
  id: ObjectId
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createBelief(data: BeliefCreateInput!): Belief!
  createBook(data: BookCreateInput!): Book!
  createCalendar(data: CalendarCreateInput!): Calendar!
  createCalendarEvent(data: CalendarEventCreateInput!): CalendarEvent!
  createDashboard(data: DashboardCreateInput!): Dashboard!
  createGoal(data: GoalCreateInput!): Goal!
  createHabit(data: HabitCreateInput!): Habit!
  createIdentity(data: IdentityCreateInput!): Identity!
  createList(data: ListCreateInput!): List!
  createListItem(data: ListItemCreateInput!): ListItem!
  createMantra(data: MantraCreateInput!): Mantra!
  createManyAccount(data: AccountCreateInput!): [Account!]!
  createManyBelief(data: BeliefCreateInput!): [Belief!]!
  createManyBook(data: BookCreateInput!): [Book!]!
  createManyCalendar(data: CalendarCreateInput!): [Calendar!]!
  createManyCalendarEvent(data: CalendarEventCreateInput!): [CalendarEvent!]!
  createManyDashboard(data: DashboardCreateInput!): [Dashboard!]!
  createManyGoal(data: GoalCreateInput!): [Goal!]!
  createManyHabit(data: HabitCreateInput!): [Habit!]!
  createManyIdentity(data: IdentityCreateInput!): [Identity!]!
  createManyList(data: ListCreateInput!): [List!]!
  createManyListItem(data: ListItemCreateInput!): [ListItem!]!
  createManyMantra(data: MantraCreateInput!): [Mantra!]!
  createManyNote(data: NoteCreateInput!): [Note!]!
  createManyNotebook(data: NotebookCreateInput!): [Notebook!]!
  createManyShelving(data: ShelvingCreateInput!): [Shelving!]!
  createManyTask(data: TaskCreateInput!): [Task!]!
  createManyUser(data: UserCreateInput!): [User!]!
  createManyValue(data: ValueCreateInput!): [Value!]!
  createNote(data: NoteCreateInput!): Note!
  createNotebook(data: NotebookCreateInput!): Notebook!
  createShelving(data: ShelvingCreateInput!): Shelving!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  createValue(data: ValueCreateInput!): Value!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteBelief(where: BeliefWhereUniqueInput!): Belief
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  deleteDashboard(where: DashboardWhereUniqueInput!): Dashboard
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteHabit(where: HabitWhereUniqueInput!): Habit
  deleteIdentity(where: IdentityWhereUniqueInput!): Identity
  deleteList(where: ListWhereUniqueInput!): List
  deleteListItem(where: ListItemWhereUniqueInput!): ListItem
  deleteMantra(where: MantraWhereUniqueInput!): Mantra
  deleteManyAccount(where: AccountWhereInput!): [Account!]!
  deleteManyBelief(where: BeliefWhereInput!): [Belief!]!
  deleteManyBook(where: BookWhereInput!): [Book!]!
  deleteManyCalendar(where: CalendarWhereInput!): [Calendar!]!
  deleteManyCalendarEvent(where: CalendarEventWhereInput!): [CalendarEvent!]!
  deleteManyDashboard(where: DashboardWhereInput!): [Dashboard!]!
  deleteManyGoal(where: GoalWhereInput!): [Goal!]!
  deleteManyHabit(where: HabitWhereInput!): [Habit!]!
  deleteManyIdentity(where: IdentityWhereInput!): [Identity!]!
  deleteManyList(where: ListWhereInput!): [List!]!
  deleteManyListItem(where: ListItemWhereInput!): [ListItem!]!
  deleteManyMantra(where: MantraWhereInput!): [Mantra!]!
  deleteManyNote(where: NoteWhereInput!): [Note!]!
  deleteManyNotebook(where: NotebookWhereInput!): [Notebook!]!
  deleteManyShelving(where: ShelvingWhereInput!): [Shelving!]!
  deleteManyTask(where: TaskWhereInput!): [Task!]!
  deleteManyUser(where: UserWhereInput!): [User!]!
  deleteManyValue(where: ValueWhereInput!): [Value!]!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotebook(where: NotebookWhereUniqueInput!): Notebook
  deleteShelving(where: ShelvingWhereUniqueInput!): Shelving
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  deleteValue(where: ValueWhereUniqueInput!): Value
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  updateBelief(data: BeliefUpdateInput!, where: BeliefWhereUniqueInput!): Belief!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
  updateCalendar(data: CalendarUpdateInput!, where: CalendarWhereUniqueInput!): Calendar!
  updateCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  updateDashboard(data: DashboardUpdateInput!, where: DashboardWhereUniqueInput!): Dashboard!
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity!
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List!
  updateListItem(data: ListItemUpdateInput!, where: ListItemWhereUniqueInput!): ListItem!
  updateMantra(data: MantraUpdateInput!, where: MantraWhereUniqueInput!): Mantra!
  updateManyAccount(data: AccountUpdateInput!, where: AccountWhereInput!): [Account!]!
  updateManyBelief(data: BeliefUpdateInput!, where: BeliefWhereInput!): [Belief!]!
  updateManyBook(data: BookUpdateInput!, where: BookWhereInput!): [Book!]!
  updateManyCalendar(data: CalendarUpdateInput!, where: CalendarWhereInput!): [Calendar!]!
  updateManyCalendarEvent(data: CalendarEventUpdateInput!, where: CalendarEventWhereInput!): [CalendarEvent!]!
  updateManyDashboard(data: DashboardUpdateInput!, where: DashboardWhereInput!): [Dashboard!]!
  updateManyGoal(data: GoalUpdateInput!, where: GoalWhereInput!): [Goal!]!
  updateManyHabit(data: HabitUpdateInput!, where: HabitWhereInput!): [Habit!]!
  updateManyIdentity(data: IdentityUpdateInput!, where: IdentityWhereInput!): [Identity!]!
  updateManyList(data: ListUpdateInput!, where: ListWhereInput!): [List!]!
  updateManyListItem(data: ListItemUpdateInput!, where: ListItemWhereInput!): [ListItem!]!
  updateManyMantra(data: MantraUpdateInput!, where: MantraWhereInput!): [Mantra!]!
  updateManyNote(data: NoteUpdateInput!, where: NoteWhereInput!): [Note!]!
  updateManyNotebook(data: NotebookUpdateInput!, where: NotebookWhereInput!): [Notebook!]!
  updateManyShelving(data: ShelvingUpdateInput!, where: ShelvingWhereInput!): [Shelving!]!
  updateManyTask(data: TaskUpdateInput!, where: TaskWhereInput!): [Task!]!
  updateManyUser(data: UserUpdateInput!, where: UserWhereInput!): [User!]!
  updateManyValue(data: ValueUpdateInput!, where: ValueWhereInput!): [Value!]!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note!
  updateNotebook(data: NotebookUpdateInput!, where: NotebookWhereUniqueInput!): Notebook!
  updateShelving(data: ShelvingUpdateInput!, where: ShelvingWhereUniqueInput!): Shelving!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateValue(data: ValueUpdateInput!, where: ValueWhereUniqueInput!): Value!
  upsertAccount(data: AccountCreateInput!, where: AccountWhereUniqueInput!): Account!
  upsertBelief(data: BeliefCreateInput!, where: BeliefWhereUniqueInput!): Belief!
  upsertBook(data: BookCreateInput!, where: BookWhereUniqueInput!): Book!
  upsertCalendar(data: CalendarCreateInput!, where: CalendarWhereUniqueInput!): Calendar!
  upsertCalendarEvent(data: CalendarEventCreateInput!, where: CalendarEventWhereUniqueInput!): CalendarEvent!
  upsertDashboard(data: DashboardCreateInput!, where: DashboardWhereUniqueInput!): Dashboard!
  upsertGoal(data: GoalCreateInput!, where: GoalWhereUniqueInput!): Goal!
  upsertHabit(data: HabitCreateInput!, where: HabitWhereUniqueInput!): Habit!
  upsertIdentity(data: IdentityCreateInput!, where: IdentityWhereUniqueInput!): Identity!
  upsertList(data: ListCreateInput!, where: ListWhereUniqueInput!): List!
  upsertListItem(data: ListItemCreateInput!, where: ListItemWhereUniqueInput!): ListItem!
  upsertMantra(data: MantraCreateInput!, where: MantraWhereUniqueInput!): Mantra!
  upsertNote(data: NoteCreateInput!, where: NoteWhereUniqueInput!): Note!
  upsertNotebook(data: NotebookCreateInput!, where: NotebookWhereUniqueInput!): Notebook!
  upsertShelving(data: ShelvingCreateInput!, where: ShelvingWhereUniqueInput!): Shelving!
  upsertTask(data: TaskCreateInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(data: UserCreateInput!, where: UserWhereUniqueInput!): User!
  upsertValue(data: ValueCreateInput!, where: ValueWhereUniqueInput!): Value!
}

type Note {
  _id: ObjectId!
  archivedAt: DateTimeISO
  body: String!
  createdAt: DateTimeISO!
  id: ObjectId!
  notebookId: ObjectId!
  public: Boolean
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input NoteCreateInput {
  archivedAt: DateTimeISO
  body: String!
  notebookId: ObjectId!
  public: Boolean
  title: String!
  userId: ObjectId!
}

input NoteUpdateInput {
  archivedAt: DateTimeISO
  body: String
  notebookId: ObjectId
  public: Boolean
  title: String
  userId: ObjectId
}

input NoteWhereInput {
  archivedAt: DateTimeISO
  body: String
  id: ObjectId
  notebookId: ObjectId
  public: Boolean
  title: String
  userId: ObjectId
}

input NoteWhereUniqueInput {
  id: ObjectId
}

type Notebook {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  public: Boolean
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input NotebookCreateInput {
  archivedAt: DateTimeISO
  description: String
  public: Boolean
  title: String!
  userId: ObjectId!
}

input NotebookUpdateInput {
  archivedAt: DateTimeISO
  description: String
  public: Boolean
  title: String
  userId: ObjectId
}

input NotebookWhereInput {
  archivedAt: DateTimeISO
  description: String
  id: ObjectId
  public: Boolean
  title: String
  userId: ObjectId
}

input NotebookWhereUniqueInput {
  id: ObjectId
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput): [Account!]!
  belief(where: BeliefWhereUniqueInput!): Belief
  beliefs(where: BeliefWhereInput): [Belief!]!
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput): [Book!]!
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEvents(where: CalendarEventWhereInput): [CalendarEvent!]!
  calendars(where: CalendarWhereInput): [Calendar!]!
  dashboard(where: DashboardWhereUniqueInput!): Dashboard
  dashboards(where: DashboardWhereInput): [Dashboard!]!
  goal(where: GoalWhereUniqueInput!): Goal
  goals(where: GoalWhereInput): [Goal!]!
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput): [Habit!]!
  identities(where: IdentityWhereInput): [Identity!]!
  identity(where: IdentityWhereUniqueInput!): Identity
  list(where: ListWhereUniqueInput!): List
  listItem(where: ListItemWhereUniqueInput!): ListItem
  listItems(where: ListItemWhereInput): [ListItem!]!
  lists(where: ListWhereInput): [List!]!
  mantra(where: MantraWhereUniqueInput!): Mantra
  mantras(where: MantraWhereInput): [Mantra!]!
  note(where: NoteWhereUniqueInput!): Note
  notebook(where: NotebookWhereUniqueInput!): Notebook
  notebooks(where: NotebookWhereInput): [Notebook!]!
  notes(where: NoteWhereInput): [Note!]!
  shelving(where: ShelvingWhereUniqueInput!): Shelving
  shelvings(where: ShelvingWhereInput): [Shelving!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput): [User!]!
  value(where: ValueWhereUniqueInput!): Value
  values(where: ValueWhereInput): [Value!]!
}

type Shelving {
  _id: ObjectId!
  archivedAt: DateTimeISO
  bookId: ObjectId!
  createdAt: DateTimeISO!
  id: ObjectId!
  position: Int!
  rationale: String
  shelfId: ObjectId!
  updatedAt: DateTimeISO!
}

input ShelvingCreateInput {
  archivedAt: DateTimeISO
  bookId: ObjectId!
  position: Int!
  rationale: String
  shelfId: ObjectId!
}

input ShelvingUpdateInput {
  archivedAt: DateTimeISO
  bookId: ObjectId
  position: Int
  rationale: String
  shelfId: ObjectId
}

input ShelvingWhereInput {
  archivedAt: DateTimeISO
  bookId: ObjectId
  id: ObjectId
  position: Int
  rationale: String
  shelfId: ObjectId
}

input ShelvingWhereUniqueInput {
  id: ObjectId
}

type Task {
  _id: ObjectId!
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  dueDate: DateTimeISO
  habitId: ObjectId
  id: ObjectId!
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int!
  title: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input TaskCreateInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int!
  title: String!
  userId: ObjectId!
}

input TaskUpdateInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  userId: ObjectId
}

input TaskWhereInput {
  archivedAt: DateTimeISO
  completedAt: DateTimeISO
  description: String
  dueDate: DateTimeISO
  habitId: ObjectId
  id: ObjectId
  parentId: ObjectId
  plannedStartDate: DateTimeISO
  rank: Int
  title: String
  userId: ObjectId
}

input TaskWhereUniqueInput {
  id: ObjectId
}

type User {
  _id: ObjectId!
  accounts: [Account!]
  archivedAt: DateTimeISO
  calendarEvents: [CalendarEvent!]
  calendars: [Calendar!]
  createdAt: DateTimeISO!
  email: String!
  emailVerified: Boolean
  habits: [Habit!]
  id: ObjectId!
  image: String
  isAdmin: Boolean!
  lastLogin: DateTimeISO
  mantras: [Mantra!]
  name: String
  password: String
  settings: JSON!
  tasks: [Task!]
  updatedAt: DateTimeISO!
}

input UserCreateInput {
  archivedAt: DateTimeISO
  email: String!
  emailVerified: Boolean
  image: String
  isAdmin: Boolean!
  lastLogin: DateTimeISO
  name: String
  settings: JSON!
}

input UserUpdateInput {
  archivedAt: DateTimeISO
  email: String
  emailVerified: Boolean
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
}

input UserWhereInput {
  archivedAt: DateTimeISO
  email: String
  emailVerified: Boolean
  id: ObjectId
  image: String
  isAdmin: Boolean
  lastLogin: DateTimeISO
  name: String
  settings: JSON
}

input UserWhereUniqueInput {
  email: String
  id: ObjectId
}

type Value {
  _id: ObjectId!
  archivedAt: DateTimeISO
  createdAt: DateTimeISO!
  description: String
  id: ObjectId!
  name: String!
  updatedAt: DateTimeISO!
  userId: ObjectId!
}

input ValueCreateInput {
  archivedAt: DateTimeISO
  description: String
  name: String!
  userId: ObjectId!
}

input ValueUpdateInput {
  archivedAt: DateTimeISO
  description: String
  name: String
  userId: ObjectId
}

input ValueWhereInput {
  archivedAt: DateTimeISO
  description: String
  id: ObjectId
  name: String
  userId: ObjectId
}

input ValueWhereUniqueInput {
  id: ObjectId
}