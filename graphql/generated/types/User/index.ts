/* Do not edit this file. It was generated programmatically. */

import Account from "@/graphql/generated/types/Account";
import Calendar from "@/graphql/generated/types/Calendar";
import CalendarEvent from "@/graphql/generated/types/CalendarEvent";
import Goal from "@/graphql/generated/types/Goal";
import Habit from "@/graphql/generated/types/Habit";
import Mantra from "@/graphql/generated/types/Mantra";
import Notebook from "@/graphql/generated/types/Notebook";
import Task from "@/graphql/generated/types/Task";
import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import { DateTimeScalar, JSONResolver } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";
import { postSave, postUpdate, preSave } from "./hooks";

export type Settings = {
  colorMode?: string;
  defaultCalendarId?: string;
};

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<User>("save", preSave)
@post<User>("save", postSave)
@post<User>("findOneAndUpdate", postUpdate)
export default class User extends Model {
  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  name?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true, unique: true })
  email!: string;

  @TypeGraphQL.Field(() => Boolean, { nullable: true })
  @Property({ type: () => Boolean, required: false, default: null })
  emailVerified?: boolean | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  image?: string | null;

  @TypeGraphQL.Field(() => Boolean, { nullable: false })
  @Property({ type: () => Boolean, required: true, default: false })
  isAdmin!: boolean;

  @TypeGraphQL.Field(() => JSONResolver, { nullable: false })
  @Property({ required: true, default: {} })
  settings!: Settings;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  lastLogin?: Date | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, select: false, default: null })
  password?: string | null;

  @TypeGraphQL.Field(() => [Account], { nullable: true })
  @Property({ required: false, default: [] })
  accounts?: Account[] | null;

  @TypeGraphQL.Field(() => [Calendar], { nullable: true })
  @Property({ required: false, default: [] })
  calendars?: Calendar[] | null;

  @TypeGraphQL.Field(() => [CalendarEvent], { nullable: true })
  @Property({ required: false, default: [] })
  calendarEvents?: CalendarEvent[] | null;

  @TypeGraphQL.Field(() => [Goal], { nullable: true })
  @Property({ required: false, default: [] })
  goals?: Goal[] | null;

  @TypeGraphQL.Field(() => [Habit], { nullable: true })
  @Property({ required: false, default: [] })
  habits?: Habit[] | null;

  @TypeGraphQL.Field(() => [Mantra], { nullable: true })
  @Property({ required: false, default: [] })
  mantras?: Mantra[] | null;

  @TypeGraphQL.Field(() => [Notebook], { nullable: true })
  @Property({ required: false, default: [] })
  notebooks?: Notebook[] | null;

  @TypeGraphQL.Field(() => [Task], { nullable: true })
  @Property({ required: false, default: [] })
  tasks?: Task[] | null;
}
