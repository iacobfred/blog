/* Do not edit this file. It was generated programmatically. */

import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import { DateTimeScalar, Int, ObjectIdScalar } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";
import { postSave, postUpdate, preSave } from "./hooks";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Task>("save", preSave)
@post<Task>("save", postSave)
@post<Task>("findOneAndUpdate", postUpdate)
export default class Task extends Model {
  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  title!: string;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  description?: string | null;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  plannedStartDate?: Date | null;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  dueDate?: Date | null;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  @Property({ required: true })
  userId!: string;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  @Property({ required: false, default: null })
  parentId?: string | null;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  @Property({ required: false, default: null })
  habitId?: string | null;

  @TypeGraphQL.Field(() => Int, { nullable: false })
  @Property({ required: true })
  rank!: number;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  completedAt?: Date | null;
}
