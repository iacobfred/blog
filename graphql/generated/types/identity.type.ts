/* Do not edit this file. It was generated programmatically. */

import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import definition from "@/graphql/schema/definitions/Identity";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";
// import { IdentityFragment } from "@/graphql/generated/fragments/identity.fragment";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Identity>(
  "save",
  definition?.hooks?.save?.pre ??
    async function (next) {
      return next();
    }
)
@post<Identity>(
  "save",
  definition?.hooks?.save?.post ??
    (async (_instance) => {
      return;
    })
)
@post<Identity>("findOneAndUpdate", async function (result) {
  const rawResult = result as unknown as {
    value: typeof result;
    lastErrorObject: {
      updatedExisting: boolean;
    };
  };
  if (!rawResult.lastErrorObject || rawResult.lastErrorObject?.updatedExisting) return;
  definition?.hooks?.save?.post?.(rawResult.value);
})
export class Identity extends Model {
  // declare readonly __types__: {
  //   fragment: IdentityFragment;
  //   mutationResponses: {
  //     create: { createIdentity: IdentityFragment };
  //     update: { updateIdentity: IdentityFragment };
  //     upsert: { upsertIdentity: IdentityFragment };
  //     delete: { deleteIdentity: IdentityFragment };
  //   };
  // }
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  @Property({ required: true })
  userId!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  name!: string;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  description?: string | null;
}
