/* Do not edit this file. It was generated programmatically. */

import { useUser } from "@/components/contexts/UserContext";
import { IdentityCreationArgs, IdentityUpdateArgs } from "@/graphql/generated/args/identity.args";
import { IdentityFragment } from "@/graphql/generated/fragments/identity.fragment";
import {
  CREATE_IDENTITY,
  getOptimisticResponseForIdentityCreation,
  updateCacheAfterCreatingIdentity,
  UPDATE_IDENTITY,
} from "@/graphql/generated/mutations/identity.mutations";
import {
  identitiesReducer,
  IdentityData,
  identityReducer,
  initializeIdentityData,
} from "@/graphql/generated/reducers/identity.reducer";
import {
  identityCreationInputSchema,
  identityUpdateInputSchema,
} from "@/graphql/generated/schemas/identity.schemas";
import { useHandleMutation } from "@/utils/data/mutation";
import { ArrayAction, Payload } from "@/utils/data/reduction";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";

type IdentityCreationMutationHookOptions = MutationHookOptions<
  { createIdentity: IdentityFragment },
  IdentityCreationArgs
>;

export const useCreateIdentity = (options?: IdentityCreationMutationHookOptions) => {
  return useHandleMutation<{ createIdentity: IdentityFragment }, IdentityCreationArgs>(
    CREATE_IDENTITY,
    { ...updateCacheAfterCreatingIdentity, ...(options ?? {}) },
    identityCreationInputSchema,
    getOptimisticResponseForIdentityCreation
  );
};

type IdentityUpdateMutationHookOptions = MutationHookOptions<
  { updateIdentity: IdentityFragment },
  IdentityUpdateArgs
>;

export const useUpdateIdentity = (options?: IdentityUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateIdentity: IdentityFragment }, IdentityUpdateArgs>(
    UPDATE_IDENTITY,
    options,
    identityUpdateInputSchema
  );
};

export const useIdentityReducer = (
  data?: IdentityData
): [IdentityData, Dispatch<Payload<IdentityData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeIdentityData(starterData, user);
  const [identityData, dispatchIdentityData] = useReducer(
    identityReducer,
    initializedData,
    initializeIdentityData
  );
  useEffect(() => {
    if (user?.id && !identityData?.userId) {
      dispatchIdentityData({
        field: "init",
        value: initializeIdentityData(identityData, user),
      });
    }
  }, [user, identityData]);
  return [identityData, dispatchIdentityData];
};

export const useIdentitiesReducer = (
  data: IdentityFragment[]
): [IdentityFragment[], Dispatch<ArrayAction<IdentityFragment>>] => {
  return useReducer(identitiesReducer, data);
};
