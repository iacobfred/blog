/* Do not edit this file. It was generated programmatically. */

import { BeliefCreationArgs, BeliefUpdateArgs } from "@/graphql/generated/args/belief.args";
import { BeliefFragment } from "@/graphql/generated/fragments/belief.fragment";
import {
  CREATE_BELIEF,
  updateCacheAfterCreatingBelief,
  UPDATE_BELIEF,
} from "@/graphql/generated/mutations/belief.mutations";
import {
  BeliefData,
  beliefDataReducer,
  initializeBeliefData,
} from "@/graphql/generated/reducers/belief.reducer";
import { Payload, useHandleMutation } from "@/utils/data";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";
// import { useUser } from "@/components/contexts/UserContext";

type BeliefCreationMutationHookOptions = MutationHookOptions<
  { createBelief: BeliefFragment },
  BeliefCreationArgs
>;

export const useCreateBelief = (options?: BeliefCreationMutationHookOptions) => {
  return useHandleMutation<{ createBelief: BeliefFragment }, BeliefCreationArgs>(CREATE_BELIEF, {
    ...updateCacheAfterCreatingBelief,
    ...(options ?? {}),
  });
};

type BeliefUpdateMutationHookOptions = MutationHookOptions<
  { updateBelief: BeliefFragment },
  BeliefUpdateArgs
>;

export const useUpdateBelief = (options?: BeliefUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateBelief: BeliefFragment }, BeliefUpdateArgs>(
    UPDATE_BELIEF,
    options
  );
};

export const useBeliefDataReducer = (
  data: BeliefData
): [BeliefData, Dispatch<Payload<BeliefData>>] => {
  const initialData = initializeBeliefData(data);
  const [beliefData, dispatchBeliefData] = useReducer(
    beliefDataReducer,
    initialData,
    initializeBeliefData
  );
  useEffect(() => {
    if (data.userId && !beliefData?.userId) {
      console.log("Dispatching belief data!");
      dispatchBeliefData({ field: "init", value: data });
    }
  }, [data, beliefData]);
  return [beliefData, dispatchBeliefData];
};
