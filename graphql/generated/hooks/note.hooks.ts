/* Do not edit this file. It was generated programmatically. */

import { NoteCreationArgs, NoteUpdateArgs } from "@/graphql/generated/args/note.args";
import { NoteFragment } from "@/graphql/generated/fragments/note.fragment";
import {
  CREATE_NOTE,
  updateCacheAfterCreatingNote,
  UPDATE_NOTE,
} from "@/graphql/generated/mutations/note.mutations";
import {
  initializeNoteData,
  NoteData,
  noteDataReducer,
} from "@/graphql/generated/reducers/note.reducer";
import { Payload, useHandleMutation } from "@/utils/data";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";
// import { useUser } from "@/components/contexts/UserContext";

type NoteCreationMutationHookOptions = MutationHookOptions<
  { createNote: NoteFragment },
  NoteCreationArgs
>;

export const useCreateNote = (options?: NoteCreationMutationHookOptions) => {
  return useHandleMutation<{ createNote: NoteFragment }, NoteCreationArgs>(CREATE_NOTE, {
    ...updateCacheAfterCreatingNote,
    ...(options ?? {}),
  });
};

type NoteUpdateMutationHookOptions = MutationHookOptions<
  { updateNote: NoteFragment },
  NoteUpdateArgs
>;

export const useUpdateNote = (options?: NoteUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateNote: NoteFragment }, NoteUpdateArgs>(UPDATE_NOTE, options);
};

export const useNoteDataReducer = (data: NoteData): [NoteData, Dispatch<Payload<NoteData>>] => {
  const initialData = initializeNoteData(data);
  const [noteData, dispatchNoteData] = useReducer(noteDataReducer, initialData, initializeNoteData);
  useEffect(() => {
    if (data.userId && !noteData?.userId) {
      console.log("Dispatching note data!");
      dispatchNoteData({ field: "init", value: data });
    }
  }, [data, noteData]);
  return [noteData, dispatchNoteData];
};
