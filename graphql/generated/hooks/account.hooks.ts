/* Do not edit this file. It was generated programmatically. */

import { useUser } from "@/components/contexts/UserContext";
import { AccountCreationArgs, AccountUpdateArgs } from "@/graphql/generated/args/account.args";
import { AccountFragment } from "@/graphql/generated/fragments/account.fragment";
import {
  CREATE_ACCOUNT,
  updateCacheAfterCreatingAccount,
  UPDATE_ACCOUNT,
} from "@/graphql/generated/mutations/account.mutations";
import {
  AccountData,
  accountDataReducer,
  initializeAccountData,
} from "@/graphql/generated/reducers/account.reducer";
import { Payload, useHandleMutation } from "@/utils/data";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";

type AccountCreationMutationHookOptions = MutationHookOptions<
  { createAccount: AccountFragment },
  AccountCreationArgs
>;

export const useCreateAccount = (options?: AccountCreationMutationHookOptions) => {
  return useHandleMutation<{ createAccount: AccountFragment }, AccountCreationArgs>(
    CREATE_ACCOUNT,
    {
      ...updateCacheAfterCreatingAccount,
      ...(options ?? {}),
    }
  );
};

type AccountUpdateMutationHookOptions = MutationHookOptions<
  { updateAccount: AccountFragment },
  AccountUpdateArgs
>;

export const useUpdateAccount = (options?: AccountUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateAccount: AccountFragment }, AccountUpdateArgs>(
    UPDATE_ACCOUNT,
    options
  );
};

export const useAccountDataReducer = (
  data?: AccountData
): [AccountData, Dispatch<Payload<AccountData>>] => {
  const user = useUser();
  const initializedData = initializeAccountData(data ?? { userId: user?.id as string });
  const [accountData, dispatchAccountData] = useReducer(
    accountDataReducer,
    initializedData,
    initializeAccountData
  );
  useEffect(() => {
    if (user?.id && !accountData?.userId) {
      console.log("Dispatching account data!");
      dispatchAccountData({ field: "userId", value: user.id });
    }
  }, [user, accountData]);
  return [accountData, dispatchAccountData];
};
