/* Do not edit this file. It was generated programmatically. */

import { useUser } from "@/components/contexts/UserContext";
import { GoalCreationArgs, GoalUpdateArgs } from "@/graphql/generated/args/goal.args";
import { GoalFragment } from "@/graphql/generated/fragments/goal.fragment";
import {
  CREATE_GOAL,
  getOptimisticResponseForGoalCreation,
  updateCacheAfterCreatingGoal,
  UPDATE_GOAL,
} from "@/graphql/generated/mutations/goal.mutations";
import {
  GoalData,
  goalReducer,
  goalsReducer,
  initializeGoalData,
} from "@/graphql/generated/reducers/goal.reducer";
import {
  goalCreationInputSchema,
  goalUpdateInputSchema,
} from "@/graphql/generated/schemas/goal.schemas";
import { useHandleMutation } from "@/utils/data/mutation";
import { ArrayAction, Payload } from "@/utils/data/reduction";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";

type GoalCreationMutationHookOptions = MutationHookOptions<
  { createGoal: GoalFragment },
  GoalCreationArgs
>;

export const useCreateGoal = (options?: GoalCreationMutationHookOptions) => {
  return useHandleMutation<{ createGoal: GoalFragment }, GoalCreationArgs>(
    CREATE_GOAL,
    { ...updateCacheAfterCreatingGoal, ...(options ?? {}) },
    goalCreationInputSchema,
    getOptimisticResponseForGoalCreation
  );
};

type GoalUpdateMutationHookOptions = MutationHookOptions<
  { updateGoal: GoalFragment },
  GoalUpdateArgs
>;

export const useUpdateGoal = (options?: GoalUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateGoal: GoalFragment }, GoalUpdateArgs>(
    UPDATE_GOAL,
    options,
    goalUpdateInputSchema
  );
};

export const useGoalReducer = (data?: GoalData): [GoalData, Dispatch<Payload<GoalData>>] => {
  const { user } = useUser();
  const starterData = data ?? {};
  const initializedData = initializeGoalData(starterData, user);
  const [goalData, dispatchGoalData] = useReducer(goalReducer, initializedData, initializeGoalData);
  useEffect(() => {
    if (user?.id && !goalData?.userId) {
      dispatchGoalData({
        field: "init",
        value: initializeGoalData(goalData, user),
      });
    }
  }, [user, goalData]);
  return [goalData, dispatchGoalData];
};

export const useGoalsReducer = (
  data: GoalFragment[]
): [GoalFragment[], Dispatch<ArrayAction<GoalFragment>>] => {
  return useReducer(goalsReducer, data);
};
