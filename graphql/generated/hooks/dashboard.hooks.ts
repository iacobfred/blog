/* Do not edit this file. It was generated programmatically. */

import {
  DashboardCreationArgs,
  DashboardUpdateArgs,
} from "@/graphql/generated/args/dashboard.args";
import { DashboardFragment } from "@/graphql/generated/fragments/dashboard.fragment";
import {
  CREATE_DASHBOARD,
  updateCacheAfterCreatingDashboard,
  UPDATE_DASHBOARD,
} from "@/graphql/generated/mutations/dashboard.mutations";
import {
  DashboardData,
  dashboardDataReducer,
  initializeDashboardData,
} from "@/graphql/generated/reducers/dashboard.reducer";
import { Payload, useHandleMutation } from "@/utils/data";
import { MutationHookOptions } from "@apollo/client";
import { Dispatch, useEffect, useReducer } from "react";

type DashboardCreationMutationHookOptions = MutationHookOptions<
  { createDashboard: DashboardFragment },
  DashboardCreationArgs
>;

export const useCreateDashboard = (options?: DashboardCreationMutationHookOptions) => {
  return useHandleMutation<{ createDashboard: DashboardFragment }, DashboardCreationArgs>(
    CREATE_DASHBOARD,
    {
      ...updateCacheAfterCreatingDashboard,
      ...(options ?? {}),
    }
  );
};

type DashboardUpdateMutationHookOptions = MutationHookOptions<
  { updateDashboard: DashboardFragment },
  DashboardUpdateArgs
>;

export const useUpdateDashboard = (options?: DashboardUpdateMutationHookOptions) => {
  return useHandleMutation<{ updateDashboard: DashboardFragment }, DashboardUpdateArgs>(
    UPDATE_DASHBOARD,
    options
  );
};

export const useDashboardDataReducer = (
  data: DashboardData
): [DashboardData, Dispatch<Payload<DashboardData>>] => {
  const [dashboardData, dispatchDashboardData] = useReducer(
    dashboardDataReducer,
    initializeDashboardData(data),
    initializeDashboardData
  );
  useEffect(() => {
    console.log("useDashboardReducer:", data);
  }, [data]);
  return [dashboardData, dispatchDashboardData];
};
