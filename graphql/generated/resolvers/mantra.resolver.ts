/* Do not edit this file. It was generated programmatically. */

import { GqlContext } from "@/graphql/context";
import {
  ArgsForUpdatingManyMantras,
  DeleteMantraArgs,
  DeleteManyMantraArgs,
  FindManyMantraArgs,
  FindUniqueMantraArgs,
  MantraCreationArgs,
  MantrasCreationArgs,
  MantraUpdateArgs,
  MantraUpsertionArgs,
} from "@/graphql/generated/args/mantra.args";
import MantraModel, { Mantra } from "@/graphql/generated/models/mantra.model";
import UserModel from "@/graphql/generated/models/user.model";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Mantra)
export class MantraResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() mantra: Mantra) {
    return mantra._id;
  }

  @TypeGraphQL.Query(() => Mantra, { nullable: true })
  async mantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueMantraArgs
  ): Promise<Mantra | null> {
    const filter = convertFilterForMongo(args.where);
    return MantraModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [Mantra], { nullable: false })
  async mantras(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyMantraArgs
  ): Promise<Mantra[]> {
    const filter = convertFilterForMongo(args.where);
    return MantraModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Mantra)
  async createMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraCreationArgs
  ) {
    const mantra = await MantraModel.create(args.data);
    if (mantra) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: mantra.userId },
        { $push: { mantras: { ...mantra } } }
      );
    }
    return mantra;
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async createManyMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantrasCreationArgs
  ): Promise<Mantra[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Mantra)
  async updateMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const mantra = await MantraModel.findOneAndUpdate(filter, args.data, {
      returnDocument: "after",
    });
    // NOTE: This update fails if it's not awaited.
    mantra &&
      (await UserModel.findOneAndUpdate(
        { _id: mantra.userId, "mantras._id": mantra._id },
        {
          $set: { "mantras.$": { ...mantra } },
        }
      ));
    return mantra;
  }

  @TypeGraphQL.Mutation(() => Mantra)
  async upsertMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: MantraUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const mantra = await MantraModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return mantra;
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async updateMantras(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyMantras
  ): Promise<Mantra[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async updateMantrasDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyMantras
  ): Promise<Mantra[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Mantra, { nullable: true })
  async deleteMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteMantraArgs
  ): Promise<Mantra | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Mantra], { nullable: false })
  async deleteManyMantra(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyMantraArgs
  ): Promise<Mantra[]> {
    throw new Error("Not implemented");
  }
}
