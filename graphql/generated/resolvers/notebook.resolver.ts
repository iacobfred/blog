/* Do not edit this file. It was generated programmatically. */

import { GqlContext } from "@/graphql/context";
import {
  ArgsForUpdatingManyNotebooks,
  DeleteManyNotebookArgs,
  DeleteNotebookArgs,
  FindManyNotebookArgs,
  FindUniqueNotebookArgs,
  NotebookCreationArgs,
  NotebooksCreationArgs,
  NotebookUpdateArgs,
  NotebookUpsertionArgs,
} from "@/graphql/generated/args/notebook.args";
import NotebookModel from "@/graphql/generated/models/notebook.model";
import UserModel from "@/graphql/generated/models/user.model";
import { Notebook } from "@/graphql/generated/types/notebook.type";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Notebook)
export class NotebookResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() notebook: Notebook) {
    return notebook._id;
  }

  @TypeGraphQL.Query(() => Notebook, { nullable: true })
  async notebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueNotebookArgs
  ): Promise<Notebook | null> {
    const filter = convertFilterForMongo(args.where);
    return NotebookModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [Notebook], { nullable: false })
  async notebooks(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyNotebookArgs
  ): Promise<Notebook[]> {
    const filter = convertFilterForMongo(args.where);
    return NotebookModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Notebook)
  async createNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookCreationArgs
  ) {
    const notebook = await NotebookModel.create(args.data);
    if (notebook) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: notebook.userId },
        { $push: { notebooks: { ...notebook } } }
      );
    }
    return notebook;
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async createManyNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebooksCreationArgs
  ): Promise<Notebook[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Notebook)
  async updateNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const notebook = await NotebookModel.findOneAndUpdate(filter, args.data, {
      returnDocument: "after",
    });
    // NOTE: This update fails if it's not awaited.
    notebook &&
      (await UserModel.findOneAndUpdate(
        { _id: notebook.userId, "notebooks._id": notebook._id },
        {
          $set: { "notebooks.$": { ...notebook } },
        }
      ));
    return notebook;
  }

  @TypeGraphQL.Mutation(() => Notebook)
  async upsertNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: NotebookUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const notebook = await NotebookModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return notebook;
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async updateNotebooks(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotebooks
  ): Promise<Notebook[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async updateNotebooksDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyNotebooks
  ): Promise<Notebook[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Notebook, { nullable: true })
  async deleteNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteNotebookArgs
  ): Promise<Notebook | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Notebook], { nullable: false })
  async deleteManyNotebook(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyNotebookArgs
  ): Promise<Notebook[]> {
    throw new Error("Not implemented");
  }
}
