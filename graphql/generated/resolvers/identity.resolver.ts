/* Do not edit this file. It was generated programmatically. */

import { GqlContext } from "@/graphql/context";
import {
  ArgsForUpdatingManyIdentities,
  DeleteIdentityArgs,
  DeleteManyIdentityArgs,
  FindManyIdentityArgs,
  FindUniqueIdentityArgs,
  IdentitiesCreationArgs,
  IdentityCreationArgs,
  IdentityUpdateArgs,
  IdentityUpsertionArgs,
} from "@/graphql/generated/args/identity.args";
import IdentityModel, { Identity } from "@/graphql/generated/models/identity.model";
import UserModel from "@/graphql/generated/models/user.model";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => Identity)
export class IdentityResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() identity: Identity) {
    return identity._id;
  }

  @TypeGraphQL.Query(() => Identity, { nullable: true })
  async identity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueIdentityArgs
  ): Promise<Identity | null> {
    const filter = convertFilterForMongo(args.where);
    return IdentityModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [Identity], { nullable: false })
  async identities(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyIdentityArgs
  ): Promise<Identity[]> {
    const filter = convertFilterForMongo(args.where);
    return IdentityModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => Identity)
  async createIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityCreationArgs
  ) {
    const identity = await IdentityModel.create(args.data);
    if (identity) {
      // NOTE: This update fails if it's not awaited.
      await UserModel.findOneAndUpdate(
        { _id: identity.userId },
        { $push: { identities: { ...identity } } }
      );
    }
    return identity;
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async createManyIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentitiesCreationArgs
  ): Promise<Identity[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Identity)
  async updateIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityUpdateArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const identity = await IdentityModel.findOneAndUpdate(filter, args.data, {
      returnDocument: "after",
    });
    // NOTE: This update fails if it's not awaited.
    identity &&
      (await UserModel.findOneAndUpdate(
        { _id: identity.userId, "identities._id": identity._id },
        {
          $set: { "identities.$": { ...identity } },
        }
      ));
    return identity;
  }

  @TypeGraphQL.Mutation(() => Identity)
  async upsertIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: IdentityUpsertionArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const identity = await IdentityModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return identity;
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async updateIdentities(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyIdentities
  ): Promise<Identity[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async updateIdentitiesDistinctly(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: ArgsForUpdatingManyIdentities
  ): Promise<Identity[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => Identity, { nullable: true })
  async deleteIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteIdentityArgs
  ): Promise<Identity | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [Identity], { nullable: false })
  async deleteManyIdentity(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyIdentityArgs
  ): Promise<Identity[]> {
    throw new Error("Not implemented");
  }
}
