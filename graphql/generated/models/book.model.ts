/* Do not edit this file. It was generated programmatically. */

import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import definition from "@/graphql/schema/definitions/Book";
import { Int } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { getModelForClass, ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";
// import { BookFragment } from "@/graphql/generated/fragments/book.fragment";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Book>(
  "save",
  (definition?.hooks?.save?.pre as any) ??
    async function (next) {
      return next();
    }
)
@post<Book>(
  "save",
  definition?.hooks?.save?.post ??
    (async (_instance) => {
      return;
    })
)
export class Book extends Model {
  // declare readonly __types__: {
  //   fragment: BookFragment;
  //   mutationResponses: {
  //     create: { createBook: BookFragment };
  //     update: { updateBook: BookFragment };
  //     upsert: { upsertBook: BookFragment };
  //     delete: { deleteBook: BookFragment };
  //   };
  // }
  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  isbn?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  isbn13?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  title!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  slug!: string;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  description?: string | null;

  @TypeGraphQL.Field(() => [String], { nullable: false })
  @Property({ required: true })
  authorNames!: string[];

  @TypeGraphQL.Field(() => [String], { nullable: false })
  @Property({ required: true })
  authorNamesLf!: string[];

  @TypeGraphQL.Field(() => Int, { nullable: true })
  @Property({ required: false, default: null })
  publicationYear?: number | null;

  @TypeGraphQL.Field(() => Int, { nullable: true })
  @Property({ required: false, default: null })
  originalPublicationYear?: number | null;
}

const BookModel = getModelForClass<typeof Book>(Book);
export default BookModel;
