/* Do not edit this file. It was generated programmatically. */

import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import definition from "@/graphql/schema/definitions/Account";
import { DateTimeScalar, ObjectIdScalar } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { getModelForClass, ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";
// import { AccountFragment } from "@/graphql/generated/fragments/account.fragment";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Account>(
  "save",
  definition?.hooks?.save?.pre ??
    async function (next) {
      return next();
    }
)
@post<Account>(
  "save",
  definition?.hooks?.save?.post ??
    (async (_instance) => {
      return;
    })
)
@post<Account>("findOneAndUpdate", async function (result) {
  const rawResult = result as unknown as {
    value: typeof result;
    lastErrorObject: {
      updatedExisting: boolean;
    };
  };
  if (!rawResult.lastErrorObject || rawResult.lastErrorObject?.updatedExisting) return;
  definition?.hooks?.save?.post?.(rawResult.value);
})
export class Account extends Model {
  // declare readonly __types__: {
  //   fragment: AccountFragment;
  //   mutationResponses: {
  //     create: { createAccount: AccountFragment };
  //     update: { updateAccount: AccountFragment };
  //     upsert: { upsertAccount: AccountFragment };
  //     delete: { deleteAccount: AccountFragment };
  //   };
  // }
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  @Property({ required: true })
  userId!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true })
  provider!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true, unique: true })
  remoteId!: string;

  @TypeGraphQL.Field(() => [String], { nullable: false })
  @Property({ required: true })
  scopes!: string[];

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  accessToken?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  refreshToken?: string | null;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  accessTokenExpiry?: Date | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  syncToken?: string | null;
}

const AccountModel = getModelForClass<typeof Account>(Account);
export default AccountModel;
