/* Do not edit this file. It was generated programmatically. */

import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import definition from "@/graphql/schema/definitions/Shelving";
import * as Scalars from "@/graphql/schema/scalars";
import * as Types from "@/graphql/schema/types";
import { Model } from "@/graphql/schema/types";
import { getModelForClass, ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<Shelving>(
  "save",
  (definition?.hooks?.save?.pre as any) ??
    async function (next) {
      return next();
    }
)
@post<Shelving>(
  "save",
  definition?.hooks?.save?.post ??
    (async (_instance) => {
      return;
    })
)
export class Shelving extends Model {
  // declare readonly __types__: {
  //   fragment: ShelvingFragment;
  //   mutationResponses: {
  //     create: { createShelving: ShelvingFragment };
  //     update: { updateShelving: ShelvingFragment };
  //     upsert: { upsertShelving: ShelvingFragment };
  //     delete: { deleteShelving: ShelvingFragment };
  //   };
  // }
  @TypeGraphQL.Field(() => Scalars.ObjectId, { nullable: false })
  @Property({ required: true })
  bookId!: Types.ID;

  @TypeGraphQL.Field(() => Scalars.ObjectId, { nullable: false })
  @Property({ required: true })
  shelfId!: Types.ID;

  @TypeGraphQL.Field(() => Scalars.Int, { nullable: false })
  @Property({ required: true })
  position!: Types.Number;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  rationale?: Types.String | null;
}

const ShelvingModel = getModelForClass<typeof Shelving>(Shelving);
export default ShelvingModel;
