/* Do not edit this file. It was generated programmatically. */

// import { UserFragment } from "@/graphql/generated/fragments/user.fragment";
import { Account } from "@/graphql/generated/models/account.model";
import { Calendar } from "@/graphql/generated/models/calendar.model";
import { CalendarEvent } from "@/graphql/generated/models/calendarEvent.model";
import { Goal } from "@/graphql/generated/models/goal.model";
import { Habit } from "@/graphql/generated/models/habit.model";
import { Mantra } from "@/graphql/generated/models/mantra.model";
import { Notebook } from "@/graphql/generated/models/notebook.model";
import { Task } from "@/graphql/generated/models/task.model";
import { DEFAULT_MODEL_OPTIONS } from "@/graphql/schema/constants";
import definition from "@/graphql/schema/definitions/User";
import { DateTimeScalar, JSONResolver } from "@/graphql/schema/scalars";
import { Model } from "@/graphql/schema/types";
import { getModelForClass, ModelOptions, post, pre, prop as Property } from "@typegoose/typegoose";
import * as TypeGraphQL from "type-graphql-v2-fork";

export type Settings = {
  colorMode?: string;
  defaultCalendarId?: string;
};

@TypeGraphQL.ObjectType()
@ModelOptions(DEFAULT_MODEL_OPTIONS)
@pre<User>(
  "save",
  (definition?.hooks?.save?.pre as any) ??
    async function (next) {
      return next();
    }
)
@post<User>(
  "save",
  definition?.hooks?.save?.post ??
    (async (_instance) => {
      return;
    })
)
export class User extends Model {
  // declare readonly __types__: {
  //   fragment: UserFragment;
  //   mutationResponses: {
  //     create: { createUser: UserFragment };
  //     update: { updateUser: UserFragment };
  //     upsert: { upsertUser: UserFragment };
  //     delete: { deleteUser: UserFragment };
  //   };
  // }
  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  name?: string | null;

  @TypeGraphQL.Field(() => String, { nullable: false })
  @Property({ type: () => String, required: true, unique: true })
  email!: string;

  @TypeGraphQL.Field(() => Boolean, { nullable: true })
  @Property({ type: () => Boolean, required: false, default: null })
  emailVerified?: boolean | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, default: null })
  image?: string | null;

  @TypeGraphQL.Field(() => Boolean, { nullable: false })
  @Property({ type: () => Boolean, required: true, default: false })
  isAdmin!: boolean;

  @TypeGraphQL.Field(() => JSONResolver, { nullable: false })
  @Property({ required: true, default: {} })
  settings!: Settings;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  @Property({ required: false, default: null })
  lastLogin?: Date | null;

  @TypeGraphQL.Field(() => String, { nullable: true })
  @Property({ type: () => String, required: false, select: false, default: null })
  password?: string | null;

  @TypeGraphQL.Field(() => [Account], { nullable: true })
  @Property({ required: false, default: [] })
  accounts?: Account[] | null;

  @TypeGraphQL.Field(() => [Calendar], { nullable: true })
  @Property({ required: false, default: [] })
  calendars?: Calendar[] | null;

  @TypeGraphQL.Field(() => [CalendarEvent], { nullable: true })
  @Property({ required: false, default: [] })
  calendarEvents?: CalendarEvent[] | null;

  @TypeGraphQL.Field(() => [Goal], { nullable: true })
  @Property({ required: false, default: [] })
  goals?: Goal[] | null;

  @TypeGraphQL.Field(() => [Habit], { nullable: true })
  @Property({ required: false, default: [] })
  habits?: Habit[] | null;

  @TypeGraphQL.Field(() => [Mantra], { nullable: true })
  @Property({ required: false, default: [] })
  mantras?: Mantra[] | null;

  @TypeGraphQL.Field(() => [Notebook], { nullable: true })
  @Property({ required: false, default: [] })
  notebooks?: Notebook[] | null;

  @TypeGraphQL.Field(() => [Task], { nullable: true })
  @Property({ required: false, default: [] })
  tasks?: Task[] | null;
}

const UserModel = getModelForClass<typeof User>(User);
export default UserModel;
