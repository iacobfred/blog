/* Do not edit this file. It was generated programmatically. */
// import Belief from "@/graphql/generated/types/Belief";
import { BeliefFragment } from "@/graphql/generated/fragments/belief.fragment";
import { UserFragment } from "@/graphql/generated/fragments/user.fragment";
import { BeliefCreationInput } from "@/graphql/generated/inputs/belief.inputs";
import { ID } from "@/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@/utils/data/reduction";

export type BeliefData = Partial<BeliefCreationInput> & { id?: ID };
// export type BeliefData = InputData<Belief>;
// export type InitialBeliefData = InitialData<Belief, "rank" | "userId">;

export function initializeBeliefData(
  data: Partial<BeliefData>,
  user?: UserFragment | null | undefined
): Partial<BeliefData> {
  if (!user) return data;
  return {
    userId: user.id,
    name: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function beliefReducer(state: BeliefData, payload: Payload<BeliefData>) {
  if (payload.field === "init") return initializeBeliefData(payload.value as Partial<BeliefData>);
  return { ...state, [payload.field]: payload.value };
}

export function beliefsReducer(state: BeliefFragment[], action: ArrayAction<BeliefFragment>) {
  return arrayReducer<BeliefFragment>(state, action);
}
