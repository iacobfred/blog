/* Do not edit this file. It was generated programmatically. */
// import Notebook from "@/graphql/generated/types/Notebook";
import { NotebookFragment } from "@/graphql/generated/fragments/notebook.fragment";
import { UserFragment } from "@/graphql/generated/fragments/user.fragment";
import { NotebookCreationInput } from "@/graphql/generated/inputs/notebook.inputs";
import { ID } from "@/graphql/schema/types";
import { ArrayAction, arrayReducer, Payload } from "@/utils/data/reduction";

export type NotebookData = Partial<NotebookCreationInput> & { id?: ID };
// export type NotebookData = InputData<Notebook>;
// export type InitialNotebookData = InitialData<Notebook, "rank" | "userId">;

export function initializeNotebookData(
  data: Partial<NotebookData>,
  user?: UserFragment | null | undefined
): Partial<NotebookData> {
  if (!user) return data;
  return {
    userId: user.id,
    title: "",
    ...Object.fromEntries(Object.entries(data).filter(([, value]) => value !== undefined)), // TODO: make this unnecessary
  };
}

export function notebookReducer(state: NotebookData, payload: Payload<NotebookData>) {
  if (payload.field === "init")
    return initializeNotebookData(payload.value as Partial<NotebookData>);
  return { ...state, [payload.field]: payload.value };
}

export function notebooksReducer(state: NotebookFragment[], action: ArrayAction<NotebookFragment>) {
  return arrayReducer<NotebookFragment>(state, action);
}
