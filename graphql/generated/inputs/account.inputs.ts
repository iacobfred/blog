/* Do not edit this file. It was generated programmatically. */

import * as Scalars from "@/graphql/schema/scalars";
import * as Types from "@/graphql/schema/types";
import { ID, WhereInput, WhereUniqueInput } from "@/graphql/schema/types";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.InputType()
export class AccountCreationInput {
  @TypeGraphQL.Field(() => Scalars.ObjectId, { nullable: false })
  userId!: Types.ID;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: false })
  provider!: Types.String;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: false })
  remoteId!: Types.String;

  @TypeGraphQL.Field(() => Scalars.StringArray, { nullable: false })
  scopes!: Types.String[];

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  accessToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  refreshToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  accessTokenExpiry?: Types.DateTime | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  syncToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  archivedAt?: Types.DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class AccountUpdateInput {
  @TypeGraphQL.Field(() => Scalars.ObjectId, { nullable: true })
  userId?: Types.ID | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  provider?: Types.String | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  remoteId?: Types.String | undefined;

  @TypeGraphQL.Field(() => Scalars.StringArray, { nullable: true })
  scopes?: Types.String[] | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  accessToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  refreshToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  accessTokenExpiry?: Types.DateTime | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  syncToken?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  archivedAt?: Types.DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class AccountWhereInput extends WhereInput {
  @TypeGraphQL.Field(() => Scalars.ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @TypeGraphQL.Field(() => Scalars.ObjectId, { nullable: true })
  userId?: Types.ID | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  provider?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  remoteId?: Types.String | null | undefined;

  @TypeGraphQL.Field(() => Scalars.StringArray, { nullable: true })
  scopes?: Types.String[] | null | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  accessToken?: Types.String | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  refreshToken?: Types.String | undefined;

  @TypeGraphQL.Field(() => Scalars.DateTime, { nullable: true })
  accessTokenExpiry?: Types.DateTime | undefined;

  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  syncToken?: Types.String | undefined;
}

@TypeGraphQL.InputType()
export class AccountWhereUniqueInput extends WhereUniqueInput {
  @TypeGraphQL.Field(() => Scalars.String, { nullable: true })
  remoteId?: Types.String | null | undefined;
}
