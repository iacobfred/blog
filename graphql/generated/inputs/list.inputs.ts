/* Do not edit this file. It was generated programmatically. */

import { DateTimeScalar, JSONResolver, ObjectIdScalar } from "@/graphql/schema/scalars";
import { DateTime, ID, WhereInput, WhereUniqueInput } from "@/graphql/schema/types";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.InputType()
export class ListCreationInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  userId!: string;

  @TypeGraphQL.Field(() => String, { nullable: false })
  name!: string;

  @TypeGraphQL.Field(() => String, { nullable: true })
  description?: string | null | undefined;

  @TypeGraphQL.Field(() => JSONResolver, { nullable: false })
  fields!: Record<string, unknown>;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class ListUpdateInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  name?: string | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  description?: string | null | undefined;

  @TypeGraphQL.Field(() => JSONResolver, { nullable: true })
  fields?: Record<string, unknown> | undefined;

  @TypeGraphQL.Field(() => DateTimeScalar, { nullable: true })
  archivedAt?: DateTime | null | undefined;
}

@TypeGraphQL.InputType()
export class ListWhereInput extends WhereInput {
  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  id?: ID | undefined;

  @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: true })
  userId?: string | null | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  name?: string | null | undefined;

  @TypeGraphQL.Field(() => String, { nullable: true })
  description?: string | undefined;

  @TypeGraphQL.Field(() => JSONResolver, { nullable: true })
  fields?: Record<string, unknown> | null | undefined;
}

@TypeGraphQL.InputType()
export class ListWhereUniqueInput extends WhereUniqueInput {
  // @TypeGraphQL.Field(() => ObjectIdScalar, { nullable: false })
  // id!: ID;
}
