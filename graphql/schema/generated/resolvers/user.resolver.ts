/* Do not edit this file. It was generated programmatically. */

import { GqlContext } from "@/graphql/context";
import {
  CreateManyUserArgs,
  CreateUserArgs,
  DeleteManyUserArgs,
  DeleteUserArgs,
  FindManyUserArgs,
  FindUniqueUserArgs,
  UpdateManyUserArgs,
  UpdateUserArgs,
  UpsertUserArgs,
} from "@/graphql/schema/generated/args/user.args";
import UserModel, { User } from "@/graphql/schema/generated/models/user.model";
import { convertFilterForMongo } from "@/graphql/schema/helpers";
import { ObjectIdScalar } from "@/graphql/schema/scalars";
import { GraphQLResolveInfo } from "graphql";
import * as TypeGraphQL from "type-graphql-v2-fork";

@TypeGraphQL.Resolver(() => User)
export class UserResolver {
  @TypeGraphQL.FieldResolver(() => ObjectIdScalar)
  id(@TypeGraphQL.Root() user: User) {
    return user._id;
  }

  @TypeGraphQL.Query(() => User, { nullable: true })
  async user(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindUniqueUserArgs
  ): Promise<User | null> {
    const filter = convertFilterForMongo(args.where);
    return UserModel.findOne(filter);
  }

  @TypeGraphQL.Query(() => [User], { nullable: false })
  async users(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: FindManyUserArgs
  ): Promise<User[]> {
    const filter = convertFilterForMongo(args.where);
    return UserModel.find(filter ?? {});
  }

  @TypeGraphQL.Mutation(() => User)
  async createUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CreateUserArgs
  ) {
    const user = await UserModel.create(args.data);
    return user;
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async createManyUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: CreateManyUserArgs
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => User)
  async updateUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UpdateUserArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const user = await UserModel.findOneAndUpdate(filter, args.data, { returnDocument: "after" });
    return user;
  }

  @TypeGraphQL.Mutation(() => User)
  async upsertUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UpsertUserArgs
  ) {
    const filter = convertFilterForMongo(args.where);
    const user = await UserModel.findOneAndUpdate(filter, args.data, {
      upsert: true,
      new: true,
      returnDocument: "after",
    });
    return user;
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async updateManyUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: UpdateManyUserArgs
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => User, { nullable: true })
  async deleteUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteUserArgs
  ): Promise<User | null> {
    throw new Error("Not implemented");
  }

  @TypeGraphQL.Mutation(() => [User], { nullable: false })
  async deleteManyUser(
    @TypeGraphQL.Ctx() ctx: GqlContext,
    @TypeGraphQL.Info() info: GraphQLResolveInfo,
    @TypeGraphQL.Args() args: DeleteManyUserArgs
  ): Promise<User[]> {
    throw new Error("Not implemented");
  }
}
