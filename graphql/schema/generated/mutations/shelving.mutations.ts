/* Do not edit this file. It was generated programmatically. */

import { CreateShelvingArgs } from "@/graphql/schema/generated/args/shelving.args";
import {
  shelvingFragment,
  ShelvingFragment,
} from "@/graphql/schema/generated/fragments/shelving.fragment";
import {
  ShelvingCreateInput,
  ShelvingUpdateInput,
} from "@/graphql/schema/generated/inputs/shelving.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_SHELVING = gql`
  mutation CreateShelving($data: ShelvingCreateInput!) {
    createShelving(data: $data) {
      ...ShelvingFragment
    }
  }
  ${shelvingFragment}
`;

export const getOptimisticResponseForShelvingCreation = (data: ShelvingCreateInput) => {
  const now = new Date();
  return {
    createShelving: {
      __typename: "Shelving",
      id: "tmp-id",
      rationale: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingShelving: MutationHookOptions<
  { createShelving: ShelvingFragment },
  CreateShelvingArgs
> = {
  update(cache, { data }) {
    const { createShelving } = data || {};
    if (createShelving) {
      const newShelvingRef = cache.writeFragment({
        data: createShelving,
        fragment: gql`
          fragment NewShelving on Shelving {
            ...ShelvingFragment
          }
          ${shelvingFragment}
        `,
        fragmentName: "NewShelving",
      });
      cache.modify({
        fields: {
          shelvings(existingShelvings = []) {
            return [...existingShelvings, newShelvingRef];
          },
        },
      });
    }
  },
};

export const UPDATE_SHELVING = gql`
  mutation UpdateShelving($where: ShelvingWhereUniqueInput!, $data: ShelvingUpdateInput!) {
    updateShelving(where: $where, data: $data) {
      ...ShelvingFragment
    }
  }
  ${shelvingFragment}
`;

export const getOptimisticResponseForShelvingUpdate = (
  fragment: ShelvingFragment,
  data: ShelvingUpdateInput
) => {
  const now = new Date();
  return {
    updateShelving: {
      __typename: "Shelving",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_SHELVING = gql`
  mutation UpdateShelving($where: ShelvingWhereUniqueInput!, $data: ShelvingCreateInput!) {
    upsertShelving(where: $where, data: $data) {
      ...ShelvingFragment
    }
  }
  ${shelvingFragment}
`;
