/* Do not edit this file. It was generated programmatically. */

import { CreateTaskArgs } from "@/graphql/schema/generated/args/task.args";
import { taskFragment, TaskFragment } from "@/graphql/schema/generated/fragments/task.fragment";
import { TaskCreateInput, TaskUpdateInput } from "@/graphql/schema/generated/inputs/task.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_TASK = gql`
  mutation CreateTask($data: TaskCreateInput!) {
    createTask(data: $data) {
      ...TaskFragment
    }
  }
  ${taskFragment}
`;

export const getOptimisticResponseForTaskCreation = (data: TaskCreateInput) => {
  const now = new Date();
  return {
    createTask: {
      __typename: "Task",
      id: "tmp-id",
      description: null,
      plannedStartDate: null,
      dueDate: null,
      parentId: null,
      habitId: null,
      completedAt: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingTask: MutationHookOptions<
  { createTask: TaskFragment },
  CreateTaskArgs
> = {
  update(cache, { data }) {
    const { createTask } = data || {};
    if (createTask) {
      const newTaskRef = cache.writeFragment({
        data: createTask,
        fragment: gql`
          fragment NewTask on Task {
            ...TaskFragment
          }
          ${taskFragment}
        `,
        fragmentName: "NewTask",
      });
      cache.modify({
        id: `User:${createTask.userId}`,
        fields: {
          tasks(existingTaskRefs = []) {
            return [...existingTaskRefs, newTaskRef];
          },
        },
      });
      cache.modify({
        fields: {
          tasks(existingTasks = []) {
            return [...existingTasks, newTaskRef];
          },
        },
      });
    }
  },
};

export const UPDATE_TASK = gql`
  mutation UpdateTask($where: TaskWhereUniqueInput!, $data: TaskUpdateInput!) {
    updateTask(where: $where, data: $data) {
      ...TaskFragment
    }
  }
  ${taskFragment}
`;

export const getOptimisticResponseForTaskUpdate = (
  fragment: TaskFragment,
  data: TaskUpdateInput
) => {
  const now = new Date();
  return {
    updateTask: {
      __typename: "Task",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_TASK = gql`
  mutation UpdateTask($where: TaskWhereUniqueInput!, $data: TaskCreateInput!) {
    upsertTask(where: $where, data: $data) {
      ...TaskFragment
    }
  }
  ${taskFragment}
`;
