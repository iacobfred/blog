/* Do not edit this file. It was generated programmatically. */

import { CreateHabitArgs } from "@/graphql/schema/generated/args/habit.args";
import { habitFragment, HabitFragment } from "@/graphql/schema/generated/fragments/habit.fragment";
import { HabitCreateInput, HabitUpdateInput } from "@/graphql/schema/generated/inputs/habit.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_HABIT = gql`
  mutation CreateHabit($data: HabitCreateInput!) {
    createHabit(data: $data) {
      ...HabitFragment
    }
  }
  ${habitFragment}
`;

export const getOptimisticResponseForHabitCreation = (data: HabitCreateInput) => {
  const now = new Date();
  return {
    createHabit: {
      __typename: "Habit",
      id: "tmp-id",
      public: null,
      chronString: null,
      defaultDurationInMinutes: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingHabit: MutationHookOptions<
  { createHabit: HabitFragment },
  CreateHabitArgs
> = {
  update(cache, { data }) {
    const { createHabit } = data || {};
    if (createHabit) {
      const newHabitRef = cache.writeFragment({
        data: createHabit,
        fragment: gql`
          fragment NewHabit on Habit {
            ...HabitFragment
          }
          ${habitFragment}
        `,
        fragmentName: "NewHabit",
      });
      cache.modify({
        id: `User:${createHabit.userId}`,
        fields: {
          habits(existingHabitRefs = []) {
            return [...existingHabitRefs, newHabitRef];
          },
        },
      });
      cache.modify({
        fields: {
          habits(existingHabits = []) {
            return [...existingHabits, newHabitRef];
          },
        },
      });
    }
  },
};

export const UPDATE_HABIT = gql`
  mutation UpdateHabit($where: HabitWhereUniqueInput!, $data: HabitUpdateInput!) {
    updateHabit(where: $where, data: $data) {
      ...HabitFragment
    }
  }
  ${habitFragment}
`;

export const getOptimisticResponseForHabitUpdate = (
  fragment: HabitFragment,
  data: HabitUpdateInput
) => {
  const now = new Date();
  return {
    updateHabit: {
      __typename: "Habit",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_HABIT = gql`
  mutation UpdateHabit($where: HabitWhereUniqueInput!, $data: HabitCreateInput!) {
    upsertHabit(where: $where, data: $data) {
      ...HabitFragment
    }
  }
  ${habitFragment}
`;
