/* Do not edit this file. It was generated programmatically. */

import { CreateValueArgs } from "@/graphql/schema/generated/args/value.args";
import { valueFragment, ValueFragment } from "@/graphql/schema/generated/fragments/value.fragment";
import { ValueCreateInput, ValueUpdateInput } from "@/graphql/schema/generated/inputs/value.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_VALUE = gql`
  mutation CreateValue($data: ValueCreateInput!) {
    createValue(data: $data) {
      ...ValueFragment
    }
  }
  ${valueFragment}
`;

export const getOptimisticResponseForValueCreation = (data: ValueCreateInput) => {
  const now = new Date();
  return {
    createValue: {
      __typename: "Value",
      id: "tmp-id",
      description: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingValue: MutationHookOptions<
  { createValue: ValueFragment },
  CreateValueArgs
> = {
  update(cache, { data }) {
    const { createValue } = data || {};
    if (createValue) {
      const newValueRef = cache.writeFragment({
        data: createValue,
        fragment: gql`
          fragment NewValue on Value {
            ...ValueFragment
          }
          ${valueFragment}
        `,
        fragmentName: "NewValue",
      });
      cache.modify({
        id: `User:${createValue.userId}`,
        fields: {
          values(existingValueRefs = []) {
            return [...existingValueRefs, newValueRef];
          },
        },
      });
      cache.modify({
        fields: {
          values(existingValues = []) {
            return [...existingValues, newValueRef];
          },
        },
      });
    }
  },
};

export const UPDATE_VALUE = gql`
  mutation UpdateValue($where: ValueWhereUniqueInput!, $data: ValueUpdateInput!) {
    updateValue(where: $where, data: $data) {
      ...ValueFragment
    }
  }
  ${valueFragment}
`;

export const getOptimisticResponseForValueUpdate = (
  fragment: ValueFragment,
  data: ValueUpdateInput
) => {
  const now = new Date();
  return {
    updateValue: {
      __typename: "Value",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_VALUE = gql`
  mutation UpdateValue($where: ValueWhereUniqueInput!, $data: ValueCreateInput!) {
    upsertValue(where: $where, data: $data) {
      ...ValueFragment
    }
  }
  ${valueFragment}
`;
