/* Do not edit this file. It was generated programmatically. */

import { CalendarCreationArgs } from "@/graphql/schema/generated/args/calendar.args";
import {
  calendarFragment,
  CalendarFragment,
} from "@/graphql/schema/generated/fragments/calendar.fragment";
import {
  CalendarCreationInput,
  CalendarUpdateInput,
} from "@/graphql/schema/generated/inputs/calendar.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_CALENDAR = gql`
  mutation CreateCalendar($data: CalendarCreationInput!) {
    createCalendar(data: $data) {
      ...CalendarFragment
    }
  }
  ${calendarFragment}
`;

export const getOptimisticResponseForCalendarCreation = (
  data: CalendarCreationInput
): { createCalendar: CalendarFragment } => {
  const now = new Date();
  return {
    createCalendar: {
      __typename: "Calendar",
      id: "tmp-id",
      color: null,
      provider: null,
      remoteId: null,
      syncToken: null,
      accountId: null,
      primary: null,
      public: null,
      enabled: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingCalendar: MutationHookOptions<
  { createCalendar: CalendarFragment },
  CalendarCreationArgs
> = {
  update(cache, { data }) {
    const { createCalendar } = data || {};
    if (createCalendar) {
      const newCalendarRef = cache.writeFragment({
        data: createCalendar,
        fragment: gql`
          fragment NewCalendar on Calendar {
            ...CalendarFragment
          }
          ${calendarFragment}
        `,
        fragmentName: "NewCalendar",
      });
      cache.modify({
        id: `User:${createCalendar.userId}`,
        fields: {
          calendars(existingCalendarRefs = []) {
            return [...existingCalendarRefs, newCalendarRef];
          },
        },
      });
      cache.modify({
        fields: {
          calendars(existingCalendars = []) {
            return [...existingCalendars, newCalendarRef];
          },
        },
      });
    }
  },
};

export const UPDATE_CALENDAR = gql`
  mutation UpdateCalendar($where: CalendarWhereUniqueInput!, $data: CalendarUpdateInput!) {
    updateCalendar(where: $where, data: $data) {
      ...CalendarFragment
    }
  }
  ${calendarFragment}
`;

export const getOptimisticResponseForCalendarUpdate = (
  fragment: CalendarFragment,
  data: CalendarUpdateInput
) => {
  const now = new Date();
  return {
    updateCalendar: {
      __typename: "Calendar",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_CALENDAR = gql`
  mutation UpdateCalendar($where: CalendarWhereUniqueInput!, $data: CalendarCreationInput!) {
    upsertCalendar(where: $where, data: $data) {
      ...CalendarFragment
    }
  }
  ${calendarFragment}
`;

export const UPDATE_CALENDARS = gql`
  mutation UpdateCalendars($where: CalendarWhereInput!, $data: CalendarUpdateInput!) {
    updateCalendars(where: $where, data: $data) {
      ...CalendarFragment
    }
  }
  ${calendarFragment}
`;

export const UPDATE_CALENDARS_DISTINCTLY = gql`
  mutation UpdateCalendarsDistinctly($data: [CalendarUpdateInput!]!) {
    updateCalendarsDistinctly(data: $data) {
      ...CalendarFragment
    }
  }
  ${calendarFragment}
`;
