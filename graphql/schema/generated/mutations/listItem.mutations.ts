/* Do not edit this file. It was generated programmatically. */

import { CreateListItemArgs } from "@/graphql/schema/generated/args/listItem.args";
import {
  listItemFragment,
  ListItemFragment,
} from "@/graphql/schema/generated/fragments/listItem.fragment";
import {
  ListItemCreateInput,
  ListItemUpdateInput,
} from "@/graphql/schema/generated/inputs/listItem.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_LIST_ITEM = gql`
  mutation CreateListItem($data: ListItemCreateInput!) {
    createListItem(data: $data) {
      ...ListItemFragment
    }
  }
  ${listItemFragment}
`;

export const getOptimisticResponseForListItemCreation = (data: ListItemCreateInput) => {
  const now = new Date();
  return {
    createListItem: {
      __typename: "ListItem",
      id: "tmp-id",
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingListItem: MutationHookOptions<
  { createListItem: ListItemFragment },
  CreateListItemArgs
> = {
  update(cache, { data }) {
    const { createListItem } = data || {};
    if (createListItem) {
      const newListItemRef = cache.writeFragment({
        data: createListItem,
        fragment: gql`
          fragment NewListItem on ListItem {
            ...ListItemFragment
          }
          ${listItemFragment}
        `,
        fragmentName: "NewListItem",
      });
      cache.modify({
        id: `User:${createListItem.userId}`,
        fields: {
          listItems(existingListItemRefs = []) {
            return [...existingListItemRefs, newListItemRef];
          },
        },
      });
      cache.modify({
        fields: {
          listItems(existingListItems = []) {
            return [...existingListItems, newListItemRef];
          },
        },
      });
    }
  },
};

export const UPDATE_LIST_ITEM = gql`
  mutation UpdateListItem($where: ListItemWhereUniqueInput!, $data: ListItemUpdateInput!) {
    updateListItem(where: $where, data: $data) {
      ...ListItemFragment
    }
  }
  ${listItemFragment}
`;

export const getOptimisticResponseForListItemUpdate = (
  fragment: ListItemFragment,
  data: ListItemUpdateInput
) => {
  const now = new Date();
  return {
    updateListItem: {
      __typename: "ListItem",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_LIST_ITEM = gql`
  mutation UpdateListItem($where: ListItemWhereUniqueInput!, $data: ListItemCreateInput!) {
    upsertListItem(where: $where, data: $data) {
      ...ListItemFragment
    }
  }
  ${listItemFragment}
`;
