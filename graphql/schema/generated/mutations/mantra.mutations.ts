/* Do not edit this file. It was generated programmatically. */

import { CreateMantraArgs } from "@/graphql/schema/generated/args/mantra.args";
import {
  mantraFragment,
  MantraFragment,
} from "@/graphql/schema/generated/fragments/mantra.fragment";
import {
  MantraCreateInput,
  MantraUpdateInput,
} from "@/graphql/schema/generated/inputs/mantra.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_MANTRA = gql`
  mutation CreateMantra($data: MantraCreateInput!) {
    createMantra(data: $data) {
      ...MantraFragment
    }
  }
  ${mantraFragment}
`;

export const getOptimisticResponseForMantraCreation = (data: MantraCreateInput) => {
  const now = new Date();
  return {
    createMantra: {
      __typename: "Mantra",
      id: "tmp-id",
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingMantra: MutationHookOptions<
  { createMantra: MantraFragment },
  CreateMantraArgs
> = {
  update(cache, { data }) {
    const { createMantra } = data || {};
    if (createMantra) {
      const newMantraRef = cache.writeFragment({
        data: createMantra,
        fragment: gql`
          fragment NewMantra on Mantra {
            ...MantraFragment
          }
          ${mantraFragment}
        `,
        fragmentName: "NewMantra",
      });
      cache.modify({
        id: `User:${createMantra.userId}`,
        fields: {
          mantras(existingMantraRefs = []) {
            return [...existingMantraRefs, newMantraRef];
          },
        },
      });
      cache.modify({
        fields: {
          mantras(existingMantras = []) {
            return [...existingMantras, newMantraRef];
          },
        },
      });
    }
  },
};

export const UPDATE_MANTRA = gql`
  mutation UpdateMantra($where: MantraWhereUniqueInput!, $data: MantraUpdateInput!) {
    updateMantra(where: $where, data: $data) {
      ...MantraFragment
    }
  }
  ${mantraFragment}
`;

export const getOptimisticResponseForMantraUpdate = (
  fragment: MantraFragment,
  data: MantraUpdateInput
) => {
  const now = new Date();
  return {
    updateMantra: {
      __typename: "Mantra",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_MANTRA = gql`
  mutation UpdateMantra($where: MantraWhereUniqueInput!, $data: MantraCreateInput!) {
    upsertMantra(where: $where, data: $data) {
      ...MantraFragment
    }
  }
  ${mantraFragment}
`;
