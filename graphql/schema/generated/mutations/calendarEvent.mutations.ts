/* Do not edit this file. It was generated programmatically. */

import { CreateCalendarEventArgs } from "@/graphql/schema/generated/args/calendarEvent.args";
import {
  calendarEventFragment,
  CalendarEventFragment,
} from "@/graphql/schema/generated/fragments/calendarEvent.fragment";
import {
  CalendarEventCreateInput,
  CalendarEventUpdateInput,
} from "@/graphql/schema/generated/inputs/calendarEvent.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_CALENDAR_EVENT = gql`
  mutation CreateCalendarEvent($data: CalendarEventCreateInput!) {
    createCalendarEvent(data: $data) {
      ...CalendarEventFragment
    }
  }
  ${calendarEventFragment}
`;

export const getOptimisticResponseForCalendarEventCreation = (data: CalendarEventCreateInput) => {
  const now = new Date();
  return {
    createCalendarEvent: {
      __typename: "CalendarEvent",
      id: "tmp-id",
      remoteId: null,
      scheduleId: null,
      habitId: null,
      taskId: null,
      end: null,
      notes: null,
      canceled: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingCalendarEvent: MutationHookOptions<
  { createCalendarEvent: CalendarEventFragment },
  CreateCalendarEventArgs
> = {
  update(cache, { data }) {
    const { createCalendarEvent } = data || {};
    if (createCalendarEvent) {
      const newCalendarEventRef = cache.writeFragment({
        data: createCalendarEvent,
        fragment: gql`
          fragment NewCalendarEvent on CalendarEvent {
            ...CalendarEventFragment
          }
          ${calendarEventFragment}
        `,
        fragmentName: "NewCalendarEvent",
      });
      cache.modify({
        id: `User:${createCalendarEvent.userId}`,
        fields: {
          calendarEvents(existingCalendarEventRefs = []) {
            return [...existingCalendarEventRefs, newCalendarEventRef];
          },
        },
      });
      cache.modify({
        fields: {
          calendarEvents(existingCalendarEvents = []) {
            return [...existingCalendarEvents, newCalendarEventRef];
          },
        },
      });
    }
  },
};

export const UPDATE_CALENDAR_EVENT = gql`
  mutation UpdateCalendarEvent(
    $where: CalendarEventWhereUniqueInput!
    $data: CalendarEventUpdateInput!
  ) {
    updateCalendarEvent(where: $where, data: $data) {
      ...CalendarEventFragment
    }
  }
  ${calendarEventFragment}
`;

export const getOptimisticResponseForCalendarEventUpdate = (
  fragment: CalendarEventFragment,
  data: CalendarEventUpdateInput
) => {
  const now = new Date();
  return {
    updateCalendarEvent: {
      __typename: "CalendarEvent",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_CALENDAR_EVENT = gql`
  mutation UpdateCalendarEvent(
    $where: CalendarEventWhereUniqueInput!
    $data: CalendarEventCreateInput!
  ) {
    upsertCalendarEvent(where: $where, data: $data) {
      ...CalendarEventFragment
    }
  }
  ${calendarEventFragment}
`;
