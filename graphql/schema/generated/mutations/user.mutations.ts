/* Do not edit this file. It was generated programmatically. */

import { UserCreationArgs } from "@/graphql/schema/generated/args/user.args";
import { userFragment, UserFragment } from "@/graphql/schema/generated/fragments/user.fragment";
import { UserCreationInput, UserUpdateInput } from "@/graphql/schema/generated/inputs/user.inputs";
import { gql, MutationHookOptions } from "@apollo/client";

export const CREATE_USER = gql`
  mutation CreateUser($data: UserCreationInput!) {
    createUser(data: $data) {
      ...UserFragment
    }
  }
  ${userFragment}
`;

export const getOptimisticResponseForUserCreation = (
  data: UserCreationInput
): { createUser: UserFragment } => {
  const now = new Date();
  return {
    createUser: {
      __typename: "User",
      id: "tmp-id",
      name: null,
      emailVerified: null,
      image: null,
      lastLogin: null,
      accounts: null,
      calendars: null,
      calendarEvents: null,
      goals: null,
      habits: null,
      mantras: null,
      notebooks: null,
      tasks: null,
      archivedAt: null,
      ...data,
      createdAt: now,
      updatedAt: now,
    },
  };
};

export const updateCacheAfterCreatingUser: MutationHookOptions<
  { createUser: UserFragment },
  UserCreationArgs
> = {
  update(cache, { data }) {
    const { createUser } = data || {};
    if (createUser) {
      const newUserRef = cache.writeFragment({
        data: createUser,
        fragment: gql`
          fragment NewUser on User {
            ...UserFragment
          }
          ${userFragment}
        `,
        fragmentName: "NewUser",
      });
      cache.modify({
        fields: {
          users(existingUsers = []) {
            return [...existingUsers, newUserRef];
          },
        },
      });
    }
  },
};

export const UPDATE_USER = gql`
  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {
    updateUser(where: $where, data: $data) {
      ...UserFragment
    }
  }
  ${userFragment}
`;

export const getOptimisticResponseForUserUpdate = (
  fragment: UserFragment,
  data: UserUpdateInput
) => {
  const now = new Date();
  return {
    updateUser: {
      __typename: "User",
      ...fragment,
      ...data,
      updatedAt: now,
    },
  };
};

export const UPSERT_USER = gql`
  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserCreationInput!) {
    upsertUser(where: $where, data: $data) {
      ...UserFragment
    }
  }
  ${userFragment}
`;

export const UPDATE_USERS = gql`
  mutation UpdateUsers($where: UserWhereInput!, $data: UserUpdateInput!) {
    updateUsers(where: $where, data: $data) {
      ...UserFragment
    }
  }
  ${userFragment}
`;

export const UPDATE_USERS_DISTINCTLY = gql`
  mutation UpdateUsersDistinctly($data: [UserUpdateInput!]!) {
    updateUsersDistinctly(data: $data) {
      ...UserFragment
    }
  }
  ${userFragment}
`;
