import * as tslib from "tslib";
import { ClassType } from "type-graphql";
import * as models from "./models";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as inputTypes from "./resolvers/inputs";
import * as outputTypes from "./resolvers/outputs";
import * as relationResolvers from "./resolvers/relations/resolvers.index";

const crudResolversMap = {
  Redirect: crudResolvers.RedirectCrudResolver,
  Account: crudResolvers.AccountCrudResolver,
  User: crudResolvers.UserCrudResolver,
  Dashboard: crudResolvers.DashboardCrudResolver,
  Calendar: crudResolvers.CalendarCrudResolver,
  CalendarEvent: crudResolvers.CalendarEventCrudResolver,
  ScheduleTemplate: crudResolvers.ScheduleTemplateCrudResolver,
  Category: crudResolvers.CategoryCrudResolver,
  Categorization: crudResolvers.CategorizationCrudResolver,
  Act: crudResolvers.ActCrudResolver,
  MetricApplication: crudResolvers.MetricApplicationCrudResolver,
  MetricUsage: crudResolvers.MetricUsageCrudResolver,
  Metric: crudResolvers.MetricCrudResolver,
  Habit: crudResolvers.HabitCrudResolver,
  RoutineHabit: crudResolvers.RoutineHabitCrudResolver,
  Routine: crudResolvers.RoutineCrudResolver,
  MetricRecord: crudResolvers.MetricRecordCrudResolver,
  Task: crudResolvers.TaskCrudResolver,
  Action: crudResolvers.ActionCrudResolver,
  ActionSchedule: crudResolvers.ActionScheduleCrudResolver,
  ActionScheduleTemplate: crudResolvers.ActionScheduleTemplateCrudResolver,
  Identity: crudResolvers.IdentityCrudResolver,
  Goal: crudResolvers.GoalCrudResolver,
  IdentityActRelation: crudResolvers.IdentityActRelationCrudResolver,
  Belief: crudResolvers.BeliefCrudResolver,
  Value: crudResolvers.ValueCrudResolver,
  Mantra: crudResolvers.MantraCrudResolver,
  NotebookUserPermission: crudResolvers.NotebookUserPermissionCrudResolver,
  Notebook: crudResolvers.NotebookCrudResolver,
  Note: crudResolvers.NoteCrudResolver,
  List: crudResolvers.ListCrudResolver,
  Item: crudResolvers.ItemCrudResolver,
  Author: crudResolvers.AuthorCrudResolver,
  Authorship: crudResolvers.AuthorshipCrudResolver,
  Book: crudResolvers.BookCrudResolver,
  Reading: crudResolvers.ReadingCrudResolver,
  Bookshelf: crudResolvers.BookshelfCrudResolver,
  Shelving: crudResolvers.ShelvingCrudResolver,
  BookReview: crudResolvers.BookReviewCrudResolver,
};
const actionResolversMap = {
  Redirect: {
    redirect: actionResolvers.FindUniqueRedirectResolver,
    findFirstRedirect: actionResolvers.FindFirstRedirectResolver,
    redirects: actionResolvers.FindManyRedirectResolver,
    createRedirect: actionResolvers.CreateRedirectResolver,
    createManyRedirect: actionResolvers.CreateManyRedirectResolver,
    deleteRedirect: actionResolvers.DeleteRedirectResolver,
    updateRedirect: actionResolvers.UpdateRedirectResolver,
    deleteManyRedirect: actionResolvers.DeleteManyRedirectResolver,
    updateManyRedirect: actionResolvers.UpdateManyRedirectResolver,
    upsertRedirect: actionResolvers.UpsertRedirectResolver,
    aggregateRedirect: actionResolvers.AggregateRedirectResolver,
    groupByRedirect: actionResolvers.GroupByRedirectResolver,
  },
  Account: {
    account: actionResolvers.FindUniqueAccountResolver,
    findFirstAccount: actionResolvers.FindFirstAccountResolver,
    accounts: actionResolvers.FindManyAccountResolver,
    createAccount: actionResolvers.CreateAccountResolver,
    createManyAccount: actionResolvers.CreateManyAccountResolver,
    deleteAccount: actionResolvers.DeleteAccountResolver,
    updateAccount: actionResolvers.UpdateAccountResolver,
    deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
    updateManyAccount: actionResolvers.UpdateManyAccountResolver,
    upsertAccount: actionResolvers.UpsertAccountResolver,
    aggregateAccount: actionResolvers.AggregateAccountResolver,
    groupByAccount: actionResolvers.GroupByAccountResolver,
  },
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
  },
  Dashboard: {
    dashboard: actionResolvers.FindUniqueDashboardResolver,
    findFirstDashboard: actionResolvers.FindFirstDashboardResolver,
    dashboards: actionResolvers.FindManyDashboardResolver,
    createDashboard: actionResolvers.CreateDashboardResolver,
    createManyDashboard: actionResolvers.CreateManyDashboardResolver,
    deleteDashboard: actionResolvers.DeleteDashboardResolver,
    updateDashboard: actionResolvers.UpdateDashboardResolver,
    deleteManyDashboard: actionResolvers.DeleteManyDashboardResolver,
    updateManyDashboard: actionResolvers.UpdateManyDashboardResolver,
    upsertDashboard: actionResolvers.UpsertDashboardResolver,
    aggregateDashboard: actionResolvers.AggregateDashboardResolver,
    groupByDashboard: actionResolvers.GroupByDashboardResolver,
  },
  Calendar: {
    calendar: actionResolvers.FindUniqueCalendarResolver,
    findFirstCalendar: actionResolvers.FindFirstCalendarResolver,
    calendars: actionResolvers.FindManyCalendarResolver,
    createCalendar: actionResolvers.CreateCalendarResolver,
    createManyCalendar: actionResolvers.CreateManyCalendarResolver,
    deleteCalendar: actionResolvers.DeleteCalendarResolver,
    updateCalendar: actionResolvers.UpdateCalendarResolver,
    deleteManyCalendar: actionResolvers.DeleteManyCalendarResolver,
    updateManyCalendar: actionResolvers.UpdateManyCalendarResolver,
    upsertCalendar: actionResolvers.UpsertCalendarResolver,
    aggregateCalendar: actionResolvers.AggregateCalendarResolver,
    groupByCalendar: actionResolvers.GroupByCalendarResolver,
  },
  CalendarEvent: {
    calendarEvent: actionResolvers.FindUniqueCalendarEventResolver,
    findFirstCalendarEvent: actionResolvers.FindFirstCalendarEventResolver,
    calendarEvents: actionResolvers.FindManyCalendarEventResolver,
    createCalendarEvent: actionResolvers.CreateCalendarEventResolver,
    createManyCalendarEvent: actionResolvers.CreateManyCalendarEventResolver,
    deleteCalendarEvent: actionResolvers.DeleteCalendarEventResolver,
    updateCalendarEvent: actionResolvers.UpdateCalendarEventResolver,
    deleteManyCalendarEvent: actionResolvers.DeleteManyCalendarEventResolver,
    updateManyCalendarEvent: actionResolvers.UpdateManyCalendarEventResolver,
    upsertCalendarEvent: actionResolvers.UpsertCalendarEventResolver,
    aggregateCalendarEvent: actionResolvers.AggregateCalendarEventResolver,
    groupByCalendarEvent: actionResolvers.GroupByCalendarEventResolver,
  },
  ScheduleTemplate: {
    scheduleTemplate: actionResolvers.FindUniqueScheduleTemplateResolver,
    findFirstScheduleTemplate: actionResolvers.FindFirstScheduleTemplateResolver,
    scheduleTemplates: actionResolvers.FindManyScheduleTemplateResolver,
    createScheduleTemplate: actionResolvers.CreateScheduleTemplateResolver,
    createManyScheduleTemplate: actionResolvers.CreateManyScheduleTemplateResolver,
    deleteScheduleTemplate: actionResolvers.DeleteScheduleTemplateResolver,
    updateScheduleTemplate: actionResolvers.UpdateScheduleTemplateResolver,
    deleteManyScheduleTemplate: actionResolvers.DeleteManyScheduleTemplateResolver,
    updateManyScheduleTemplate: actionResolvers.UpdateManyScheduleTemplateResolver,
    upsertScheduleTemplate: actionResolvers.UpsertScheduleTemplateResolver,
    aggregateScheduleTemplate: actionResolvers.AggregateScheduleTemplateResolver,
    groupByScheduleTemplate: actionResolvers.GroupByScheduleTemplateResolver,
  },
  Category: {
    category: actionResolvers.FindUniqueCategoryResolver,
    findFirstCategory: actionResolvers.FindFirstCategoryResolver,
    categories: actionResolvers.FindManyCategoryResolver,
    createCategory: actionResolvers.CreateCategoryResolver,
    createManyCategory: actionResolvers.CreateManyCategoryResolver,
    deleteCategory: actionResolvers.DeleteCategoryResolver,
    updateCategory: actionResolvers.UpdateCategoryResolver,
    deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
    updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
    upsertCategory: actionResolvers.UpsertCategoryResolver,
    aggregateCategory: actionResolvers.AggregateCategoryResolver,
    groupByCategory: actionResolvers.GroupByCategoryResolver,
  },
  Categorization: {
    categorization: actionResolvers.FindUniqueCategorizationResolver,
    findFirstCategorization: actionResolvers.FindFirstCategorizationResolver,
    categorizations: actionResolvers.FindManyCategorizationResolver,
    createCategorization: actionResolvers.CreateCategorizationResolver,
    createManyCategorization: actionResolvers.CreateManyCategorizationResolver,
    deleteCategorization: actionResolvers.DeleteCategorizationResolver,
    updateCategorization: actionResolvers.UpdateCategorizationResolver,
    deleteManyCategorization: actionResolvers.DeleteManyCategorizationResolver,
    updateManyCategorization: actionResolvers.UpdateManyCategorizationResolver,
    upsertCategorization: actionResolvers.UpsertCategorizationResolver,
    aggregateCategorization: actionResolvers.AggregateCategorizationResolver,
    groupByCategorization: actionResolvers.GroupByCategorizationResolver,
  },
  Act: {
    act: actionResolvers.FindUniqueActResolver,
    findFirstAct: actionResolvers.FindFirstActResolver,
    acts: actionResolvers.FindManyActResolver,
    createAct: actionResolvers.CreateActResolver,
    createManyAct: actionResolvers.CreateManyActResolver,
    deleteAct: actionResolvers.DeleteActResolver,
    updateAct: actionResolvers.UpdateActResolver,
    deleteManyAct: actionResolvers.DeleteManyActResolver,
    updateManyAct: actionResolvers.UpdateManyActResolver,
    upsertAct: actionResolvers.UpsertActResolver,
    aggregateAct: actionResolvers.AggregateActResolver,
    groupByAct: actionResolvers.GroupByActResolver,
  },
  MetricApplication: {
    metricApplication: actionResolvers.FindUniqueMetricApplicationResolver,
    findFirstMetricApplication: actionResolvers.FindFirstMetricApplicationResolver,
    metricApplications: actionResolvers.FindManyMetricApplicationResolver,
    createMetricApplication: actionResolvers.CreateMetricApplicationResolver,
    createManyMetricApplication: actionResolvers.CreateManyMetricApplicationResolver,
    deleteMetricApplication: actionResolvers.DeleteMetricApplicationResolver,
    updateMetricApplication: actionResolvers.UpdateMetricApplicationResolver,
    deleteManyMetricApplication: actionResolvers.DeleteManyMetricApplicationResolver,
    updateManyMetricApplication: actionResolvers.UpdateManyMetricApplicationResolver,
    upsertMetricApplication: actionResolvers.UpsertMetricApplicationResolver,
    aggregateMetricApplication: actionResolvers.AggregateMetricApplicationResolver,
    groupByMetricApplication: actionResolvers.GroupByMetricApplicationResolver,
  },
  MetricUsage: {
    metricUsage: actionResolvers.FindUniqueMetricUsageResolver,
    findFirstMetricUsage: actionResolvers.FindFirstMetricUsageResolver,
    metricUsages: actionResolvers.FindManyMetricUsageResolver,
    createMetricUsage: actionResolvers.CreateMetricUsageResolver,
    createManyMetricUsage: actionResolvers.CreateManyMetricUsageResolver,
    deleteMetricUsage: actionResolvers.DeleteMetricUsageResolver,
    updateMetricUsage: actionResolvers.UpdateMetricUsageResolver,
    deleteManyMetricUsage: actionResolvers.DeleteManyMetricUsageResolver,
    updateManyMetricUsage: actionResolvers.UpdateManyMetricUsageResolver,
    upsertMetricUsage: actionResolvers.UpsertMetricUsageResolver,
    aggregateMetricUsage: actionResolvers.AggregateMetricUsageResolver,
    groupByMetricUsage: actionResolvers.GroupByMetricUsageResolver,
  },
  Metric: {
    metric: actionResolvers.FindUniqueMetricResolver,
    findFirstMetric: actionResolvers.FindFirstMetricResolver,
    metrics: actionResolvers.FindManyMetricResolver,
    createMetric: actionResolvers.CreateMetricResolver,
    createManyMetric: actionResolvers.CreateManyMetricResolver,
    deleteMetric: actionResolvers.DeleteMetricResolver,
    updateMetric: actionResolvers.UpdateMetricResolver,
    deleteManyMetric: actionResolvers.DeleteManyMetricResolver,
    updateManyMetric: actionResolvers.UpdateManyMetricResolver,
    upsertMetric: actionResolvers.UpsertMetricResolver,
    aggregateMetric: actionResolvers.AggregateMetricResolver,
    groupByMetric: actionResolvers.GroupByMetricResolver,
  },
  Habit: {
    habit: actionResolvers.FindUniqueHabitResolver,
    findFirstHabit: actionResolvers.FindFirstHabitResolver,
    habits: actionResolvers.FindManyHabitResolver,
    createHabit: actionResolvers.CreateHabitResolver,
    createManyHabit: actionResolvers.CreateManyHabitResolver,
    deleteHabit: actionResolvers.DeleteHabitResolver,
    updateHabit: actionResolvers.UpdateHabitResolver,
    deleteManyHabit: actionResolvers.DeleteManyHabitResolver,
    updateManyHabit: actionResolvers.UpdateManyHabitResolver,
    upsertHabit: actionResolvers.UpsertHabitResolver,
    aggregateHabit: actionResolvers.AggregateHabitResolver,
    groupByHabit: actionResolvers.GroupByHabitResolver,
  },
  RoutineHabit: {
    routineHabit: actionResolvers.FindUniqueRoutineHabitResolver,
    findFirstRoutineHabit: actionResolvers.FindFirstRoutineHabitResolver,
    routineHabits: actionResolvers.FindManyRoutineHabitResolver,
    createRoutineHabit: actionResolvers.CreateRoutineHabitResolver,
    createManyRoutineHabit: actionResolvers.CreateManyRoutineHabitResolver,
    deleteRoutineHabit: actionResolvers.DeleteRoutineHabitResolver,
    updateRoutineHabit: actionResolvers.UpdateRoutineHabitResolver,
    deleteManyRoutineHabit: actionResolvers.DeleteManyRoutineHabitResolver,
    updateManyRoutineHabit: actionResolvers.UpdateManyRoutineHabitResolver,
    upsertRoutineHabit: actionResolvers.UpsertRoutineHabitResolver,
    aggregateRoutineHabit: actionResolvers.AggregateRoutineHabitResolver,
    groupByRoutineHabit: actionResolvers.GroupByRoutineHabitResolver,
  },
  Routine: {
    routine: actionResolvers.FindUniqueRoutineResolver,
    findFirstRoutine: actionResolvers.FindFirstRoutineResolver,
    routines: actionResolvers.FindManyRoutineResolver,
    createRoutine: actionResolvers.CreateRoutineResolver,
    createManyRoutine: actionResolvers.CreateManyRoutineResolver,
    deleteRoutine: actionResolvers.DeleteRoutineResolver,
    updateRoutine: actionResolvers.UpdateRoutineResolver,
    deleteManyRoutine: actionResolvers.DeleteManyRoutineResolver,
    updateManyRoutine: actionResolvers.UpdateManyRoutineResolver,
    upsertRoutine: actionResolvers.UpsertRoutineResolver,
    aggregateRoutine: actionResolvers.AggregateRoutineResolver,
    groupByRoutine: actionResolvers.GroupByRoutineResolver,
  },
  MetricRecord: {
    metricRecord: actionResolvers.FindUniqueMetricRecordResolver,
    findFirstMetricRecord: actionResolvers.FindFirstMetricRecordResolver,
    metricRecords: actionResolvers.FindManyMetricRecordResolver,
    createMetricRecord: actionResolvers.CreateMetricRecordResolver,
    createManyMetricRecord: actionResolvers.CreateManyMetricRecordResolver,
    deleteMetricRecord: actionResolvers.DeleteMetricRecordResolver,
    updateMetricRecord: actionResolvers.UpdateMetricRecordResolver,
    deleteManyMetricRecord: actionResolvers.DeleteManyMetricRecordResolver,
    updateManyMetricRecord: actionResolvers.UpdateManyMetricRecordResolver,
    upsertMetricRecord: actionResolvers.UpsertMetricRecordResolver,
    aggregateMetricRecord: actionResolvers.AggregateMetricRecordResolver,
    groupByMetricRecord: actionResolvers.GroupByMetricRecordResolver,
  },
  Task: {
    task: actionResolvers.FindUniqueTaskResolver,
    findFirstTask: actionResolvers.FindFirstTaskResolver,
    tasks: actionResolvers.FindManyTaskResolver,
    createTask: actionResolvers.CreateTaskResolver,
    createManyTask: actionResolvers.CreateManyTaskResolver,
    deleteTask: actionResolvers.DeleteTaskResolver,
    updateTask: actionResolvers.UpdateTaskResolver,
    deleteManyTask: actionResolvers.DeleteManyTaskResolver,
    updateManyTask: actionResolvers.UpdateManyTaskResolver,
    upsertTask: actionResolvers.UpsertTaskResolver,
    aggregateTask: actionResolvers.AggregateTaskResolver,
    groupByTask: actionResolvers.GroupByTaskResolver,
  },
  Action: {
    action: actionResolvers.FindUniqueActionResolver,
    findFirstAction: actionResolvers.FindFirstActionResolver,
    actions: actionResolvers.FindManyActionResolver,
    createAction: actionResolvers.CreateActionResolver,
    createManyAction: actionResolvers.CreateManyActionResolver,
    deleteAction: actionResolvers.DeleteActionResolver,
    updateAction: actionResolvers.UpdateActionResolver,
    deleteManyAction: actionResolvers.DeleteManyActionResolver,
    updateManyAction: actionResolvers.UpdateManyActionResolver,
    upsertAction: actionResolvers.UpsertActionResolver,
    aggregateAction: actionResolvers.AggregateActionResolver,
    groupByAction: actionResolvers.GroupByActionResolver,
  },
  ActionSchedule: {
    actionSchedule: actionResolvers.FindUniqueActionScheduleResolver,
    findFirstActionSchedule: actionResolvers.FindFirstActionScheduleResolver,
    actionSchedules: actionResolvers.FindManyActionScheduleResolver,
    createActionSchedule: actionResolvers.CreateActionScheduleResolver,
    createManyActionSchedule: actionResolvers.CreateManyActionScheduleResolver,
    deleteActionSchedule: actionResolvers.DeleteActionScheduleResolver,
    updateActionSchedule: actionResolvers.UpdateActionScheduleResolver,
    deleteManyActionSchedule: actionResolvers.DeleteManyActionScheduleResolver,
    updateManyActionSchedule: actionResolvers.UpdateManyActionScheduleResolver,
    upsertActionSchedule: actionResolvers.UpsertActionScheduleResolver,
    aggregateActionSchedule: actionResolvers.AggregateActionScheduleResolver,
    groupByActionSchedule: actionResolvers.GroupByActionScheduleResolver,
  },
  ActionScheduleTemplate: {
    actionScheduleTemplate: actionResolvers.FindUniqueActionScheduleTemplateResolver,
    findFirstActionScheduleTemplate: actionResolvers.FindFirstActionScheduleTemplateResolver,
    actionScheduleTemplates: actionResolvers.FindManyActionScheduleTemplateResolver,
    createActionScheduleTemplate: actionResolvers.CreateActionScheduleTemplateResolver,
    createManyActionScheduleTemplate: actionResolvers.CreateManyActionScheduleTemplateResolver,
    deleteActionScheduleTemplate: actionResolvers.DeleteActionScheduleTemplateResolver,
    updateActionScheduleTemplate: actionResolvers.UpdateActionScheduleTemplateResolver,
    deleteManyActionScheduleTemplate: actionResolvers.DeleteManyActionScheduleTemplateResolver,
    updateManyActionScheduleTemplate: actionResolvers.UpdateManyActionScheduleTemplateResolver,
    upsertActionScheduleTemplate: actionResolvers.UpsertActionScheduleTemplateResolver,
    aggregateActionScheduleTemplate: actionResolvers.AggregateActionScheduleTemplateResolver,
    groupByActionScheduleTemplate: actionResolvers.GroupByActionScheduleTemplateResolver,
  },
  Identity: {
    identity: actionResolvers.FindUniqueIdentityResolver,
    findFirstIdentity: actionResolvers.FindFirstIdentityResolver,
    identities: actionResolvers.FindManyIdentityResolver,
    createIdentity: actionResolvers.CreateIdentityResolver,
    createManyIdentity: actionResolvers.CreateManyIdentityResolver,
    deleteIdentity: actionResolvers.DeleteIdentityResolver,
    updateIdentity: actionResolvers.UpdateIdentityResolver,
    deleteManyIdentity: actionResolvers.DeleteManyIdentityResolver,
    updateManyIdentity: actionResolvers.UpdateManyIdentityResolver,
    upsertIdentity: actionResolvers.UpsertIdentityResolver,
    aggregateIdentity: actionResolvers.AggregateIdentityResolver,
    groupByIdentity: actionResolvers.GroupByIdentityResolver,
  },
  Goal: {
    goal: actionResolvers.FindUniqueGoalResolver,
    findFirstGoal: actionResolvers.FindFirstGoalResolver,
    goals: actionResolvers.FindManyGoalResolver,
    createGoal: actionResolvers.CreateGoalResolver,
    createManyGoal: actionResolvers.CreateManyGoalResolver,
    deleteGoal: actionResolvers.DeleteGoalResolver,
    updateGoal: actionResolvers.UpdateGoalResolver,
    deleteManyGoal: actionResolvers.DeleteManyGoalResolver,
    updateManyGoal: actionResolvers.UpdateManyGoalResolver,
    upsertGoal: actionResolvers.UpsertGoalResolver,
    aggregateGoal: actionResolvers.AggregateGoalResolver,
    groupByGoal: actionResolvers.GroupByGoalResolver,
  },
  IdentityActRelation: {
    identityActRelation: actionResolvers.FindUniqueIdentityActRelationResolver,
    findFirstIdentityActRelation: actionResolvers.FindFirstIdentityActRelationResolver,
    identityActRelations: actionResolvers.FindManyIdentityActRelationResolver,
    createIdentityActRelation: actionResolvers.CreateIdentityActRelationResolver,
    createManyIdentityActRelation: actionResolvers.CreateManyIdentityActRelationResolver,
    deleteIdentityActRelation: actionResolvers.DeleteIdentityActRelationResolver,
    updateIdentityActRelation: actionResolvers.UpdateIdentityActRelationResolver,
    deleteManyIdentityActRelation: actionResolvers.DeleteManyIdentityActRelationResolver,
    updateManyIdentityActRelation: actionResolvers.UpdateManyIdentityActRelationResolver,
    upsertIdentityActRelation: actionResolvers.UpsertIdentityActRelationResolver,
    aggregateIdentityActRelation: actionResolvers.AggregateIdentityActRelationResolver,
    groupByIdentityActRelation: actionResolvers.GroupByIdentityActRelationResolver,
  },
  Belief: {
    belief: actionResolvers.FindUniqueBeliefResolver,
    findFirstBelief: actionResolvers.FindFirstBeliefResolver,
    beliefs: actionResolvers.FindManyBeliefResolver,
    createBelief: actionResolvers.CreateBeliefResolver,
    createManyBelief: actionResolvers.CreateManyBeliefResolver,
    deleteBelief: actionResolvers.DeleteBeliefResolver,
    updateBelief: actionResolvers.UpdateBeliefResolver,
    deleteManyBelief: actionResolvers.DeleteManyBeliefResolver,
    updateManyBelief: actionResolvers.UpdateManyBeliefResolver,
    upsertBelief: actionResolvers.UpsertBeliefResolver,
    aggregateBelief: actionResolvers.AggregateBeliefResolver,
    groupByBelief: actionResolvers.GroupByBeliefResolver,
  },
  Value: {
    value: actionResolvers.FindUniqueValueResolver,
    findFirstValue: actionResolvers.FindFirstValueResolver,
    values: actionResolvers.FindManyValueResolver,
    createValue: actionResolvers.CreateValueResolver,
    createManyValue: actionResolvers.CreateManyValueResolver,
    deleteValue: actionResolvers.DeleteValueResolver,
    updateValue: actionResolvers.UpdateValueResolver,
    deleteManyValue: actionResolvers.DeleteManyValueResolver,
    updateManyValue: actionResolvers.UpdateManyValueResolver,
    upsertValue: actionResolvers.UpsertValueResolver,
    aggregateValue: actionResolvers.AggregateValueResolver,
    groupByValue: actionResolvers.GroupByValueResolver,
  },
  Mantra: {
    mantra: actionResolvers.FindUniqueMantraResolver,
    findFirstMantra: actionResolvers.FindFirstMantraResolver,
    mantras: actionResolvers.FindManyMantraResolver,
    createMantra: actionResolvers.CreateMantraResolver,
    createManyMantra: actionResolvers.CreateManyMantraResolver,
    deleteMantra: actionResolvers.DeleteMantraResolver,
    updateMantra: actionResolvers.UpdateMantraResolver,
    deleteManyMantra: actionResolvers.DeleteManyMantraResolver,
    updateManyMantra: actionResolvers.UpdateManyMantraResolver,
    upsertMantra: actionResolvers.UpsertMantraResolver,
    aggregateMantra: actionResolvers.AggregateMantraResolver,
    groupByMantra: actionResolvers.GroupByMantraResolver,
  },
  NotebookUserPermission: {
    notebookUserPermission: actionResolvers.FindUniqueNotebookUserPermissionResolver,
    findFirstNotebookUserPermission: actionResolvers.FindFirstNotebookUserPermissionResolver,
    notebookUserPermissions: actionResolvers.FindManyNotebookUserPermissionResolver,
    createNotebookUserPermission: actionResolvers.CreateNotebookUserPermissionResolver,
    createManyNotebookUserPermission: actionResolvers.CreateManyNotebookUserPermissionResolver,
    deleteNotebookUserPermission: actionResolvers.DeleteNotebookUserPermissionResolver,
    updateNotebookUserPermission: actionResolvers.UpdateNotebookUserPermissionResolver,
    deleteManyNotebookUserPermission: actionResolvers.DeleteManyNotebookUserPermissionResolver,
    updateManyNotebookUserPermission: actionResolvers.UpdateManyNotebookUserPermissionResolver,
    upsertNotebookUserPermission: actionResolvers.UpsertNotebookUserPermissionResolver,
    aggregateNotebookUserPermission: actionResolvers.AggregateNotebookUserPermissionResolver,
    groupByNotebookUserPermission: actionResolvers.GroupByNotebookUserPermissionResolver,
  },
  Notebook: {
    notebook: actionResolvers.FindUniqueNotebookResolver,
    findFirstNotebook: actionResolvers.FindFirstNotebookResolver,
    notebooks: actionResolvers.FindManyNotebookResolver,
    createNotebook: actionResolvers.CreateNotebookResolver,
    createManyNotebook: actionResolvers.CreateManyNotebookResolver,
    deleteNotebook: actionResolvers.DeleteNotebookResolver,
    updateNotebook: actionResolvers.UpdateNotebookResolver,
    deleteManyNotebook: actionResolvers.DeleteManyNotebookResolver,
    updateManyNotebook: actionResolvers.UpdateManyNotebookResolver,
    upsertNotebook: actionResolvers.UpsertNotebookResolver,
    aggregateNotebook: actionResolvers.AggregateNotebookResolver,
    groupByNotebook: actionResolvers.GroupByNotebookResolver,
  },
  Note: {
    note: actionResolvers.FindUniqueNoteResolver,
    findFirstNote: actionResolvers.FindFirstNoteResolver,
    notes: actionResolvers.FindManyNoteResolver,
    createNote: actionResolvers.CreateNoteResolver,
    createManyNote: actionResolvers.CreateManyNoteResolver,
    deleteNote: actionResolvers.DeleteNoteResolver,
    updateNote: actionResolvers.UpdateNoteResolver,
    deleteManyNote: actionResolvers.DeleteManyNoteResolver,
    updateManyNote: actionResolvers.UpdateManyNoteResolver,
    upsertNote: actionResolvers.UpsertNoteResolver,
    aggregateNote: actionResolvers.AggregateNoteResolver,
    groupByNote: actionResolvers.GroupByNoteResolver,
  },
  List: {
    list: actionResolvers.FindUniqueListResolver,
    findFirstList: actionResolvers.FindFirstListResolver,
    lists: actionResolvers.FindManyListResolver,
    createList: actionResolvers.CreateListResolver,
    createManyList: actionResolvers.CreateManyListResolver,
    deleteList: actionResolvers.DeleteListResolver,
    updateList: actionResolvers.UpdateListResolver,
    deleteManyList: actionResolvers.DeleteManyListResolver,
    updateManyList: actionResolvers.UpdateManyListResolver,
    upsertList: actionResolvers.UpsertListResolver,
    aggregateList: actionResolvers.AggregateListResolver,
    groupByList: actionResolvers.GroupByListResolver,
  },
  Item: {
    item: actionResolvers.FindUniqueItemResolver,
    findFirstItem: actionResolvers.FindFirstItemResolver,
    items: actionResolvers.FindManyItemResolver,
    createItem: actionResolvers.CreateItemResolver,
    createManyItem: actionResolvers.CreateManyItemResolver,
    deleteItem: actionResolvers.DeleteItemResolver,
    updateItem: actionResolvers.UpdateItemResolver,
    deleteManyItem: actionResolvers.DeleteManyItemResolver,
    updateManyItem: actionResolvers.UpdateManyItemResolver,
    upsertItem: actionResolvers.UpsertItemResolver,
    aggregateItem: actionResolvers.AggregateItemResolver,
    groupByItem: actionResolvers.GroupByItemResolver,
  },
  Author: {
    author: actionResolvers.FindUniqueAuthorResolver,
    findFirstAuthor: actionResolvers.FindFirstAuthorResolver,
    authors: actionResolvers.FindManyAuthorResolver,
    createAuthor: actionResolvers.CreateAuthorResolver,
    createManyAuthor: actionResolvers.CreateManyAuthorResolver,
    deleteAuthor: actionResolvers.DeleteAuthorResolver,
    updateAuthor: actionResolvers.UpdateAuthorResolver,
    deleteManyAuthor: actionResolvers.DeleteManyAuthorResolver,
    updateManyAuthor: actionResolvers.UpdateManyAuthorResolver,
    upsertAuthor: actionResolvers.UpsertAuthorResolver,
    aggregateAuthor: actionResolvers.AggregateAuthorResolver,
    groupByAuthor: actionResolvers.GroupByAuthorResolver,
  },
  Authorship: {
    authorship: actionResolvers.FindUniqueAuthorshipResolver,
    findFirstAuthorship: actionResolvers.FindFirstAuthorshipResolver,
    authorships: actionResolvers.FindManyAuthorshipResolver,
    createAuthorship: actionResolvers.CreateAuthorshipResolver,
    createManyAuthorship: actionResolvers.CreateManyAuthorshipResolver,
    deleteAuthorship: actionResolvers.DeleteAuthorshipResolver,
    updateAuthorship: actionResolvers.UpdateAuthorshipResolver,
    deleteManyAuthorship: actionResolvers.DeleteManyAuthorshipResolver,
    updateManyAuthorship: actionResolvers.UpdateManyAuthorshipResolver,
    upsertAuthorship: actionResolvers.UpsertAuthorshipResolver,
    aggregateAuthorship: actionResolvers.AggregateAuthorshipResolver,
    groupByAuthorship: actionResolvers.GroupByAuthorshipResolver,
  },
  Book: {
    book: actionResolvers.FindUniqueBookResolver,
    findFirstBook: actionResolvers.FindFirstBookResolver,
    books: actionResolvers.FindManyBookResolver,
    createBook: actionResolvers.CreateBookResolver,
    createManyBook: actionResolvers.CreateManyBookResolver,
    deleteBook: actionResolvers.DeleteBookResolver,
    updateBook: actionResolvers.UpdateBookResolver,
    deleteManyBook: actionResolvers.DeleteManyBookResolver,
    updateManyBook: actionResolvers.UpdateManyBookResolver,
    upsertBook: actionResolvers.UpsertBookResolver,
    aggregateBook: actionResolvers.AggregateBookResolver,
    groupByBook: actionResolvers.GroupByBookResolver,
  },
  Reading: {
    reading: actionResolvers.FindUniqueReadingResolver,
    findFirstReading: actionResolvers.FindFirstReadingResolver,
    readings: actionResolvers.FindManyReadingResolver,
    createReading: actionResolvers.CreateReadingResolver,
    createManyReading: actionResolvers.CreateManyReadingResolver,
    deleteReading: actionResolvers.DeleteReadingResolver,
    updateReading: actionResolvers.UpdateReadingResolver,
    deleteManyReading: actionResolvers.DeleteManyReadingResolver,
    updateManyReading: actionResolvers.UpdateManyReadingResolver,
    upsertReading: actionResolvers.UpsertReadingResolver,
    aggregateReading: actionResolvers.AggregateReadingResolver,
    groupByReading: actionResolvers.GroupByReadingResolver,
  },
  Bookshelf: {
    bookshelf: actionResolvers.FindUniqueBookshelfResolver,
    findFirstBookshelf: actionResolvers.FindFirstBookshelfResolver,
    bookshelves: actionResolvers.FindManyBookshelfResolver,
    createBookshelf: actionResolvers.CreateBookshelfResolver,
    createManyBookshelf: actionResolvers.CreateManyBookshelfResolver,
    deleteBookshelf: actionResolvers.DeleteBookshelfResolver,
    updateBookshelf: actionResolvers.UpdateBookshelfResolver,
    deleteManyBookshelf: actionResolvers.DeleteManyBookshelfResolver,
    updateManyBookshelf: actionResolvers.UpdateManyBookshelfResolver,
    upsertBookshelf: actionResolvers.UpsertBookshelfResolver,
    aggregateBookshelf: actionResolvers.AggregateBookshelfResolver,
    groupByBookshelf: actionResolvers.GroupByBookshelfResolver,
  },
  Shelving: {
    shelving: actionResolvers.FindUniqueShelvingResolver,
    findFirstShelving: actionResolvers.FindFirstShelvingResolver,
    shelvings: actionResolvers.FindManyShelvingResolver,
    createShelving: actionResolvers.CreateShelvingResolver,
    createManyShelving: actionResolvers.CreateManyShelvingResolver,
    deleteShelving: actionResolvers.DeleteShelvingResolver,
    updateShelving: actionResolvers.UpdateShelvingResolver,
    deleteManyShelving: actionResolvers.DeleteManyShelvingResolver,
    updateManyShelving: actionResolvers.UpdateManyShelvingResolver,
    upsertShelving: actionResolvers.UpsertShelvingResolver,
    aggregateShelving: actionResolvers.AggregateShelvingResolver,
    groupByShelving: actionResolvers.GroupByShelvingResolver,
  },
  BookReview: {
    bookReview: actionResolvers.FindUniqueBookReviewResolver,
    findFirstBookReview: actionResolvers.FindFirstBookReviewResolver,
    bookReviews: actionResolvers.FindManyBookReviewResolver,
    createBookReview: actionResolvers.CreateBookReviewResolver,
    createManyBookReview: actionResolvers.CreateManyBookReviewResolver,
    deleteBookReview: actionResolvers.DeleteBookReviewResolver,
    updateBookReview: actionResolvers.UpdateBookReviewResolver,
    deleteManyBookReview: actionResolvers.DeleteManyBookReviewResolver,
    updateManyBookReview: actionResolvers.UpdateManyBookReviewResolver,
    upsertBookReview: actionResolvers.UpsertBookReviewResolver,
    aggregateBookReview: actionResolvers.AggregateBookReviewResolver,
    groupByBookReview: actionResolvers.GroupByBookReviewResolver,
  },
};
const crudResolversInfo = {
  Redirect: [
    "redirect",
    "findFirstRedirect",
    "redirects",
    "createRedirect",
    "createManyRedirect",
    "deleteRedirect",
    "updateRedirect",
    "deleteManyRedirect",
    "updateManyRedirect",
    "upsertRedirect",
    "aggregateRedirect",
    "groupByRedirect",
  ],
  Account: [
    "account",
    "findFirstAccount",
    "accounts",
    "createAccount",
    "createManyAccount",
    "deleteAccount",
    "updateAccount",
    "deleteManyAccount",
    "updateManyAccount",
    "upsertAccount",
    "aggregateAccount",
    "groupByAccount",
  ],
  User: [
    "user",
    "findFirstUser",
    "users",
    "createUser",
    "createManyUser",
    "deleteUser",
    "updateUser",
    "deleteManyUser",
    "updateManyUser",
    "upsertUser",
    "aggregateUser",
    "groupByUser",
  ],
  Dashboard: [
    "dashboard",
    "findFirstDashboard",
    "dashboards",
    "createDashboard",
    "createManyDashboard",
    "deleteDashboard",
    "updateDashboard",
    "deleteManyDashboard",
    "updateManyDashboard",
    "upsertDashboard",
    "aggregateDashboard",
    "groupByDashboard",
  ],
  Calendar: [
    "calendar",
    "findFirstCalendar",
    "calendars",
    "createCalendar",
    "createManyCalendar",
    "deleteCalendar",
    "updateCalendar",
    "deleteManyCalendar",
    "updateManyCalendar",
    "upsertCalendar",
    "aggregateCalendar",
    "groupByCalendar",
  ],
  CalendarEvent: [
    "calendarEvent",
    "findFirstCalendarEvent",
    "calendarEvents",
    "createCalendarEvent",
    "createManyCalendarEvent",
    "deleteCalendarEvent",
    "updateCalendarEvent",
    "deleteManyCalendarEvent",
    "updateManyCalendarEvent",
    "upsertCalendarEvent",
    "aggregateCalendarEvent",
    "groupByCalendarEvent",
  ],
  ScheduleTemplate: [
    "scheduleTemplate",
    "findFirstScheduleTemplate",
    "scheduleTemplates",
    "createScheduleTemplate",
    "createManyScheduleTemplate",
    "deleteScheduleTemplate",
    "updateScheduleTemplate",
    "deleteManyScheduleTemplate",
    "updateManyScheduleTemplate",
    "upsertScheduleTemplate",
    "aggregateScheduleTemplate",
    "groupByScheduleTemplate",
  ],
  Category: [
    "category",
    "findFirstCategory",
    "categories",
    "createCategory",
    "createManyCategory",
    "deleteCategory",
    "updateCategory",
    "deleteManyCategory",
    "updateManyCategory",
    "upsertCategory",
    "aggregateCategory",
    "groupByCategory",
  ],
  Categorization: [
    "categorization",
    "findFirstCategorization",
    "categorizations",
    "createCategorization",
    "createManyCategorization",
    "deleteCategorization",
    "updateCategorization",
    "deleteManyCategorization",
    "updateManyCategorization",
    "upsertCategorization",
    "aggregateCategorization",
    "groupByCategorization",
  ],
  Act: [
    "act",
    "findFirstAct",
    "acts",
    "createAct",
    "createManyAct",
    "deleteAct",
    "updateAct",
    "deleteManyAct",
    "updateManyAct",
    "upsertAct",
    "aggregateAct",
    "groupByAct",
  ],
  MetricApplication: [
    "metricApplication",
    "findFirstMetricApplication",
    "metricApplications",
    "createMetricApplication",
    "createManyMetricApplication",
    "deleteMetricApplication",
    "updateMetricApplication",
    "deleteManyMetricApplication",
    "updateManyMetricApplication",
    "upsertMetricApplication",
    "aggregateMetricApplication",
    "groupByMetricApplication",
  ],
  MetricUsage: [
    "metricUsage",
    "findFirstMetricUsage",
    "metricUsages",
    "createMetricUsage",
    "createManyMetricUsage",
    "deleteMetricUsage",
    "updateMetricUsage",
    "deleteManyMetricUsage",
    "updateManyMetricUsage",
    "upsertMetricUsage",
    "aggregateMetricUsage",
    "groupByMetricUsage",
  ],
  Metric: [
    "metric",
    "findFirstMetric",
    "metrics",
    "createMetric",
    "createManyMetric",
    "deleteMetric",
    "updateMetric",
    "deleteManyMetric",
    "updateManyMetric",
    "upsertMetric",
    "aggregateMetric",
    "groupByMetric",
  ],
  Habit: [
    "habit",
    "findFirstHabit",
    "habits",
    "createHabit",
    "createManyHabit",
    "deleteHabit",
    "updateHabit",
    "deleteManyHabit",
    "updateManyHabit",
    "upsertHabit",
    "aggregateHabit",
    "groupByHabit",
  ],
  RoutineHabit: [
    "routineHabit",
    "findFirstRoutineHabit",
    "routineHabits",
    "createRoutineHabit",
    "createManyRoutineHabit",
    "deleteRoutineHabit",
    "updateRoutineHabit",
    "deleteManyRoutineHabit",
    "updateManyRoutineHabit",
    "upsertRoutineHabit",
    "aggregateRoutineHabit",
    "groupByRoutineHabit",
  ],
  Routine: [
    "routine",
    "findFirstRoutine",
    "routines",
    "createRoutine",
    "createManyRoutine",
    "deleteRoutine",
    "updateRoutine",
    "deleteManyRoutine",
    "updateManyRoutine",
    "upsertRoutine",
    "aggregateRoutine",
    "groupByRoutine",
  ],
  MetricRecord: [
    "metricRecord",
    "findFirstMetricRecord",
    "metricRecords",
    "createMetricRecord",
    "createManyMetricRecord",
    "deleteMetricRecord",
    "updateMetricRecord",
    "deleteManyMetricRecord",
    "updateManyMetricRecord",
    "upsertMetricRecord",
    "aggregateMetricRecord",
    "groupByMetricRecord",
  ],
  Task: [
    "task",
    "findFirstTask",
    "tasks",
    "createTask",
    "createManyTask",
    "deleteTask",
    "updateTask",
    "deleteManyTask",
    "updateManyTask",
    "upsertTask",
    "aggregateTask",
    "groupByTask",
  ],
  Action: [
    "action",
    "findFirstAction",
    "actions",
    "createAction",
    "createManyAction",
    "deleteAction",
    "updateAction",
    "deleteManyAction",
    "updateManyAction",
    "upsertAction",
    "aggregateAction",
    "groupByAction",
  ],
  ActionSchedule: [
    "actionSchedule",
    "findFirstActionSchedule",
    "actionSchedules",
    "createActionSchedule",
    "createManyActionSchedule",
    "deleteActionSchedule",
    "updateActionSchedule",
    "deleteManyActionSchedule",
    "updateManyActionSchedule",
    "upsertActionSchedule",
    "aggregateActionSchedule",
    "groupByActionSchedule",
  ],
  ActionScheduleTemplate: [
    "actionScheduleTemplate",
    "findFirstActionScheduleTemplate",
    "actionScheduleTemplates",
    "createActionScheduleTemplate",
    "createManyActionScheduleTemplate",
    "deleteActionScheduleTemplate",
    "updateActionScheduleTemplate",
    "deleteManyActionScheduleTemplate",
    "updateManyActionScheduleTemplate",
    "upsertActionScheduleTemplate",
    "aggregateActionScheduleTemplate",
    "groupByActionScheduleTemplate",
  ],
  Identity: [
    "identity",
    "findFirstIdentity",
    "identities",
    "createIdentity",
    "createManyIdentity",
    "deleteIdentity",
    "updateIdentity",
    "deleteManyIdentity",
    "updateManyIdentity",
    "upsertIdentity",
    "aggregateIdentity",
    "groupByIdentity",
  ],
  Goal: [
    "goal",
    "findFirstGoal",
    "goals",
    "createGoal",
    "createManyGoal",
    "deleteGoal",
    "updateGoal",
    "deleteManyGoal",
    "updateManyGoal",
    "upsertGoal",
    "aggregateGoal",
    "groupByGoal",
  ],
  IdentityActRelation: [
    "identityActRelation",
    "findFirstIdentityActRelation",
    "identityActRelations",
    "createIdentityActRelation",
    "createManyIdentityActRelation",
    "deleteIdentityActRelation",
    "updateIdentityActRelation",
    "deleteManyIdentityActRelation",
    "updateManyIdentityActRelation",
    "upsertIdentityActRelation",
    "aggregateIdentityActRelation",
    "groupByIdentityActRelation",
  ],
  Belief: [
    "belief",
    "findFirstBelief",
    "beliefs",
    "createBelief",
    "createManyBelief",
    "deleteBelief",
    "updateBelief",
    "deleteManyBelief",
    "updateManyBelief",
    "upsertBelief",
    "aggregateBelief",
    "groupByBelief",
  ],
  Value: [
    "value",
    "findFirstValue",
    "values",
    "createValue",
    "createManyValue",
    "deleteValue",
    "updateValue",
    "deleteManyValue",
    "updateManyValue",
    "upsertValue",
    "aggregateValue",
    "groupByValue",
  ],
  Mantra: [
    "mantra",
    "findFirstMantra",
    "mantras",
    "createMantra",
    "createManyMantra",
    "deleteMantra",
    "updateMantra",
    "deleteManyMantra",
    "updateManyMantra",
    "upsertMantra",
    "aggregateMantra",
    "groupByMantra",
  ],
  NotebookUserPermission: [
    "notebookUserPermission",
    "findFirstNotebookUserPermission",
    "notebookUserPermissions",
    "createNotebookUserPermission",
    "createManyNotebookUserPermission",
    "deleteNotebookUserPermission",
    "updateNotebookUserPermission",
    "deleteManyNotebookUserPermission",
    "updateManyNotebookUserPermission",
    "upsertNotebookUserPermission",
    "aggregateNotebookUserPermission",
    "groupByNotebookUserPermission",
  ],
  Notebook: [
    "notebook",
    "findFirstNotebook",
    "notebooks",
    "createNotebook",
    "createManyNotebook",
    "deleteNotebook",
    "updateNotebook",
    "deleteManyNotebook",
    "updateManyNotebook",
    "upsertNotebook",
    "aggregateNotebook",
    "groupByNotebook",
  ],
  Note: [
    "note",
    "findFirstNote",
    "notes",
    "createNote",
    "createManyNote",
    "deleteNote",
    "updateNote",
    "deleteManyNote",
    "updateManyNote",
    "upsertNote",
    "aggregateNote",
    "groupByNote",
  ],
  List: [
    "list",
    "findFirstList",
    "lists",
    "createList",
    "createManyList",
    "deleteList",
    "updateList",
    "deleteManyList",
    "updateManyList",
    "upsertList",
    "aggregateList",
    "groupByList",
  ],
  Item: [
    "item",
    "findFirstItem",
    "items",
    "createItem",
    "createManyItem",
    "deleteItem",
    "updateItem",
    "deleteManyItem",
    "updateManyItem",
    "upsertItem",
    "aggregateItem",
    "groupByItem",
  ],
  Author: [
    "author",
    "findFirstAuthor",
    "authors",
    "createAuthor",
    "createManyAuthor",
    "deleteAuthor",
    "updateAuthor",
    "deleteManyAuthor",
    "updateManyAuthor",
    "upsertAuthor",
    "aggregateAuthor",
    "groupByAuthor",
  ],
  Authorship: [
    "authorship",
    "findFirstAuthorship",
    "authorships",
    "createAuthorship",
    "createManyAuthorship",
    "deleteAuthorship",
    "updateAuthorship",
    "deleteManyAuthorship",
    "updateManyAuthorship",
    "upsertAuthorship",
    "aggregateAuthorship",
    "groupByAuthorship",
  ],
  Book: [
    "book",
    "findFirstBook",
    "books",
    "createBook",
    "createManyBook",
    "deleteBook",
    "updateBook",
    "deleteManyBook",
    "updateManyBook",
    "upsertBook",
    "aggregateBook",
    "groupByBook",
  ],
  Reading: [
    "reading",
    "findFirstReading",
    "readings",
    "createReading",
    "createManyReading",
    "deleteReading",
    "updateReading",
    "deleteManyReading",
    "updateManyReading",
    "upsertReading",
    "aggregateReading",
    "groupByReading",
  ],
  Bookshelf: [
    "bookshelf",
    "findFirstBookshelf",
    "bookshelves",
    "createBookshelf",
    "createManyBookshelf",
    "deleteBookshelf",
    "updateBookshelf",
    "deleteManyBookshelf",
    "updateManyBookshelf",
    "upsertBookshelf",
    "aggregateBookshelf",
    "groupByBookshelf",
  ],
  Shelving: [
    "shelving",
    "findFirstShelving",
    "shelvings",
    "createShelving",
    "createManyShelving",
    "deleteShelving",
    "updateShelving",
    "deleteManyShelving",
    "updateManyShelving",
    "upsertShelving",
    "aggregateShelving",
    "groupByShelving",
  ],
  BookReview: [
    "bookReview",
    "findFirstBookReview",
    "bookReviews",
    "createBookReview",
    "createManyBookReview",
    "deleteBookReview",
    "updateBookReview",
    "deleteManyBookReview",
    "updateManyBookReview",
    "upsertBookReview",
    "aggregateBookReview",
    "groupByBookReview",
  ],
};
const argsInfo = {
  FindUniqueRedirectArgs: ["where"],
  FindFirstRedirectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRedirectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRedirectArgs: ["data"],
  CreateManyRedirectArgs: ["data", "skipDuplicates"],
  DeleteRedirectArgs: ["where"],
  UpdateRedirectArgs: ["data", "where"],
  DeleteManyRedirectArgs: ["where"],
  UpdateManyRedirectArgs: ["data", "where"],
  UpsertRedirectArgs: ["where", "create", "update"],
  AggregateRedirectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRedirectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAccountArgs: ["where"],
  FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAccountArgs: ["data"],
  CreateManyAccountArgs: ["data", "skipDuplicates"],
  DeleteAccountArgs: ["where"],
  UpdateAccountArgs: ["data", "where"],
  DeleteManyAccountArgs: ["where"],
  UpdateManyAccountArgs: ["data", "where"],
  UpsertAccountArgs: ["where", "create", "update"],
  AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueDashboardArgs: ["where"],
  FindFirstDashboardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyDashboardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateDashboardArgs: ["data"],
  CreateManyDashboardArgs: ["data", "skipDuplicates"],
  DeleteDashboardArgs: ["where"],
  UpdateDashboardArgs: ["data", "where"],
  DeleteManyDashboardArgs: ["where"],
  UpdateManyDashboardArgs: ["data", "where"],
  UpsertDashboardArgs: ["where", "create", "update"],
  AggregateDashboardArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByDashboardArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCalendarArgs: ["where"],
  FindFirstCalendarArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCalendarArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCalendarArgs: ["data"],
  CreateManyCalendarArgs: ["data", "skipDuplicates"],
  DeleteCalendarArgs: ["where"],
  UpdateCalendarArgs: ["data", "where"],
  DeleteManyCalendarArgs: ["where"],
  UpdateManyCalendarArgs: ["data", "where"],
  UpsertCalendarArgs: ["where", "create", "update"],
  AggregateCalendarArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCalendarArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCalendarEventArgs: ["where"],
  FindFirstCalendarEventArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCalendarEventArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCalendarEventArgs: ["data"],
  CreateManyCalendarEventArgs: ["data", "skipDuplicates"],
  DeleteCalendarEventArgs: ["where"],
  UpdateCalendarEventArgs: ["data", "where"],
  DeleteManyCalendarEventArgs: ["where"],
  UpdateManyCalendarEventArgs: ["data", "where"],
  UpsertCalendarEventArgs: ["where", "create", "update"],
  AggregateCalendarEventArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCalendarEventArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueScheduleTemplateArgs: ["where"],
  FindFirstScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateScheduleTemplateArgs: ["data"],
  CreateManyScheduleTemplateArgs: ["data", "skipDuplicates"],
  DeleteScheduleTemplateArgs: ["where"],
  UpdateScheduleTemplateArgs: ["data", "where"],
  DeleteManyScheduleTemplateArgs: ["where"],
  UpdateManyScheduleTemplateArgs: ["data", "where"],
  UpsertScheduleTemplateArgs: ["where", "create", "update"],
  AggregateScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByScheduleTemplateArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCategoryArgs: ["where"],
  FindFirstCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCategoryArgs: ["data"],
  CreateManyCategoryArgs: ["data", "skipDuplicates"],
  DeleteCategoryArgs: ["where"],
  UpdateCategoryArgs: ["data", "where"],
  DeleteManyCategoryArgs: ["where"],
  UpdateManyCategoryArgs: ["data", "where"],
  UpsertCategoryArgs: ["where", "create", "update"],
  AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCategorizationArgs: ["where"],
  FindFirstCategorizationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategorizationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCategorizationArgs: ["data"],
  CreateManyCategorizationArgs: ["data", "skipDuplicates"],
  DeleteCategorizationArgs: ["where"],
  UpdateCategorizationArgs: ["data", "where"],
  DeleteManyCategorizationArgs: ["where"],
  UpdateManyCategorizationArgs: ["data", "where"],
  UpsertCategorizationArgs: ["where", "create", "update"],
  AggregateCategorizationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCategorizationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActArgs: ["where"],
  FindFirstActArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActArgs: ["data"],
  CreateManyActArgs: ["data", "skipDuplicates"],
  DeleteActArgs: ["where"],
  UpdateActArgs: ["data", "where"],
  DeleteManyActArgs: ["where"],
  UpdateManyActArgs: ["data", "where"],
  UpsertActArgs: ["where", "create", "update"],
  AggregateActArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMetricApplicationArgs: ["where"],
  FindFirstMetricApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMetricApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMetricApplicationArgs: ["data"],
  CreateManyMetricApplicationArgs: ["data", "skipDuplicates"],
  DeleteMetricApplicationArgs: ["where"],
  UpdateMetricApplicationArgs: ["data", "where"],
  DeleteManyMetricApplicationArgs: ["where"],
  UpdateManyMetricApplicationArgs: ["data", "where"],
  UpsertMetricApplicationArgs: ["where", "create", "update"],
  AggregateMetricApplicationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMetricApplicationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMetricUsageArgs: ["where"],
  FindFirstMetricUsageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMetricUsageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMetricUsageArgs: ["data"],
  CreateManyMetricUsageArgs: ["data", "skipDuplicates"],
  DeleteMetricUsageArgs: ["where"],
  UpdateMetricUsageArgs: ["data", "where"],
  DeleteManyMetricUsageArgs: ["where"],
  UpdateManyMetricUsageArgs: ["data", "where"],
  UpsertMetricUsageArgs: ["where", "create", "update"],
  AggregateMetricUsageArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMetricUsageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMetricArgs: ["where"],
  FindFirstMetricArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMetricArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMetricArgs: ["data"],
  CreateManyMetricArgs: ["data", "skipDuplicates"],
  DeleteMetricArgs: ["where"],
  UpdateMetricArgs: ["data", "where"],
  DeleteManyMetricArgs: ["where"],
  UpdateManyMetricArgs: ["data", "where"],
  UpsertMetricArgs: ["where", "create", "update"],
  AggregateMetricArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMetricArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueHabitArgs: ["where"],
  FindFirstHabitArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyHabitArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateHabitArgs: ["data"],
  CreateManyHabitArgs: ["data", "skipDuplicates"],
  DeleteHabitArgs: ["where"],
  UpdateHabitArgs: ["data", "where"],
  DeleteManyHabitArgs: ["where"],
  UpdateManyHabitArgs: ["data", "where"],
  UpsertHabitArgs: ["where", "create", "update"],
  AggregateHabitArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByHabitArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueRoutineHabitArgs: ["where"],
  FindFirstRoutineHabitArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRoutineHabitArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRoutineHabitArgs: ["data"],
  CreateManyRoutineHabitArgs: ["data", "skipDuplicates"],
  DeleteRoutineHabitArgs: ["where"],
  UpdateRoutineHabitArgs: ["data", "where"],
  DeleteManyRoutineHabitArgs: ["where"],
  UpdateManyRoutineHabitArgs: ["data", "where"],
  UpsertRoutineHabitArgs: ["where", "create", "update"],
  AggregateRoutineHabitArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRoutineHabitArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueRoutineArgs: ["where"],
  FindFirstRoutineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRoutineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRoutineArgs: ["data"],
  CreateManyRoutineArgs: ["data", "skipDuplicates"],
  DeleteRoutineArgs: ["where"],
  UpdateRoutineArgs: ["data", "where"],
  DeleteManyRoutineArgs: ["where"],
  UpdateManyRoutineArgs: ["data", "where"],
  UpsertRoutineArgs: ["where", "create", "update"],
  AggregateRoutineArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRoutineArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMetricRecordArgs: ["where"],
  FindFirstMetricRecordArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMetricRecordArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMetricRecordArgs: ["data"],
  CreateManyMetricRecordArgs: ["data", "skipDuplicates"],
  DeleteMetricRecordArgs: ["where"],
  UpdateMetricRecordArgs: ["data", "where"],
  DeleteManyMetricRecordArgs: ["where"],
  UpdateManyMetricRecordArgs: ["data", "where"],
  UpsertMetricRecordArgs: ["where", "create", "update"],
  AggregateMetricRecordArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMetricRecordArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTaskArgs: ["where"],
  FindFirstTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTaskArgs: ["data"],
  CreateManyTaskArgs: ["data", "skipDuplicates"],
  DeleteTaskArgs: ["where"],
  UpdateTaskArgs: ["data", "where"],
  DeleteManyTaskArgs: ["where"],
  UpdateManyTaskArgs: ["data", "where"],
  UpsertTaskArgs: ["where", "create", "update"],
  AggregateTaskArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTaskArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActionArgs: ["where"],
  FindFirstActionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActionArgs: ["data"],
  CreateManyActionArgs: ["data", "skipDuplicates"],
  DeleteActionArgs: ["where"],
  UpdateActionArgs: ["data", "where"],
  DeleteManyActionArgs: ["where"],
  UpdateManyActionArgs: ["data", "where"],
  UpsertActionArgs: ["where", "create", "update"],
  AggregateActionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActionScheduleArgs: ["where"],
  FindFirstActionScheduleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActionScheduleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActionScheduleArgs: ["data"],
  CreateManyActionScheduleArgs: ["data", "skipDuplicates"],
  DeleteActionScheduleArgs: ["where"],
  UpdateActionScheduleArgs: ["data", "where"],
  DeleteManyActionScheduleArgs: ["where"],
  UpdateManyActionScheduleArgs: ["data", "where"],
  UpsertActionScheduleArgs: ["where", "create", "update"],
  AggregateActionScheduleArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActionScheduleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActionScheduleTemplateArgs: ["where"],
  FindFirstActionScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActionScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActionScheduleTemplateArgs: ["data"],
  CreateManyActionScheduleTemplateArgs: ["data", "skipDuplicates"],
  DeleteActionScheduleTemplateArgs: ["where"],
  UpdateActionScheduleTemplateArgs: ["data", "where"],
  DeleteManyActionScheduleTemplateArgs: ["where"],
  UpdateManyActionScheduleTemplateArgs: ["data", "where"],
  UpsertActionScheduleTemplateArgs: ["where", "create", "update"],
  AggregateActionScheduleTemplateArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActionScheduleTemplateArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueIdentityArgs: ["where"],
  FindFirstIdentityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyIdentityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateIdentityArgs: ["data"],
  CreateManyIdentityArgs: ["data", "skipDuplicates"],
  DeleteIdentityArgs: ["where"],
  UpdateIdentityArgs: ["data", "where"],
  DeleteManyIdentityArgs: ["where"],
  UpdateManyIdentityArgs: ["data", "where"],
  UpsertIdentityArgs: ["where", "create", "update"],
  AggregateIdentityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByIdentityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGoalArgs: ["where"],
  FindFirstGoalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGoalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGoalArgs: ["data"],
  CreateManyGoalArgs: ["data", "skipDuplicates"],
  DeleteGoalArgs: ["where"],
  UpdateGoalArgs: ["data", "where"],
  DeleteManyGoalArgs: ["where"],
  UpdateManyGoalArgs: ["data", "where"],
  UpsertGoalArgs: ["where", "create", "update"],
  AggregateGoalArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGoalArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueIdentityActRelationArgs: ["where"],
  FindFirstIdentityActRelationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyIdentityActRelationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateIdentityActRelationArgs: ["data"],
  CreateManyIdentityActRelationArgs: ["data", "skipDuplicates"],
  DeleteIdentityActRelationArgs: ["where"],
  UpdateIdentityActRelationArgs: ["data", "where"],
  DeleteManyIdentityActRelationArgs: ["where"],
  UpdateManyIdentityActRelationArgs: ["data", "where"],
  UpsertIdentityActRelationArgs: ["where", "create", "update"],
  AggregateIdentityActRelationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByIdentityActRelationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBeliefArgs: ["where"],
  FindFirstBeliefArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBeliefArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBeliefArgs: ["data"],
  CreateManyBeliefArgs: ["data", "skipDuplicates"],
  DeleteBeliefArgs: ["where"],
  UpdateBeliefArgs: ["data", "where"],
  DeleteManyBeliefArgs: ["where"],
  UpdateManyBeliefArgs: ["data", "where"],
  UpsertBeliefArgs: ["where", "create", "update"],
  AggregateBeliefArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBeliefArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueValueArgs: ["where"],
  FindFirstValueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyValueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateValueArgs: ["data"],
  CreateManyValueArgs: ["data", "skipDuplicates"],
  DeleteValueArgs: ["where"],
  UpdateValueArgs: ["data", "where"],
  DeleteManyValueArgs: ["where"],
  UpdateManyValueArgs: ["data", "where"],
  UpsertValueArgs: ["where", "create", "update"],
  AggregateValueArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByValueArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMantraArgs: ["where"],
  FindFirstMantraArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMantraArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMantraArgs: ["data"],
  CreateManyMantraArgs: ["data", "skipDuplicates"],
  DeleteMantraArgs: ["where"],
  UpdateMantraArgs: ["data", "where"],
  DeleteManyMantraArgs: ["where"],
  UpdateManyMantraArgs: ["data", "where"],
  UpsertMantraArgs: ["where", "create", "update"],
  AggregateMantraArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMantraArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueNotebookUserPermissionArgs: ["where"],
  FindFirstNotebookUserPermissionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyNotebookUserPermissionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateNotebookUserPermissionArgs: ["data"],
  CreateManyNotebookUserPermissionArgs: ["data", "skipDuplicates"],
  DeleteNotebookUserPermissionArgs: ["where"],
  UpdateNotebookUserPermissionArgs: ["data", "where"],
  DeleteManyNotebookUserPermissionArgs: ["where"],
  UpdateManyNotebookUserPermissionArgs: ["data", "where"],
  UpsertNotebookUserPermissionArgs: ["where", "create", "update"],
  AggregateNotebookUserPermissionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByNotebookUserPermissionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueNotebookArgs: ["where"],
  FindFirstNotebookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyNotebookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateNotebookArgs: ["data"],
  CreateManyNotebookArgs: ["data", "skipDuplicates"],
  DeleteNotebookArgs: ["where"],
  UpdateNotebookArgs: ["data", "where"],
  DeleteManyNotebookArgs: ["where"],
  UpdateManyNotebookArgs: ["data", "where"],
  UpsertNotebookArgs: ["where", "create", "update"],
  AggregateNotebookArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByNotebookArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueNoteArgs: ["where"],
  FindFirstNoteArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyNoteArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateNoteArgs: ["data"],
  CreateManyNoteArgs: ["data", "skipDuplicates"],
  DeleteNoteArgs: ["where"],
  UpdateNoteArgs: ["data", "where"],
  DeleteManyNoteArgs: ["where"],
  UpdateManyNoteArgs: ["data", "where"],
  UpsertNoteArgs: ["where", "create", "update"],
  AggregateNoteArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByNoteArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueListArgs: ["where"],
  FindFirstListArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyListArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateListArgs: ["data"],
  CreateManyListArgs: ["data", "skipDuplicates"],
  DeleteListArgs: ["where"],
  UpdateListArgs: ["data", "where"],
  DeleteManyListArgs: ["where"],
  UpdateManyListArgs: ["data", "where"],
  UpsertListArgs: ["where", "create", "update"],
  AggregateListArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByListArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueItemArgs: ["where"],
  FindFirstItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateItemArgs: ["data"],
  CreateManyItemArgs: ["data", "skipDuplicates"],
  DeleteItemArgs: ["where"],
  UpdateItemArgs: ["data", "where"],
  DeleteManyItemArgs: ["where"],
  UpdateManyItemArgs: ["data", "where"],
  UpsertItemArgs: ["where", "create", "update"],
  AggregateItemArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByItemArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAuthorArgs: ["where"],
  FindFirstAuthorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAuthorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAuthorArgs: ["data"],
  CreateManyAuthorArgs: ["data", "skipDuplicates"],
  DeleteAuthorArgs: ["where"],
  UpdateAuthorArgs: ["data", "where"],
  DeleteManyAuthorArgs: ["where"],
  UpdateManyAuthorArgs: ["data", "where"],
  UpsertAuthorArgs: ["where", "create", "update"],
  AggregateAuthorArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAuthorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAuthorshipArgs: ["where"],
  FindFirstAuthorshipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAuthorshipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAuthorshipArgs: ["data"],
  CreateManyAuthorshipArgs: ["data", "skipDuplicates"],
  DeleteAuthorshipArgs: ["where"],
  UpdateAuthorshipArgs: ["data", "where"],
  DeleteManyAuthorshipArgs: ["where"],
  UpdateManyAuthorshipArgs: ["data", "where"],
  UpsertAuthorshipArgs: ["where", "create", "update"],
  AggregateAuthorshipArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAuthorshipArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBookArgs: ["where"],
  FindFirstBookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBookArgs: ["data"],
  CreateManyBookArgs: ["data", "skipDuplicates"],
  DeleteBookArgs: ["where"],
  UpdateBookArgs: ["data", "where"],
  DeleteManyBookArgs: ["where"],
  UpdateManyBookArgs: ["data", "where"],
  UpsertBookArgs: ["where", "create", "update"],
  AggregateBookArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBookArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueReadingArgs: ["where"],
  FindFirstReadingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyReadingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateReadingArgs: ["data"],
  CreateManyReadingArgs: ["data", "skipDuplicates"],
  DeleteReadingArgs: ["where"],
  UpdateReadingArgs: ["data", "where"],
  DeleteManyReadingArgs: ["where"],
  UpdateManyReadingArgs: ["data", "where"],
  UpsertReadingArgs: ["where", "create", "update"],
  AggregateReadingArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByReadingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBookshelfArgs: ["where"],
  FindFirstBookshelfArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBookshelfArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBookshelfArgs: ["data"],
  CreateManyBookshelfArgs: ["data", "skipDuplicates"],
  DeleteBookshelfArgs: ["where"],
  UpdateBookshelfArgs: ["data", "where"],
  DeleteManyBookshelfArgs: ["where"],
  UpdateManyBookshelfArgs: ["data", "where"],
  UpsertBookshelfArgs: ["where", "create", "update"],
  AggregateBookshelfArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBookshelfArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueShelvingArgs: ["where"],
  FindFirstShelvingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyShelvingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateShelvingArgs: ["data"],
  CreateManyShelvingArgs: ["data", "skipDuplicates"],
  DeleteShelvingArgs: ["where"],
  UpdateShelvingArgs: ["data", "where"],
  DeleteManyShelvingArgs: ["where"],
  UpdateManyShelvingArgs: ["data", "where"],
  UpsertShelvingArgs: ["where", "create", "update"],
  AggregateShelvingArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByShelvingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBookReviewArgs: ["where"],
  FindFirstBookReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBookReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBookReviewArgs: ["data"],
  CreateManyBookReviewArgs: ["data", "skipDuplicates"],
  DeleteBookReviewArgs: ["where"],
  UpdateBookReviewArgs: ["data", "where"],
  DeleteManyBookReviewArgs: ["where"],
  UpdateManyBookReviewArgs: ["data", "where"],
  UpsertBookReviewArgs: ["where", "create", "update"],
  AggregateBookReviewArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBookReviewArgs: ["where", "orderBy", "by", "having", "take", "skip"],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>
>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(resolversEnhanceMap: ResolversEnhanceMap) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (
          actionResolversConfig[
            resolverActionName as keyof typeof actionResolversConfig
          ] as CallableFunction
        ).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter((it) => it !== "_all");
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as CallableFunction
      ).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(argsTypesEnhanceMap: ArgsTypesEnhanceMap) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo]
    );
  }
}

const relationResolversMap = {
  Account: relationResolvers.AccountRelationsResolver,
  User: relationResolvers.UserRelationsResolver,
  Dashboard: relationResolvers.DashboardRelationsResolver,
  Calendar: relationResolvers.CalendarRelationsResolver,
  CalendarEvent: relationResolvers.CalendarEventRelationsResolver,
  ScheduleTemplate: relationResolvers.ScheduleTemplateRelationsResolver,
  Category: relationResolvers.CategoryRelationsResolver,
  Categorization: relationResolvers.CategorizationRelationsResolver,
  Act: relationResolvers.ActRelationsResolver,
  MetricApplication: relationResolvers.MetricApplicationRelationsResolver,
  MetricUsage: relationResolvers.MetricUsageRelationsResolver,
  Metric: relationResolvers.MetricRelationsResolver,
  Habit: relationResolvers.HabitRelationsResolver,
  RoutineHabit: relationResolvers.RoutineHabitRelationsResolver,
  Routine: relationResolvers.RoutineRelationsResolver,
  MetricRecord: relationResolvers.MetricRecordRelationsResolver,
  Task: relationResolvers.TaskRelationsResolver,
  Action: relationResolvers.ActionRelationsResolver,
  ActionSchedule: relationResolvers.ActionScheduleRelationsResolver,
  ActionScheduleTemplate: relationResolvers.ActionScheduleTemplateRelationsResolver,
  Identity: relationResolvers.IdentityRelationsResolver,
  Goal: relationResolvers.GoalRelationsResolver,
  IdentityActRelation: relationResolvers.IdentityActRelationRelationsResolver,
  Belief: relationResolvers.BeliefRelationsResolver,
  Value: relationResolvers.ValueRelationsResolver,
  Mantra: relationResolvers.MantraRelationsResolver,
  NotebookUserPermission: relationResolvers.NotebookUserPermissionRelationsResolver,
  Notebook: relationResolvers.NotebookRelationsResolver,
  Note: relationResolvers.NoteRelationsResolver,
  List: relationResolvers.ListRelationsResolver,
  Item: relationResolvers.ItemRelationsResolver,
  Author: relationResolvers.AuthorRelationsResolver,
  Authorship: relationResolvers.AuthorshipRelationsResolver,
  Book: relationResolvers.BookRelationsResolver,
  Reading: relationResolvers.ReadingRelationsResolver,
  Bookshelf: relationResolvers.BookshelfRelationsResolver,
  Shelving: relationResolvers.ShelvingRelationsResolver,
  BookReview: relationResolvers.BookReviewRelationsResolver,
};
const relationResolversInfo = {
  Account: ["user", "calendars"],
  User: [
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  Dashboard: ["user"],
  Calendar: ["user", "account", "events"],
  CalendarEvent: ["calendar", "schedule", "habit", "task"],
  ScheduleTemplate: ["actionScheduleTemplates"],
  Category: ["categorizations"],
  Categorization: ["category", "act"],
  Act: [
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  MetricApplication: ["act", "metric"],
  MetricUsage: ["metric", "habit", "records"],
  Metric: ["applications", "usages"],
  Habit: [
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  RoutineHabit: ["routine", "habit"],
  Routine: ["habits"],
  MetricRecord: ["metricUsage", "action"],
  Task: ["user", "parent", "habit", "subtasks", "calendarEvents"],
  Action: ["habit", "metricRecords"],
  ActionSchedule: ["habit", "calendarEvents", "template"],
  ActionScheduleTemplate: ["act", "scheduleTemplate", "actionSchedules"],
  Identity: ["user", "actionRelations"],
  Goal: ["habit", "goal", "milestones"],
  IdentityActRelation: ["identity", "action"],
  Belief: ["user"],
  Value: ["user"],
  Mantra: ["user"],
  NotebookUserPermission: ["user", "notebook"],
  Notebook: ["owner", "notes", "userPermissions"],
  Note: ["notebook"],
  List: ["owner", "items"],
  Item: ["list"],
  Author: ["authorships"],
  Authorship: ["author", "book"],
  Book: ["authorships", "readings", "shelvings", "BookReview"],
  Reading: ["user", "book", "review"],
  Bookshelf: ["owner", "shelvings"],
  Shelving: ["book", "shelf"],
  BookReview: ["book", "user", "reading"],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames> = Partial<
  Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>
>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames =
        relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(
          allActionsDecorators,
          relationResolverTarget,
          relationResolverActionName,
          null
        );
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      (it) => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<TEnhanceConfig extends TypeConfig, TType extends object>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter((it) => it !== "_all");
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  Redirect: ["id", "old_path", "new_path"],
  Account: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  User: ["id", "name", "email", "emailVerified", "image", "isAdmin", "settings", "lastLogin"],
  Dashboard: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Calendar: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEvent: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ScheduleTemplate: ["id", "frequency", "multiplier", "chron"],
  Category: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  Categorization: ["id", "categoryId", "actId", "createdAt", "updatedAt", "archivedAt"],
  Act: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplication: ["id", "actId", "metricId", "createdAt", "updatedAt", "archivedAt"],
  MetricUsage: ["id", "metricId", "habitId", "archivedAt"],
  Metric: ["id", "name"],
  Habit: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabit: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Routine: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecord: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Task: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Action: ["id", "habitId", "start", "end", "notes", "createdAt", "updatedAt", "archivedAt"],
  ActionSchedule: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleTemplate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  Identity: ["id", "userId", "identityId", "archivedAt"],
  Goal: ["id", "habitId", "goalId", "quantity"],
  IdentityActRelation: ["id", "identityId", "actionId", "archivedAt"],
  Belief: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  Value: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  Mantra: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  NotebookUserPermission: ["id", "userId", "notebookId", "archivedAt"],
  Notebook: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Note: ["id", "notebookId", "title", "body", "isPublic", "createdAt", "updatedAt", "archivedAt"],
  List: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Item: ["id", "listId", "data", "createdAt", "updatedAt", "archivedAt"],
  Author: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  Authorship: ["id", "authorId", "bookId", "position", "createdAt", "updatedAt", "archivedAt"],
  Book: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Reading: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Bookshelf: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  Shelving: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReview: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<ModelFieldNames<TModel>>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo]
    );
  }
}

const outputsInfo = {
  AggregateRedirect: ["_count", "_avg", "_sum", "_min", "_max"],
  RedirectGroupBy: ["id", "old_path", "new_path", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
  AccountGroupBy: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateDashboard: ["_count", "_avg", "_sum", "_min", "_max"],
  DashboardGroupBy: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateCalendar: ["_count", "_avg", "_sum", "_min", "_max"],
  CalendarGroupBy: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateCalendarEvent: ["_count", "_avg", "_sum", "_min", "_max"],
  CalendarEventGroupBy: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateScheduleTemplate: ["_count", "_avg", "_sum", "_min", "_max"],
  ScheduleTemplateGroupBy: [
    "id",
    "frequency",
    "multiplier",
    "chron",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateCategory: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryGroupBy: [
    "id",
    "name",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateCategorization: ["_count", "_avg", "_sum", "_min", "_max"],
  CategorizationGroupBy: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateAct: ["_count", "_avg", "_sum", "_min", "_max"],
  ActGroupBy: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateMetricApplication: ["_count", "_avg", "_sum", "_min", "_max"],
  MetricApplicationGroupBy: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateMetricUsage: ["_count", "_avg", "_sum", "_min", "_max"],
  MetricUsageGroupBy: [
    "id",
    "metricId",
    "habitId",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateMetric: ["_count", "_avg", "_sum", "_min", "_max"],
  MetricGroupBy: ["id", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateHabit: ["_count", "_avg", "_sum", "_min", "_max"],
  HabitGroupBy: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateRoutineHabit: ["_count", "_avg", "_sum", "_min", "_max"],
  RoutineHabitGroupBy: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateRoutine: ["_count", "_avg", "_sum", "_min", "_max"],
  RoutineGroupBy: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateMetricRecord: ["_count", "_avg", "_sum", "_min", "_max"],
  MetricRecordGroupBy: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateTask: ["_count", "_avg", "_sum", "_min", "_max"],
  TaskGroupBy: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateAction: ["_count", "_avg", "_sum", "_min", "_max"],
  ActionGroupBy: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateActionSchedule: ["_count", "_avg", "_sum", "_min", "_max"],
  ActionScheduleGroupBy: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateActionScheduleTemplate: ["_count", "_avg", "_sum", "_min", "_max"],
  ActionScheduleTemplateGroupBy: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateIdentity: ["_count", "_avg", "_sum", "_min", "_max"],
  IdentityGroupBy: ["id", "name", "slug", "description", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGoal: ["_count", "_avg", "_sum", "_min", "_max"],
  GoalGroupBy: ["id", "habitId", "goalId", "quantity", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateIdentityActRelation: ["_count", "_avg", "_sum", "_min", "_max"],
  IdentityActRelationGroupBy: [
    "id",
    "identityId",
    "actionId",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateBelief: ["_count", "_avg", "_sum", "_min", "_max"],
  BeliefGroupBy: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateValue: ["_count", "_avg", "_sum", "_min", "_max"],
  ValueGroupBy: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateMantra: ["_count", "_avg", "_sum", "_min", "_max"],
  MantraGroupBy: [
    "id",
    "content",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateNotebookUserPermission: ["_count", "_avg", "_sum", "_min", "_max"],
  NotebookUserPermissionGroupBy: [
    "id",
    "userId",
    "notebookId",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateNotebook: ["_count", "_avg", "_sum", "_min", "_max"],
  NotebookGroupBy: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateNote: ["_count", "_avg", "_sum", "_min", "_max"],
  NoteGroupBy: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateList: ["_count", "_avg", "_sum", "_min", "_max"],
  ListGroupBy: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateItem: ["_count", "_avg", "_sum", "_min", "_max"],
  ItemGroupBy: [
    "id",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateAuthor: ["_count", "_avg", "_sum", "_min", "_max"],
  AuthorGroupBy: [
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateAuthorship: ["_count", "_avg", "_sum", "_min", "_max"],
  AuthorshipGroupBy: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateBook: ["_count", "_avg", "_sum", "_min", "_max"],
  BookGroupBy: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateReading: ["_count", "_avg", "_sum", "_min", "_max"],
  ReadingGroupBy: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateBookshelf: ["_count", "_avg", "_sum", "_min", "_max"],
  BookshelfGroupBy: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateShelving: ["_count", "_avg", "_sum", "_min", "_max"],
  ShelvingGroupBy: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateBookReview: ["_count", "_avg", "_sum", "_min", "_max"],
  BookReviewGroupBy: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AffectedRowsOutput: ["count"],
  RedirectCountAggregate: ["id", "old_path", "new_path", "_all"],
  RedirectAvgAggregate: ["id"],
  RedirectSumAggregate: ["id"],
  RedirectMinAggregate: ["id", "old_path", "new_path"],
  RedirectMaxAggregate: ["id", "old_path", "new_path"],
  AccountCount: ["calendars"],
  AccountCountAggregate: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "_all",
  ],
  AccountAvgAggregate: ["id", "userId"],
  AccountSumAggregate: ["id", "userId"],
  AccountMinAggregate: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  AccountMaxAggregate: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  UserCount: [
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCountAggregate: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "_all",
  ],
  UserAvgAggregate: ["id"],
  UserSumAggregate: ["id"],
  UserMinAggregate: ["id", "name", "email", "emailVerified", "image", "isAdmin", "lastLogin"],
  UserMaxAggregate: ["id", "name", "email", "emailVerified", "image", "isAdmin", "lastLogin"],
  DashboardCountAggregate: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  DashboardAvgAggregate: ["id", "userId"],
  DashboardSumAggregate: ["id", "userId"],
  DashboardMinAggregate: [
    "id",
    "name",
    "userId",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardMaxAggregate: [
    "id",
    "name",
    "userId",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarCount: ["events"],
  CalendarCountAggregate: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  CalendarAvgAggregate: ["id", "userId", "accountId"],
  CalendarSumAggregate: ["id", "userId", "accountId"],
  CalendarMinAggregate: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarMaxAggregate: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventCountAggregate: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  CalendarEventAvgAggregate: ["id", "calendarId", "scheduleId", "habitId", "taskId"],
  CalendarEventSumAggregate: ["id", "calendarId", "scheduleId", "habitId", "taskId"],
  CalendarEventMinAggregate: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventMaxAggregate: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ScheduleTemplateCount: ["actionScheduleTemplates"],
  ScheduleTemplateCountAggregate: ["id", "frequency", "multiplier", "chron", "_all"],
  ScheduleTemplateAvgAggregate: ["id", "multiplier"],
  ScheduleTemplateSumAggregate: ["id", "multiplier"],
  ScheduleTemplateMinAggregate: ["id", "frequency", "multiplier", "chron"],
  ScheduleTemplateMaxAggregate: ["id", "frequency", "multiplier", "chron"],
  CategoryCount: ["categorizations"],
  CategoryCountAggregate: ["id", "name", "createdAt", "updatedAt", "archivedAt", "_all"],
  CategoryAvgAggregate: ["id"],
  CategorySumAggregate: ["id"],
  CategoryMinAggregate: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategoryMaxAggregate: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategorizationCountAggregate: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  CategorizationAvgAggregate: ["id", "categoryId", "actId"],
  CategorizationSumAggregate: ["id", "categoryId", "actId"],
  CategorizationMinAggregate: ["id", "categoryId", "actId", "createdAt", "updatedAt", "archivedAt"],
  CategorizationMaxAggregate: ["id", "categoryId", "actId", "createdAt", "updatedAt", "archivedAt"],
  ActCount: [
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCountAggregate: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ActAvgAggregate: ["id", "parentId"],
  ActSumAggregate: ["id", "parentId"],
  ActMinAggregate: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActMaxAggregate: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationCountAggregate: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  MetricApplicationAvgAggregate: ["id", "actId", "metricId"],
  MetricApplicationSumAggregate: ["id", "actId", "metricId"],
  MetricApplicationMinAggregate: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationMaxAggregate: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricUsageCount: ["records"],
  MetricUsageCountAggregate: ["id", "metricId", "habitId", "archivedAt", "_all"],
  MetricUsageAvgAggregate: ["id", "metricId", "habitId"],
  MetricUsageSumAggregate: ["id", "metricId", "habitId"],
  MetricUsageMinAggregate: ["id", "metricId", "habitId", "archivedAt"],
  MetricUsageMaxAggregate: ["id", "metricId", "habitId", "archivedAt"],
  MetricCount: ["applications", "usages"],
  MetricCountAggregate: ["id", "name", "_all"],
  MetricAvgAggregate: ["id"],
  MetricSumAggregate: ["id"],
  MetricMinAggregate: ["id", "name"],
  MetricMaxAggregate: ["id", "name"],
  HabitCount: [
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCountAggregate: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  HabitAvgAggregate: ["id", "actId", "userId", "defaultDurationInMinutes"],
  HabitSumAggregate: ["id", "actId", "userId", "defaultDurationInMinutes"],
  HabitMinAggregate: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitMaxAggregate: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitCountAggregate: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  RoutineHabitAvgAggregate: ["id", "routineId", "habitId", "position", "durationInMinutes"],
  RoutineHabitSumAggregate: ["id", "routineId", "habitId", "position", "durationInMinutes"],
  RoutineHabitMinAggregate: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitMaxAggregate: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineCount: ["habits"],
  RoutineCountAggregate: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  RoutineAvgAggregate: ["id", "userId", "durationInMinutes"],
  RoutineSumAggregate: ["id", "userId", "durationInMinutes"],
  RoutineMinAggregate: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineMaxAggregate: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordCountAggregate: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  MetricRecordAvgAggregate: ["id", "metricUsageId", "actionId", "value"],
  MetricRecordSumAggregate: ["id", "metricUsageId", "actionId", "value"],
  MetricRecordMinAggregate: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordMaxAggregate: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskCount: ["subtasks", "calendarEvents"],
  TaskCountAggregate: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  TaskAvgAggregate: ["id", "userId", "parentId", "habitId", "rank"],
  TaskSumAggregate: ["id", "userId", "parentId", "habitId", "rank"],
  TaskMinAggregate: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskMaxAggregate: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionCount: ["metricRecords"],
  ActionCountAggregate: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ActionAvgAggregate: ["id", "habitId"],
  ActionSumAggregate: ["id", "habitId"],
  ActionMinAggregate: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionMaxAggregate: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleCount: ["calendarEvents"],
  ActionScheduleCountAggregate: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ActionScheduleAvgAggregate: ["id", "habitId", "multiplier", "quantity", "templateId"],
  ActionScheduleSumAggregate: ["id", "habitId", "multiplier", "quantity", "templateId"],
  ActionScheduleMinAggregate: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleMaxAggregate: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleTemplateCount: ["actionSchedules"],
  ActionScheduleTemplateCountAggregate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
    "_all",
  ],
  ActionScheduleTemplateAvgAggregate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateSumAggregate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateMinAggregate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateMaxAggregate: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  IdentityCount: ["identities", "actionRelations"],
  IdentityCountAggregate: ["id", "name", "slug", "description", "_all"],
  IdentityAvgAggregate: ["id"],
  IdentitySumAggregate: ["id"],
  IdentityMinAggregate: ["id", "name", "slug", "description"],
  IdentityMaxAggregate: ["id", "name", "slug", "description"],
  GoalCount: ["milestones"],
  GoalCountAggregate: ["id", "habitId", "goalId", "quantity", "_all"],
  GoalAvgAggregate: ["id", "habitId", "goalId", "quantity"],
  GoalSumAggregate: ["id", "habitId", "goalId", "quantity"],
  GoalMinAggregate: ["id", "habitId", "goalId", "quantity"],
  GoalMaxAggregate: ["id", "habitId", "goalId", "quantity"],
  IdentityActRelationCountAggregate: ["id", "identityId", "actionId", "archivedAt", "_all"],
  IdentityActRelationAvgAggregate: ["id", "identityId", "actionId"],
  IdentityActRelationSumAggregate: ["id", "identityId", "actionId"],
  IdentityActRelationMinAggregate: ["id", "identityId", "actionId", "archivedAt"],
  IdentityActRelationMaxAggregate: ["id", "identityId", "actionId", "archivedAt"],
  BeliefCount: ["belief"],
  BeliefCountAggregate: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  BeliefAvgAggregate: ["id"],
  BeliefSumAggregate: ["id"],
  BeliefMinAggregate: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  BeliefMaxAggregate: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  ValueCount: ["values"],
  ValueCountAggregate: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ValueAvgAggregate: ["id"],
  ValueSumAggregate: ["id"],
  ValueMinAggregate: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  ValueMaxAggregate: ["id", "name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  MantraCount: ["mantras"],
  MantraCountAggregate: ["id", "content", "createdAt", "updatedAt", "archivedAt", "_all"],
  MantraAvgAggregate: ["id"],
  MantraSumAggregate: ["id"],
  MantraMinAggregate: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraMaxAggregate: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  NotebookUserPermissionCountAggregate: ["id", "userId", "notebookId", "archivedAt", "_all"],
  NotebookUserPermissionAvgAggregate: ["id", "userId", "notebookId"],
  NotebookUserPermissionSumAggregate: ["id", "userId", "notebookId"],
  NotebookUserPermissionMinAggregate: ["id", "userId", "notebookId", "archivedAt"],
  NotebookUserPermissionMaxAggregate: ["id", "userId", "notebookId", "archivedAt"],
  NotebookCount: ["notes", "userPermissions"],
  NotebookCountAggregate: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  NotebookAvgAggregate: ["id", "ownerId"],
  NotebookSumAggregate: ["id", "ownerId"],
  NotebookMinAggregate: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookMaxAggregate: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteCountAggregate: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  NoteAvgAggregate: ["id", "notebookId"],
  NoteSumAggregate: ["id", "notebookId"],
  NoteMinAggregate: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteMaxAggregate: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListCount: ["items"],
  ListCountAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ListAvgAggregate: ["id", "ownerId"],
  ListSumAggregate: ["id", "ownerId"],
  ListMinAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListMaxAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ItemCountAggregate: ["id", "listId", "data", "createdAt", "updatedAt", "archivedAt", "_all"],
  ItemAvgAggregate: ["id", "listId"],
  ItemSumAggregate: ["id", "listId"],
  ItemMinAggregate: ["id", "listId", "createdAt", "updatedAt", "archivedAt"],
  ItemMaxAggregate: ["id", "listId", "createdAt", "updatedAt", "archivedAt"],
  AuthorCount: ["authorships"],
  AuthorCountAggregate: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt", "_all"],
  AuthorAvgAggregate: ["id"],
  AuthorSumAggregate: ["id"],
  AuthorMinAggregate: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorMaxAggregate: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorshipCountAggregate: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  AuthorshipAvgAggregate: ["id", "authorId", "bookId", "position"],
  AuthorshipSumAggregate: ["id", "authorId", "bookId", "position"],
  AuthorshipMinAggregate: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipMaxAggregate: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookCount: ["authorships", "readings", "shelvings", "BookReview"],
  BookCountAggregate: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  BookAvgAggregate: ["id", "publicationYear", "originalPublicationYear"],
  BookSumAggregate: ["id", "publicationYear", "originalPublicationYear"],
  BookMinAggregate: [
    "id",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookMaxAggregate: [
    "id",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingCountAggregate: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ReadingAvgAggregate: ["id", "userId", "bookId"],
  ReadingSumAggregate: ["id", "userId", "bookId"],
  ReadingMinAggregate: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingMaxAggregate: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfCount: ["shelvings"],
  BookshelfCountAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  BookshelfAvgAggregate: ["id", "ownerId"],
  BookshelfSumAggregate: ["id", "ownerId"],
  BookshelfMinAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfMaxAggregate: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingCountAggregate: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  ShelvingAvgAggregate: ["id", "bookId", "shelfId", "position"],
  ShelvingSumAggregate: ["id", "bookId", "shelfId", "position"],
  ShelvingMinAggregate: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingMaxAggregate: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewCountAggregate: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_all",
  ],
  BookReviewAvgAggregate: ["id", "rating", "bookId", "userId", "readingId"],
  BookReviewSumAggregate: ["id", "rating", "bookId", "userId", "readingId"],
  BookReviewMinAggregate: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewMaxAggregate: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(outputTypesEnhanceMap: OutputTypesEnhanceMap) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo]
    );
  }
}

const inputsInfo = {
  RedirectWhereInput: ["AND", "OR", "NOT", "id", "old_path", "new_path"],
  RedirectOrderByWithRelationInput: ["id", "old_path", "new_path"],
  RedirectWhereUniqueInput: ["id"],
  RedirectOrderByWithAggregationInput: [
    "id",
    "old_path",
    "new_path",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  RedirectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "old_path", "new_path"],
  AccountWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "calendars",
  ],
  AccountOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "calendars",
  ],
  AccountWhereUniqueInput: ["id", "provider_remoteId"],
  AccountOrderByWithAggregationInput: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  AccountScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  UserWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserOrderByWithRelationInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserWhereUniqueInput: ["id", "email"],
  UserOrderByWithAggregationInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  UserScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
  ],
  DashboardWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "userId",
    "user",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardOrderByWithRelationInput: [
    "id",
    "name",
    "userId",
    "user",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardWhereUniqueInput: ["id", "name_userId"],
  DashboardOrderByWithAggregationInput: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  DashboardScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "user",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "account",
    "accountId",
    "primary",
    "public",
    "enabled",
    "events",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarOrderByWithRelationInput: [
    "id",
    "uid",
    "user",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "account",
    "accountId",
    "primary",
    "public",
    "enabled",
    "events",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarWhereUniqueInput: ["id", "uid", "remoteId_accountId"],
  CalendarOrderByWithAggregationInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  CalendarScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "remoteId",
    "calendar",
    "calendarId",
    "user",
    "userId",
    "schedule",
    "scheduleId",
    "habit",
    "habitId",
    "task",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventOrderByWithRelationInput: [
    "id",
    "uid",
    "remoteId",
    "calendar",
    "calendarId",
    "schedule",
    "scheduleId",
    "habit",
    "habitId",
    "task",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventWhereUniqueInput: ["id", "uid", "remoteId_calendarId"],
  CalendarEventOrderByWithAggregationInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  CalendarEventScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ScheduleTemplateWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "frequency",
    "multiplier",
    "chron",
    "actionScheduleTemplates",
  ],
  ScheduleTemplateOrderByWithRelationInput: [
    "id",
    "frequency",
    "multiplier",
    "chron",
    "actionScheduleTemplates",
  ],
  ScheduleTemplateWhereUniqueInput: ["id"],
  ScheduleTemplateOrderByWithAggregationInput: [
    "id",
    "frequency",
    "multiplier",
    "chron",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ScheduleTemplateScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "frequency",
    "multiplier",
    "chron",
  ],
  CategoryWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "categorizations",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategoryOrderByWithRelationInput: [
    "id",
    "name",
    "categorizations",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategoryWhereUniqueInput: ["id"],
  CategoryOrderByWithAggregationInput: [
    "id",
    "name",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  CategoryScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "categoryId",
    "category",
    "actId",
    "act",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationOrderByWithRelationInput: [
    "id",
    "categoryId",
    "category",
    "actId",
    "act",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationWhereUniqueInput: ["id"],
  CategorizationOrderByWithAggregationInput: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  CategorizationScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parent",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActOrderByWithRelationInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parent",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActWhereUniqueInput: ["id", "slug"],
  ActOrderByWithAggregationInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ActScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "act",
    "metricId",
    "metric",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationOrderByWithRelationInput: [
    "id",
    "actId",
    "act",
    "metricId",
    "metric",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationWhereUniqueInput: ["id", "actId_metricId"],
  MetricApplicationOrderByWithAggregationInput: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  MetricApplicationScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricUsageWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "metricId",
    "metric",
    "habitId",
    "habit",
    "records",
    "archivedAt",
  ],
  MetricUsageOrderByWithRelationInput: [
    "id",
    "metricId",
    "metric",
    "habitId",
    "habit",
    "records",
    "archivedAt",
  ],
  MetricUsageWhereUniqueInput: ["id", "habitId_metricId"],
  MetricUsageOrderByWithAggregationInput: [
    "id",
    "metricId",
    "habitId",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  MetricUsageScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "metricId",
    "habitId",
    "archivedAt",
  ],
  MetricWhereInput: ["AND", "OR", "NOT", "id", "name", "applications", "usages"],
  MetricOrderByWithRelationInput: ["id", "name", "applications", "usages"],
  MetricWhereUniqueInput: ["id", "name"],
  MetricOrderByWithAggregationInput: ["id", "name", "_count", "_avg", "_max", "_min", "_sum"],
  MetricScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
  HabitWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "act",
    "userId",
    "user",
    "name",
    "isPublic",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "defaultDurationInMinutes",
    "actions",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitOrderByWithRelationInput: [
    "id",
    "actId",
    "act",
    "userId",
    "user",
    "name",
    "isPublic",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "defaultDurationInMinutes",
    "actions",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitWhereUniqueInput: ["id"],
  HabitOrderByWithAggregationInput: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  HabitScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "routine",
    "routineId",
    "habit",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitOrderByWithRelationInput: [
    "id",
    "routine",
    "routineId",
    "habit",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitWhereUniqueInput: ["id", "routineId_position"],
  RoutineHabitOrderByWithAggregationInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  RoutineHabitScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "name",
    "habits",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineOrderByWithRelationInput: [
    "id",
    "userId",
    "name",
    "habits",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineWhereUniqueInput: ["id"],
  RoutineOrderByWithAggregationInput: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  RoutineScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "metricUsageId",
    "metricUsage",
    "actionId",
    "action",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordOrderByWithRelationInput: [
    "id",
    "metricUsageId",
    "metricUsage",
    "actionId",
    "action",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordWhereUniqueInput: ["id"],
  MetricRecordOrderByWithAggregationInput: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  MetricRecordScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "user",
    "parentId",
    "parent",
    "habitId",
    "habit",
    "subtasks",
    "rank",
    "completedAt",
    "calendarEvents",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskOrderByWithRelationInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "user",
    "parentId",
    "parent",
    "habitId",
    "habit",
    "subtasks",
    "rank",
    "completedAt",
    "calendarEvents",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskWhereUniqueInput: ["id", "userId_parentId_rank"],
  TaskOrderByWithAggregationInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  TaskScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habit",
    "habitId",
    "start",
    "end",
    "notes",
    "metricRecords",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionOrderByWithRelationInput: [
    "id",
    "habit",
    "habitId",
    "start",
    "end",
    "notes",
    "metricRecords",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionWhereUniqueInput: ["id"],
  ActionOrderByWithAggregationInput: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ActionScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habit",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "calendarEvents",
    "active",
    "template",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleOrderByWithRelationInput: [
    "id",
    "habit",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "calendarEvents",
    "active",
    "template",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleWhereUniqueInput: ["id"],
  ActionScheduleOrderByWithAggregationInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ActionScheduleScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleTemplateWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "act",
    "actId",
    "scheduleTemplate",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
    "actionSchedules",
  ],
  ActionScheduleTemplateOrderByWithRelationInput: [
    "id",
    "act",
    "actId",
    "scheduleTemplate",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
    "actionSchedules",
  ],
  ActionScheduleTemplateWhereUniqueInput: ["id", "actId_frequency_multiplier"],
  ActionScheduleTemplateOrderByWithAggregationInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ActionScheduleTemplateScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  IdentityWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "identities",
    "actionRelations",
  ],
  IdentityOrderByWithRelationInput: [
    "id",
    "name",
    "slug",
    "description",
    "identities",
    "actionRelations",
  ],
  IdentityWhereUniqueInput: ["id", "slug"],
  IdentityOrderByWithAggregationInput: [
    "id",
    "name",
    "slug",
    "description",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  IdentityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "slug", "description"],
  GoalWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habit",
    "habitId",
    "goalId",
    "goal",
    "milestones",
    "quantity",
  ],
  GoalOrderByWithRelationInput: [
    "id",
    "habit",
    "habitId",
    "goalId",
    "goal",
    "milestones",
    "quantity",
  ],
  GoalWhereUniqueInput: ["id"],
  GoalOrderByWithAggregationInput: [
    "id",
    "habitId",
    "goalId",
    "quantity",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  GoalScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "habitId", "goalId", "quantity"],
  IdentityActRelationWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "identity",
    "identityId",
    "action",
    "actionId",
    "archivedAt",
  ],
  IdentityActRelationOrderByWithRelationInput: [
    "id",
    "identity",
    "identityId",
    "action",
    "actionId",
    "archivedAt",
  ],
  IdentityActRelationWhereUniqueInput: ["id", "identityId_actionId"],
  IdentityActRelationOrderByWithAggregationInput: [
    "id",
    "identityId",
    "actionId",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  IdentityActRelationScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "identityId",
    "actionId",
    "archivedAt",
  ],
  BeliefWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "belief",
  ],
  BeliefOrderByWithRelationInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "belief",
  ],
  BeliefWhereUniqueInput: ["id", "slug"],
  BeliefOrderByWithAggregationInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  BeliefScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "values",
  ],
  ValueOrderByWithRelationInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "values",
  ],
  ValueWhereUniqueInput: ["id", "slug"],
  ValueOrderByWithAggregationInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ValueScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MantraWhereInput: ["AND", "OR", "NOT", "id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraOrderByWithRelationInput: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraWhereUniqueInput: ["id"],
  MantraOrderByWithAggregationInput: [
    "id",
    "content",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  MantraScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "content",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "notebook",
    "notebookId",
    "archivedAt",
  ],
  NotebookUserPermissionOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "notebook",
    "notebookId",
    "archivedAt",
  ],
  NotebookUserPermissionWhereUniqueInput: ["id", "userId_notebookId"],
  NotebookUserPermissionOrderByWithAggregationInput: [
    "id",
    "userId",
    "notebookId",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  NotebookUserPermissionScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "notebookId",
    "archivedAt",
  ],
  NotebookWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "owner",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "notes",
    "userPermissions",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookOrderByWithRelationInput: [
    "id",
    "owner",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "notes",
    "userPermissions",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookWhereUniqueInput: ["id", "ownerId_title"],
  NotebookOrderByWithAggregationInput: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  NotebookScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "notebook",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteOrderByWithRelationInput: [
    "id",
    "notebook",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteWhereUniqueInput: ["id"],
  NoteOrderByWithAggregationInput: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  NoteScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "owner",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "items",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListOrderByWithRelationInput: [
    "id",
    "owner",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "items",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListWhereUniqueInput: ["id", "slug"],
  ListOrderByWithAggregationInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ListScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ItemWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "list",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ItemOrderByWithRelationInput: [
    "id",
    "list",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ItemWhereUniqueInput: ["id"],
  ItemOrderByWithAggregationInput: [
    "id",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ItemScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorships",
  ],
  AuthorOrderByWithRelationInput: [
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorships",
  ],
  AuthorWhereUniqueInput: ["id", "slug"],
  AuthorOrderByWithAggregationInput: [
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  AuthorScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "author",
    "authorId",
    "book",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipOrderByWithRelationInput: [
    "id",
    "author",
    "authorId",
    "book",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipWhereUniqueInput: ["id", "authorId_bookId"],
  AuthorshipOrderByWithAggregationInput: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  AuthorshipScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorships",
    "readings",
    "shelvings",
    "BookReview",
  ],
  BookOrderByWithRelationInput: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorships",
    "readings",
    "shelvings",
    "BookReview",
  ],
  BookWhereUniqueInput: ["id", "slug"],
  BookOrderByWithAggregationInput: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  BookScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "book",
    "bookId",
    "dateStarted",
    "dateFinished",
    "review",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "book",
    "bookId",
    "dateStarted",
    "dateFinished",
    "review",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingWhereUniqueInput: ["id"],
  ReadingOrderByWithAggregationInput: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ReadingScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "owner",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "shelvings",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfOrderByWithRelationInput: [
    "id",
    "owner",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "shelvings",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfWhereUniqueInput: ["id", "slug"],
  BookshelfOrderByWithAggregationInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  BookshelfScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "book",
    "bookId",
    "shelf",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingOrderByWithRelationInput: [
    "id",
    "book",
    "bookId",
    "shelf",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingWhereUniqueInput: ["id", "shelfId_position"],
  ShelvingOrderByWithAggregationInput: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ShelvingScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "review",
    "rating",
    "book",
    "bookId",
    "user",
    "userId",
    "reading",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewOrderByWithRelationInput: [
    "id",
    "review",
    "rating",
    "book",
    "bookId",
    "user",
    "userId",
    "reading",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewWhereUniqueInput: ["id", "readingId"],
  BookReviewOrderByWithAggregationInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  BookReviewScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RedirectCreateInput: ["old_path", "new_path"],
  RedirectUpdateInput: ["old_path", "new_path"],
  RedirectCreateManyInput: ["id", "old_path", "new_path"],
  RedirectUpdateManyMutationInput: ["old_path", "new_path"],
  AccountCreateInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "user",
    "calendars",
  ],
  AccountUpdateInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "user",
    "calendars",
  ],
  AccountCreateManyInput: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
  ],
  AccountUpdateManyMutationInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
  ],
  UserCreateInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserUpdateInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateManyInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
  ],
  UserUpdateManyMutationInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
  ],
  DashboardCreateInput: [
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
  ],
  DashboardUpdateInput: [
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
  ],
  DashboardCreateManyInput: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardUpdateManyMutationInput: [
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarCreateInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "account",
    "events",
  ],
  CalendarUpdateInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "account",
    "events",
  ],
  CalendarCreateManyInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarUpdateManyMutationInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventCreateInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "habit",
    "task",
  ],
  CalendarEventUpdateInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "habit",
    "task",
  ],
  CalendarEventCreateManyInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventUpdateManyMutationInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ScheduleTemplateCreateInput: ["frequency", "multiplier", "chron", "actionScheduleTemplates"],
  ScheduleTemplateUpdateInput: ["frequency", "multiplier", "chron", "actionScheduleTemplates"],
  ScheduleTemplateCreateManyInput: ["id", "frequency", "multiplier", "chron"],
  ScheduleTemplateUpdateManyMutationInput: ["frequency", "multiplier", "chron"],
  CategoryCreateInput: ["name", "createdAt", "updatedAt", "archivedAt", "categorizations"],
  CategoryUpdateInput: ["name", "createdAt", "updatedAt", "archivedAt", "categorizations"],
  CategoryCreateManyInput: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategoryUpdateManyMutationInput: ["name", "createdAt", "updatedAt", "archivedAt"],
  CategorizationCreateInput: ["createdAt", "updatedAt", "archivedAt", "category", "act"],
  CategorizationUpdateInput: ["createdAt", "updatedAt", "archivedAt", "category", "act"],
  CategorizationCreateManyInput: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationUpdateManyMutationInput: ["createdAt", "updatedAt", "archivedAt"],
  ActCreateInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActUpdateInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateManyInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActUpdateManyMutationInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationCreateInput: ["id", "createdAt", "updatedAt", "archivedAt", "act", "metric"],
  MetricApplicationUpdateInput: ["createdAt", "updatedAt", "archivedAt", "act", "metric"],
  MetricApplicationCreateManyInput: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationUpdateManyMutationInput: ["createdAt", "updatedAt", "archivedAt"],
  MetricUsageCreateInput: ["id", "archivedAt", "metric", "habit", "records"],
  MetricUsageUpdateInput: ["archivedAt", "metric", "habit", "records"],
  MetricUsageCreateManyInput: ["id", "metricId", "habitId", "archivedAt"],
  MetricUsageUpdateManyMutationInput: ["archivedAt"],
  MetricCreateInput: ["name", "applications", "usages"],
  MetricUpdateInput: ["name", "applications", "usages"],
  MetricCreateManyInput: ["id", "name"],
  MetricUpdateManyMutationInput: ["name"],
  HabitCreateInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitUpdateInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateManyInput: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitUpdateManyMutationInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitCreateInput: [
    "id",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "routine",
    "habit",
  ],
  RoutineHabitUpdateInput: [
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "routine",
    "habit",
  ],
  RoutineHabitCreateManyInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitUpdateManyMutationInput: [
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineCreateInput: [
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habits",
  ],
  RoutineUpdateInput: [
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habits",
  ],
  RoutineCreateManyInput: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineUpdateManyMutationInput: [
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordCreateInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricUsage",
    "action",
  ],
  MetricRecordUpdateInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricUsage",
    "action",
  ],
  MetricRecordCreateManyInput: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordUpdateManyMutationInput: ["value", "createdAt", "updatedAt", "archivedAt"],
  TaskCreateInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  TaskUpdateInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  TaskCreateManyInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskUpdateManyMutationInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionCreateInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "metricRecords",
  ],
  ActionUpdateInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "metricRecords",
  ],
  ActionCreateManyInput: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionUpdateManyMutationInput: ["start", "end", "notes", "createdAt", "updatedAt", "archivedAt"],
  ActionScheduleCreateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "calendarEvents",
    "template",
  ],
  ActionScheduleUpdateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "calendarEvents",
    "template",
  ],
  ActionScheduleCreateManyInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleUpdateManyMutationInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleTemplateCreateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "scheduleTemplate",
    "actionSchedules",
  ],
  ActionScheduleTemplateUpdateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "scheduleTemplate",
    "actionSchedules",
  ],
  ActionScheduleTemplateCreateManyInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateUpdateManyMutationInput: ["frequency", "multiplier", "quantity"],
  IdentityUpdateInput: ["name", "slug", "description", "actionRelations"],
  IdentityCreateManyInput: ["id", "name", "slug", "description"],
  IdentityUpdateManyMutationInput: ["name", "slug", "description"],
  GoalCreateInput: ["quantity", "habit", "goal", "milestones"],
  GoalUpdateInput: ["quantity", "habit", "goal", "milestones"],
  GoalCreateManyInput: ["id", "habitId", "goalId", "quantity"],
  GoalUpdateManyMutationInput: ["quantity"],
  IdentityActRelationCreateInput: ["archivedAt", "identity", "action"],
  IdentityActRelationUpdateInput: ["archivedAt", "identity", "action"],
  IdentityActRelationCreateManyInput: ["id", "identityId", "actionId", "archivedAt"],
  IdentityActRelationUpdateManyMutationInput: ["archivedAt"],
  BeliefCreateInput: ["name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  BeliefCreateManyInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BeliefUpdateManyMutationInput: [
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueCreateInput: ["name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  ValueUpdateInput: ["name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  ValueCreateManyInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueUpdateManyMutationInput: [
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MantraCreateInput: ["content", "createdAt", "updatedAt", "archivedAt"],
  MantraUpdateInput: ["content", "createdAt", "updatedAt", "archivedAt"],
  MantraCreateManyInput: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraUpdateManyMutationInput: ["content", "createdAt", "updatedAt", "archivedAt"],
  NotebookUserPermissionCreateInput: ["archivedAt", "user", "notebook"],
  NotebookUserPermissionUpdateInput: ["archivedAt", "user", "notebook"],
  NotebookUserPermissionCreateManyInput: ["id", "userId", "notebookId", "archivedAt"],
  NotebookUserPermissionUpdateManyMutationInput: ["archivedAt"],
  NotebookCreateInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "notes",
    "userPermissions",
  ],
  NotebookUpdateInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "notes",
    "userPermissions",
  ],
  NotebookCreateManyInput: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUpdateManyMutationInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteCreateInput: [
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "notebook",
  ],
  NoteUpdateInput: [
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "notebook",
  ],
  NoteCreateManyInput: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteUpdateManyMutationInput: [
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListCreateInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "items",
  ],
  ListUpdateInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "items",
  ],
  ListCreateManyInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListUpdateManyMutationInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ItemCreateInput: ["data", "createdAt", "updatedAt", "archivedAt", "list"],
  ItemUpdateInput: ["data", "createdAt", "updatedAt", "archivedAt", "list"],
  ItemCreateManyInput: ["id", "listId", "data", "createdAt", "updatedAt", "archivedAt"],
  ItemUpdateManyMutationInput: ["data", "createdAt", "updatedAt", "archivedAt"],
  AuthorCreateInput: ["name", "slug", "createdAt", "updatedAt", "archivedAt", "authorships"],
  AuthorUpdateInput: ["name", "slug", "createdAt", "updatedAt", "archivedAt", "authorships"],
  AuthorCreateManyInput: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorUpdateManyMutationInput: ["name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorshipCreateInput: ["position", "createdAt", "updatedAt", "archivedAt", "author", "book"],
  AuthorshipUpdateInput: ["position", "createdAt", "updatedAt", "archivedAt", "author", "book"],
  AuthorshipCreateManyInput: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipUpdateManyMutationInput: ["position", "createdAt", "updatedAt", "archivedAt"],
  BookCreateInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "shelvings",
    "BookReview",
  ],
  BookUpdateInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "shelvings",
    "BookReview",
  ],
  BookCreateManyInput: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
  ],
  BookUpdateManyMutationInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
  ],
  ReadingCreateInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "book",
    "review",
  ],
  ReadingUpdateInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "book",
    "review",
  ],
  ReadingCreateManyInput: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingUpdateManyMutationInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfCreateInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "shelvings",
  ],
  BookshelfUpdateInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "shelvings",
  ],
  BookshelfCreateManyInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfUpdateManyMutationInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingCreateInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "shelf",
  ],
  ShelvingUpdateInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "shelf",
  ],
  ShelvingCreateManyInput: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingUpdateManyMutationInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewCreateInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "user",
    "reading",
  ],
  BookReviewUpdateInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "user",
    "reading",
  ],
  BookReviewCreateManyInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewUpdateManyMutationInput: ["review", "rating", "createdAt", "updatedAt", "archivedAt"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  RedirectCountOrderByAggregateInput: ["id", "old_path", "new_path"],
  RedirectAvgOrderByAggregateInput: ["id"],
  RedirectMaxOrderByAggregateInput: ["id", "old_path", "new_path"],
  RedirectMinOrderByAggregateInput: ["id", "old_path", "new_path"],
  RedirectSumOrderByAggregateInput: ["id"],
  IntWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  StringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  UserRelationFilter: ["is", "isNot"],
  StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
  StringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  CalendarListRelationFilter: ["every", "some", "none"],
  CalendarOrderByRelationAggregateInput: ["_count"],
  AccountProviderRemoteIdCompoundUniqueInput: ["provider", "remoteId"],
  AccountCountOrderByAggregateInput: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  AccountAvgOrderByAggregateInput: ["id", "userId"],
  AccountMaxOrderByAggregateInput: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  AccountMinOrderByAggregateInput: [
    "id",
    "userId",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  AccountSumOrderByAggregateInput: ["id", "userId"],
  StringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  DateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  DateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  BoolFilter: ["equals", "not"],
  JsonFilter: ["equals", "not"],
  AccountListRelationFilter: ["every", "some", "none"],
  HabitListRelationFilter: ["every", "some", "none"],
  TaskListRelationFilter: ["every", "some", "none"],
  DashboardListRelationFilter: ["every", "some", "none"],
  NotebookListRelationFilter: ["every", "some", "none"],
  NotebookUserPermissionListRelationFilter: ["every", "some", "none"],
  ListListRelationFilter: ["every", "some", "none"],
  ReadingListRelationFilter: ["every", "some", "none"],
  BookshelfListRelationFilter: ["every", "some", "none"],
  BookReviewListRelationFilter: ["every", "some", "none"],
  AccountOrderByRelationAggregateInput: ["_count"],
  IdentityOrderByRelationAggregateInput: ["_count"],
  ValueOrderByRelationAggregateInput: ["_count"],
  BeliefOrderByRelationAggregateInput: ["_count"],
  HabitOrderByRelationAggregateInput: ["_count"],
  TaskOrderByRelationAggregateInput: ["_count"],
  DashboardOrderByRelationAggregateInput: ["_count"],
  NotebookOrderByRelationAggregateInput: ["_count"],
  NotebookUserPermissionOrderByRelationAggregateInput: ["_count"],
  ListOrderByRelationAggregateInput: ["_count"],
  ReadingOrderByRelationAggregateInput: ["_count"],
  BookshelfOrderByRelationAggregateInput: ["_count"],
  BookReviewOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
  ],
  UserAvgOrderByAggregateInput: ["id"],
  UserMaxOrderByAggregateInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "lastLogin",
  ],
  UserMinOrderByAggregateInput: [
    "id",
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "lastLogin",
  ],
  UserSumOrderByAggregateInput: ["id"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  JsonWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DashboardNameUserIdCompoundUniqueInput: ["name", "userId"],
  DashboardCountOrderByAggregateInput: [
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardAvgOrderByAggregateInput: ["id", "userId"],
  DashboardMaxOrderByAggregateInput: [
    "id",
    "name",
    "userId",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardMinOrderByAggregateInput: [
    "id",
    "name",
    "userId",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardSumOrderByAggregateInput: ["id", "userId"],
  EnumCalendarProviderNullableFilter: ["equals", "in", "notIn", "not"],
  AccountRelationFilter: ["is", "isNot"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolNullableFilter: ["equals", "not"],
  CalendarEventListRelationFilter: ["every", "some", "none"],
  CalendarEventOrderByRelationAggregateInput: ["_count"],
  CalendarRemoteIdAccountIdCompoundUniqueInput: ["remoteId", "accountId"],
  CalendarCountOrderByAggregateInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarAvgOrderByAggregateInput: ["id", "userId", "accountId"],
  CalendarMaxOrderByAggregateInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarMinOrderByAggregateInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarSumOrderByAggregateInput: ["id", "userId", "accountId"],
  EnumCalendarProviderNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  IntNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  CalendarRelationFilter: ["is", "isNot"],
  ActionScheduleRelationFilter: ["is", "isNot"],
  HabitRelationFilter: ["is", "isNot"],
  TaskRelationFilter: ["is", "isNot"],
  CalendarEventRemoteIdCalendarIdCompoundUniqueInput: ["remoteId", "calendarId"],
  CalendarEventCountOrderByAggregateInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventAvgOrderByAggregateInput: ["id", "calendarId", "scheduleId", "habitId", "taskId"],
  CalendarEventMaxOrderByAggregateInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventMinOrderByAggregateInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventSumOrderByAggregateInput: ["id", "calendarId", "scheduleId", "habitId", "taskId"],
  EnumFREQUENCYFilter: ["equals", "in", "notIn", "not"],
  ActionScheduleTemplateListRelationFilter: ["every", "some", "none"],
  ActionScheduleTemplateOrderByRelationAggregateInput: ["_count"],
  ScheduleTemplateCountOrderByAggregateInput: ["id", "frequency", "multiplier", "chron"],
  ScheduleTemplateAvgOrderByAggregateInput: ["id", "multiplier"],
  ScheduleTemplateMaxOrderByAggregateInput: ["id", "frequency", "multiplier", "chron"],
  ScheduleTemplateMinOrderByAggregateInput: ["id", "frequency", "multiplier", "chron"],
  ScheduleTemplateSumOrderByAggregateInput: ["id", "multiplier"],
  EnumFREQUENCYWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  CategorizationListRelationFilter: ["every", "some", "none"],
  CategorizationOrderByRelationAggregateInput: ["_count"],
  CategoryCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategoryAvgOrderByAggregateInput: ["id"],
  CategoryMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategoryMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "archivedAt"],
  CategorySumOrderByAggregateInput: ["id"],
  CategoryRelationFilter: ["is", "isNot"],
  ActRelationFilter: ["is", "isNot"],
  CategorizationCountOrderByAggregateInput: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationAvgOrderByAggregateInput: ["id", "categoryId", "actId"],
  CategorizationMaxOrderByAggregateInput: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationMinOrderByAggregateInput: [
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategorizationSumOrderByAggregateInput: ["id", "categoryId", "actId"],
  ActListRelationFilter: ["every", "some", "none"],
  MetricApplicationListRelationFilter: ["every", "some", "none"],
  IdentityActRelationListRelationFilter: ["every", "some", "none"],
  ActOrderByRelationAggregateInput: ["_count"],
  MetricApplicationOrderByRelationAggregateInput: ["_count"],
  IdentityActRelationOrderByRelationAggregateInput: ["_count"],
  ActCountOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActAvgOrderByAggregateInput: ["id", "parentId"],
  ActMaxOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActMinOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActSumOrderByAggregateInput: ["id", "parentId"],
  MetricRelationFilter: ["is", "isNot"],
  MetricApplicationActIdMetricIdCompoundUniqueInput: ["actId", "metricId"],
  MetricApplicationCountOrderByAggregateInput: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationAvgOrderByAggregateInput: ["id", "actId", "metricId"],
  MetricApplicationMaxOrderByAggregateInput: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationMinOrderByAggregateInput: [
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationSumOrderByAggregateInput: ["id", "actId", "metricId"],
  MetricRecordListRelationFilter: ["every", "some", "none"],
  MetricRecordOrderByRelationAggregateInput: ["_count"],
  MetricUsageHabitIdMetricIdCompoundUniqueInput: ["habitId", "metricId"],
  MetricUsageCountOrderByAggregateInput: ["id", "metricId", "habitId", "archivedAt"],
  MetricUsageAvgOrderByAggregateInput: ["id", "metricId", "habitId"],
  MetricUsageMaxOrderByAggregateInput: ["id", "metricId", "habitId", "archivedAt"],
  MetricUsageMinOrderByAggregateInput: ["id", "metricId", "habitId", "archivedAt"],
  MetricUsageSumOrderByAggregateInput: ["id", "metricId", "habitId"],
  MetricUsageListRelationFilter: ["every", "some", "none"],
  MetricUsageOrderByRelationAggregateInput: ["_count"],
  MetricCountOrderByAggregateInput: ["id", "name"],
  MetricAvgOrderByAggregateInput: ["id"],
  MetricMaxOrderByAggregateInput: ["id", "name"],
  MetricMinOrderByAggregateInput: ["id", "name"],
  MetricSumOrderByAggregateInput: ["id"],
  ActionScheduleListRelationFilter: ["every", "some", "none"],
  GoalListRelationFilter: ["every", "some", "none"],
  RoutineHabitListRelationFilter: ["every", "some", "none"],
  ActionListRelationFilter: ["every", "some", "none"],
  ActionScheduleOrderByRelationAggregateInput: ["_count"],
  GoalOrderByRelationAggregateInput: ["_count"],
  RoutineHabitOrderByRelationAggregateInput: ["_count"],
  ActionOrderByRelationAggregateInput: ["_count"],
  HabitCountOrderByAggregateInput: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitAvgOrderByAggregateInput: ["id", "actId", "userId", "defaultDurationInMinutes"],
  HabitMaxOrderByAggregateInput: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitMinOrderByAggregateInput: [
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitSumOrderByAggregateInput: ["id", "actId", "userId", "defaultDurationInMinutes"],
  RoutineRelationFilter: ["is", "isNot"],
  RoutineHabitRoutineIdPositionCompoundUniqueInput: ["routineId", "position"],
  RoutineHabitCountOrderByAggregateInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitAvgOrderByAggregateInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
  ],
  RoutineHabitMaxOrderByAggregateInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitMinOrderByAggregateInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitSumOrderByAggregateInput: [
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
  ],
  RoutineCountOrderByAggregateInput: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineAvgOrderByAggregateInput: ["id", "userId", "durationInMinutes"],
  RoutineMaxOrderByAggregateInput: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineMinOrderByAggregateInput: [
    "id",
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineSumOrderByAggregateInput: ["id", "userId", "durationInMinutes"],
  MetricUsageRelationFilter: ["is", "isNot"],
  ActionRelationFilter: ["is", "isNot"],
  MetricRecordCountOrderByAggregateInput: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordAvgOrderByAggregateInput: ["id", "metricUsageId", "actionId", "value"],
  MetricRecordMaxOrderByAggregateInput: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordMinOrderByAggregateInput: [
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordSumOrderByAggregateInput: ["id", "metricUsageId", "actionId", "value"],
  TaskUserIdParentIdRankCompoundUniqueInput: ["userId", "parentId", "rank"],
  TaskCountOrderByAggregateInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskAvgOrderByAggregateInput: ["id", "userId", "parentId", "habitId", "rank"],
  TaskMaxOrderByAggregateInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskMinOrderByAggregateInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskSumOrderByAggregateInput: ["id", "userId", "parentId", "habitId", "rank"],
  ActionCountOrderByAggregateInput: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionAvgOrderByAggregateInput: ["id", "habitId"],
  ActionMaxOrderByAggregateInput: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionMinOrderByAggregateInput: [
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionSumOrderByAggregateInput: ["id", "habitId"],
  ActionScheduleTemplateRelationFilter: ["is", "isNot"],
  ActionScheduleCountOrderByAggregateInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleAvgOrderByAggregateInput: ["id", "habitId", "multiplier", "quantity", "templateId"],
  ActionScheduleMaxOrderByAggregateInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleMinOrderByAggregateInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleSumOrderByAggregateInput: ["id", "habitId", "multiplier", "quantity", "templateId"],
  ScheduleTemplateRelationFilter: ["is", "isNot"],
  ActionScheduleTemplateActIdFrequencyMultiplierCompoundUniqueInput: [
    "actId",
    "frequency",
    "multiplier",
  ],
  ActionScheduleTemplateCountOrderByAggregateInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateAvgOrderByAggregateInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateMaxOrderByAggregateInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateMinOrderByAggregateInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateSumOrderByAggregateInput: [
    "id",
    "actId",
    "scheduleTemplateId",
    "multiplier",
    "quantity",
  ],
  IdentityRelationFilter: ["is", "isNot"],
  IdentityCountOrderByAggregateInput: ["id", "name", "slug", "description"],
  IdentityAvgOrderByAggregateInput: ["id"],
  IdentityMaxOrderByAggregateInput: ["id", "name", "slug", "description"],
  IdentityMinOrderByAggregateInput: ["id", "name", "slug", "description"],
  IdentitySumOrderByAggregateInput: ["id"],
  GoalRelationFilter: ["is", "isNot"],
  GoalCountOrderByAggregateInput: ["id", "habitId", "goalId", "quantity"],
  GoalAvgOrderByAggregateInput: ["id", "habitId", "goalId", "quantity"],
  GoalMaxOrderByAggregateInput: ["id", "habitId", "goalId", "quantity"],
  GoalMinOrderByAggregateInput: ["id", "habitId", "goalId", "quantity"],
  GoalSumOrderByAggregateInput: ["id", "habitId", "goalId", "quantity"],
  IdentityActRelationIdentityIdActionIdCompoundUniqueInput: ["identityId", "actionId"],
  IdentityActRelationCountOrderByAggregateInput: ["id", "identityId", "actionId", "archivedAt"],
  IdentityActRelationAvgOrderByAggregateInput: ["id", "identityId", "actionId"],
  IdentityActRelationMaxOrderByAggregateInput: ["id", "identityId", "actionId", "archivedAt"],
  IdentityActRelationMinOrderByAggregateInput: ["id", "identityId", "actionId", "archivedAt"],
  IdentityActRelationSumOrderByAggregateInput: ["id", "identityId", "actionId"],
  BeliefCountOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BeliefAvgOrderByAggregateInput: ["id"],
  BeliefMaxOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BeliefMinOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BeliefSumOrderByAggregateInput: ["id"],
  BeliefRelationFilter: ["is", "isNot"],
  ValueCountOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueAvgOrderByAggregateInput: ["id"],
  ValueMaxOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueMinOrderByAggregateInput: [
    "id",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ValueSumOrderByAggregateInput: ["id"],
  ValueRelationFilter: ["is", "isNot"],
  MantraCountOrderByAggregateInput: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraAvgOrderByAggregateInput: ["id"],
  MantraMaxOrderByAggregateInput: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraMinOrderByAggregateInput: ["id", "content", "createdAt", "updatedAt", "archivedAt"],
  MantraSumOrderByAggregateInput: ["id"],
  MantraRelationFilter: ["is", "isNot"],
  NotebookRelationFilter: ["is", "isNot"],
  NotebookUserPermissionUserIdNotebookIdCompoundUniqueInput: ["userId", "notebookId"],
  NotebookUserPermissionCountOrderByAggregateInput: ["id", "userId", "notebookId", "archivedAt"],
  NotebookUserPermissionAvgOrderByAggregateInput: ["id", "userId", "notebookId"],
  NotebookUserPermissionMaxOrderByAggregateInput: ["id", "userId", "notebookId", "archivedAt"],
  NotebookUserPermissionMinOrderByAggregateInput: ["id", "userId", "notebookId", "archivedAt"],
  NotebookUserPermissionSumOrderByAggregateInput: ["id", "userId", "notebookId"],
  NoteListRelationFilter: ["every", "some", "none"],
  NoteOrderByRelationAggregateInput: ["_count"],
  NotebookOwnerIdTitleCompoundUniqueInput: ["ownerId", "title"],
  NotebookCountOrderByAggregateInput: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookAvgOrderByAggregateInput: ["id", "ownerId"],
  NotebookMaxOrderByAggregateInput: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookMinOrderByAggregateInput: [
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookSumOrderByAggregateInput: ["id", "ownerId"],
  NoteCountOrderByAggregateInput: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteAvgOrderByAggregateInput: ["id", "notebookId"],
  NoteMaxOrderByAggregateInput: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteMinOrderByAggregateInput: [
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteSumOrderByAggregateInput: ["id", "notebookId"],
  ItemListRelationFilter: ["every", "some", "none"],
  ItemOrderByRelationAggregateInput: ["_count"],
  ListCountOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListAvgOrderByAggregateInput: ["id", "ownerId"],
  ListMaxOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListMinOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListSumOrderByAggregateInput: ["id", "ownerId"],
  ListRelationFilter: ["is", "isNot"],
  ItemCountOrderByAggregateInput: ["id", "listId", "data", "createdAt", "updatedAt", "archivedAt"],
  ItemAvgOrderByAggregateInput: ["id", "listId"],
  ItemMaxOrderByAggregateInput: ["id", "listId", "createdAt", "updatedAt", "archivedAt"],
  ItemMinOrderByAggregateInput: ["id", "listId", "createdAt", "updatedAt", "archivedAt"],
  ItemSumOrderByAggregateInput: ["id", "listId"],
  AuthorshipListRelationFilter: ["every", "some", "none"],
  AuthorshipOrderByRelationAggregateInput: ["_count"],
  AuthorCountOrderByAggregateInput: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorAvgOrderByAggregateInput: ["id"],
  AuthorMaxOrderByAggregateInput: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorMinOrderByAggregateInput: ["id", "name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorSumOrderByAggregateInput: ["id"],
  AuthorRelationFilter: ["is", "isNot"],
  BookRelationFilter: ["is", "isNot"],
  AuthorshipAuthorIdBookIdCompoundUniqueInput: ["authorId", "bookId"],
  AuthorshipCountOrderByAggregateInput: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipAvgOrderByAggregateInput: ["id", "authorId", "bookId", "position"],
  AuthorshipMaxOrderByAggregateInput: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipMinOrderByAggregateInput: [
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipSumOrderByAggregateInput: ["id", "authorId", "bookId", "position"],
  ShelvingListRelationFilter: ["every", "some", "none"],
  ShelvingOrderByRelationAggregateInput: ["_count"],
  BookCountOrderByAggregateInput: [
    "id",
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "authorNames",
    "authorNamesLf",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookAvgOrderByAggregateInput: ["id", "publicationYear", "originalPublicationYear"],
  BookMaxOrderByAggregateInput: [
    "id",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookMinOrderByAggregateInput: [
    "id",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookSumOrderByAggregateInput: ["id", "publicationYear", "originalPublicationYear"],
  BookReviewRelationFilter: ["is", "isNot"],
  ReadingCountOrderByAggregateInput: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingAvgOrderByAggregateInput: ["id", "userId", "bookId"],
  ReadingMaxOrderByAggregateInput: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingMinOrderByAggregateInput: [
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingSumOrderByAggregateInput: ["id", "userId", "bookId"],
  BookshelfCountOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfAvgOrderByAggregateInput: ["id", "ownerId"],
  BookshelfMaxOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfMinOrderByAggregateInput: [
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfSumOrderByAggregateInput: ["id", "ownerId"],
  BookshelfRelationFilter: ["is", "isNot"],
  ShelvingShelfIdPositionCompoundUniqueInput: ["shelfId", "position"],
  ShelvingCountOrderByAggregateInput: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingAvgOrderByAggregateInput: ["id", "bookId", "shelfId", "position"],
  ShelvingMaxOrderByAggregateInput: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingMinOrderByAggregateInput: [
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingSumOrderByAggregateInput: ["id", "bookId", "shelfId", "position"],
  ReadingRelationFilter: ["is", "isNot"],
  BookReviewCountOrderByAggregateInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewAvgOrderByAggregateInput: ["id", "rating", "bookId", "userId", "readingId"],
  BookReviewMaxOrderByAggregateInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewMinOrderByAggregateInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewSumOrderByAggregateInput: ["id", "rating", "bookId", "userId", "readingId"],
  StringFieldUpdateOperationsInput: ["set"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  AccountCreatescopesInput: ["set"],
  UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
  CalendarCreateNestedManyWithoutAccountInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  NullableStringFieldUpdateOperationsInput: ["set"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  AccountUpdatescopesInput: ["set", "push"],
  UserUpdateOneRequiredWithoutAccountsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  CalendarUpdateManyWithoutAccountInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  AccountCreateManyscopesInput: ["set"],
  AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  CalendarCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  IdentityCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  ValueCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  BeliefCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  HabitCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  TaskCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  DashboardCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  NotebookCreateNestedManyWithoutOwnerInput: ["create", "connectOrCreate", "createMany", "connect"],
  NotebookUserPermissionCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ListCreateNestedManyWithoutOwnerInput: ["create", "connectOrCreate", "createMany", "connect"],
  ReadingCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  BookshelfCreateNestedManyWithoutOwnerInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BookReviewCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BoolFieldUpdateOperationsInput: ["set"],
  AccountUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CalendarUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  IdentityUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ValueUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BeliefUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  HabitUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  TaskUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  DashboardUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  NotebookUpdateManyWithoutOwnerInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  NotebookUserPermissionUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ListUpdateManyWithoutOwnerInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ReadingUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BookshelfUpdateManyWithoutOwnerInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BookReviewUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutDashboardsInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutDashboardsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutCalendarsInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutCalendarsInput: ["create", "connectOrCreate", "connect"],
  CalendarEventCreateNestedManyWithoutCalendarInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  NullableEnumCalendarProviderFieldUpdateOperationsInput: ["set"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  UserUpdateOneRequiredWithoutCalendarsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  AccountUpdateOneWithoutCalendarsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  CalendarEventUpdateManyWithoutCalendarInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  CalendarCreateNestedOneWithoutEventsInput: ["create", "connectOrCreate", "connect"],
  ActionScheduleCreateNestedOneWithoutCalendarEventsInput: ["create", "connectOrCreate", "connect"],
  HabitCreateNestedOneWithoutCalendarEventsInput: ["create", "connectOrCreate", "connect"],
  TaskCreateNestedOneWithoutCalendarEventsInput: ["create", "connectOrCreate", "connect"],
  CalendarUpdateOneRequiredWithoutEventsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActionScheduleUpdateOneWithoutCalendarEventsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  HabitUpdateOneWithoutCalendarEventsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  TaskUpdateOneWithoutCalendarEventsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  ActionScheduleTemplateCreateNestedManyWithoutScheduleTemplateInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  EnumFREQUENCYFieldUpdateOperationsInput: ["set"],
  ActionScheduleTemplateUpdateManyWithoutScheduleTemplateInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CategorizationCreateNestedManyWithoutCategoryInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CategorizationUpdateManyWithoutCategoryInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CategoryCreateNestedOneWithoutCategorizationsInput: ["create", "connectOrCreate", "connect"],
  ActCreateNestedOneWithoutCategorizationsInput: ["create", "connectOrCreate", "connect"],
  CategoryUpdateOneRequiredWithoutCategorizationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActUpdateOneRequiredWithoutCategorizationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActCreateNestedOneWithoutVariantsInput: ["create", "connectOrCreate", "connect"],
  ActCreateNestedManyWithoutParentInput: ["create", "connectOrCreate", "createMany", "connect"],
  HabitCreateNestedManyWithoutActInput: ["create", "connectOrCreate", "createMany", "connect"],
  MetricApplicationCreateNestedManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  IdentityActRelationCreateNestedManyWithoutActionInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActionScheduleTemplateCreateNestedManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CategorizationCreateNestedManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActUpdateOneWithoutVariantsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  ActUpdateManyWithoutParentInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  HabitUpdateManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MetricApplicationUpdateManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  IdentityActRelationUpdateManyWithoutActionInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActionScheduleTemplateUpdateManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CategorizationUpdateManyWithoutActInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActCreateNestedOneWithoutMetricApplicationsInput: ["create", "connectOrCreate", "connect"],
  MetricCreateNestedOneWithoutApplicationsInput: ["create", "connectOrCreate", "connect"],
  ActUpdateOneRequiredWithoutMetricApplicationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  MetricUpdateOneRequiredWithoutApplicationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  MetricCreateNestedOneWithoutUsagesInput: ["create", "connectOrCreate", "connect"],
  HabitCreateNestedOneWithoutMetricUsagesInput: ["create", "connectOrCreate", "connect"],
  MetricRecordCreateNestedManyWithoutMetricUsageInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MetricUpdateOneRequiredWithoutUsagesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  HabitUpdateOneRequiredWithoutMetricUsagesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  MetricRecordUpdateManyWithoutMetricUsageInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MetricApplicationCreateNestedManyWithoutMetricInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MetricUsageCreateNestedManyWithoutMetricInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MetricApplicationUpdateManyWithoutMetricInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MetricUsageUpdateManyWithoutMetricInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActCreateNestedOneWithoutHabitsInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutHabitsInput: ["create", "connectOrCreate", "connect"],
  ActionScheduleCreateNestedManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  TaskCreateNestedManyWithoutHabitInput: ["create", "connectOrCreate", "createMany", "connect"],
  CalendarEventCreateNestedManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MetricUsageCreateNestedManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  GoalCreateNestedManyWithoutHabitInput: ["create", "connectOrCreate", "createMany", "connect"],
  RoutineHabitCreateNestedManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActionCreateNestedManyWithoutHabitInput: ["create", "connectOrCreate", "createMany", "connect"],
  ActUpdateOneRequiredWithoutHabitsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutHabitsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActionScheduleUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  TaskUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CalendarEventUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MetricUsageUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  GoalUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  RoutineHabitUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActionUpdateManyWithoutHabitInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  RoutineCreateNestedOneWithoutHabitsInput: ["create", "connectOrCreate", "connect"],
  HabitCreateNestedOneWithoutRoutinesInput: ["create", "connectOrCreate", "connect"],
  RoutineUpdateOneRequiredWithoutHabitsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  HabitUpdateOneRequiredWithoutRoutinesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  RoutineHabitCreateNestedManyWithoutRoutineInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  RoutineHabitUpdateManyWithoutRoutineInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MetricUsageCreateNestedOneWithoutRecordsInput: ["create", "connectOrCreate", "connect"],
  ActionCreateNestedOneWithoutMetricRecordsInput: ["create", "connectOrCreate", "connect"],
  MetricUsageUpdateOneRequiredWithoutRecordsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActionUpdateOneRequiredWithoutMetricRecordsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutTasksInput: ["create", "connectOrCreate", "connect"],
  TaskCreateNestedOneWithoutSubtasksInput: ["create", "connectOrCreate", "connect"],
  HabitCreateNestedOneWithoutTasksInput: ["create", "connectOrCreate", "connect"],
  TaskCreateNestedManyWithoutParentInput: ["create", "connectOrCreate", "createMany", "connect"],
  CalendarEventCreateNestedManyWithoutTaskInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  UserUpdateOneRequiredWithoutTasksInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  TaskUpdateOneWithoutSubtasksInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  HabitUpdateOneWithoutTasksInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  TaskUpdateManyWithoutParentInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CalendarEventUpdateManyWithoutTaskInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  HabitCreateNestedOneWithoutActionsInput: ["create", "connectOrCreate", "connect"],
  MetricRecordCreateNestedManyWithoutActionInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  HabitUpdateOneWithoutActionsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  MetricRecordUpdateManyWithoutActionInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  HabitCreateNestedOneWithoutSchedulesInput: ["create", "connectOrCreate", "connect"],
  CalendarEventCreateNestedManyWithoutScheduleInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActionScheduleTemplateCreateNestedOneWithoutActionSchedulesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  HabitUpdateOneRequiredWithoutSchedulesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  CalendarEventUpdateManyWithoutScheduleInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActionScheduleTemplateUpdateOneWithoutActionSchedulesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  ActCreateNestedOneWithoutScheduleTemplatesInput: ["create", "connectOrCreate", "connect"],
  ScheduleTemplateCreateNestedOneWithoutActionScheduleTemplatesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  ActionScheduleCreateNestedManyWithoutTemplateInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActUpdateOneRequiredWithoutScheduleTemplatesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ScheduleTemplateUpdateOneRequiredWithoutActionScheduleTemplatesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActionScheduleUpdateManyWithoutTemplateInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutIdentitiesInput: ["create", "connectOrCreate", "connect"],
  IdentityCreateNestedOneWithoutIdentitiesInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutIdentitiesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  IdentityActRelationCreateNestedManyWithoutIdentityInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  HabitCreateNestedOneWithoutGoalsInput: ["create", "connectOrCreate", "connect"],
  GoalCreateNestedOneWithoutMilestonesInput: ["create", "connectOrCreate", "connect"],
  GoalCreateNestedManyWithoutGoalInput: ["create", "connectOrCreate", "createMany", "connect"],
  HabitUpdateOneRequiredWithoutGoalsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  GoalUpdateOneWithoutMilestonesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  GoalUpdateManyWithoutGoalInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  IdentityCreateNestedOneWithoutActionRelationsInput: ["create", "connectOrCreate", "connect"],
  ActCreateNestedOneWithoutIdentityRelationsInput: ["create", "connectOrCreate", "connect"],
  IdentityUpdateOneRequiredWithoutActionRelationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ActUpdateOneRequiredWithoutIdentityRelationsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BeliefUpdateManyInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutBeliefsInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutBeliefsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BeliefUpdateOneRequiredInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserCreateNestedOneWithoutValuesInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutValuesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutMantrasInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutMantrasInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutNotebookPermissionsInput: ["create", "connectOrCreate", "connect"],
  NotebookCreateNestedOneWithoutUserPermissionsInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutNotebookPermissionsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  NotebookUpdateOneRequiredWithoutUserPermissionsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutNotebooksInput: ["create", "connectOrCreate", "connect"],
  NoteCreateNestedManyWithoutNotebookInput: ["create", "connectOrCreate", "createMany", "connect"],
  NotebookUserPermissionCreateNestedManyWithoutNotebookInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  UserUpdateOneRequiredWithoutNotebooksInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  NoteUpdateManyWithoutNotebookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  NotebookUserPermissionUpdateManyWithoutNotebookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  NotebookCreateNestedOneWithoutNotesInput: ["create", "connectOrCreate", "connect"],
  NotebookUpdateOneRequiredWithoutNotesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutListsInput: ["create", "connectOrCreate", "connect"],
  ItemCreateNestedManyWithoutListInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneRequiredWithoutListsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ItemUpdateManyWithoutListInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ListCreateNestedOneWithoutItemsInput: ["create", "connectOrCreate", "connect"],
  ListUpdateOneRequiredWithoutItemsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  AuthorshipCreateNestedManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  AuthorshipUpdateManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  AuthorCreateNestedOneWithoutAuthorshipsInput: ["create", "connectOrCreate", "connect"],
  BookCreateNestedOneWithoutAuthorshipsInput: ["create", "connectOrCreate", "connect"],
  AuthorUpdateOneRequiredWithoutAuthorshipsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookUpdateOneRequiredWithoutAuthorshipsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookCreateauthorNamesInput: ["set"],
  BookCreateauthorNamesLfInput: ["set"],
  AuthorshipCreateNestedManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ReadingCreateNestedManyWithoutBookInput: ["create", "connectOrCreate", "createMany", "connect"],
  ShelvingCreateNestedManyWithoutBookInput: ["create", "connectOrCreate", "createMany", "connect"],
  BookReviewCreateNestedManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BookUpdateauthorNamesInput: ["set", "push"],
  BookUpdateauthorNamesLfInput: ["set", "push"],
  AuthorshipUpdateManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ReadingUpdateManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ShelvingUpdateManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BookReviewUpdateManyWithoutBookInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BookCreateManyauthorNamesInput: ["set"],
  BookCreateManyauthorNamesLfInput: ["set"],
  UserCreateNestedOneWithoutReadingsInput: ["create", "connectOrCreate", "connect"],
  BookCreateNestedOneWithoutReadingsInput: ["create", "connectOrCreate", "connect"],
  BookReviewCreateNestedOneWithoutReadingInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutReadingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookUpdateOneRequiredWithoutReadingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookReviewUpdateOneWithoutReadingInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutBookshelvesInput: ["create", "connectOrCreate", "connect"],
  ShelvingCreateNestedManyWithoutShelfInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneRequiredWithoutBookshelvesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ShelvingUpdateManyWithoutShelfInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BookCreateNestedOneWithoutShelvingsInput: ["create", "connectOrCreate", "connect"],
  BookshelfCreateNestedOneWithoutShelvingsInput: ["create", "connectOrCreate", "connect"],
  BookUpdateOneRequiredWithoutShelvingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookshelfUpdateOneRequiredWithoutShelvingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  BookCreateNestedOneWithoutBookReviewInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutBookReviewsInput: ["create", "connectOrCreate", "connect"],
  ReadingCreateNestedOneWithoutReviewInput: ["create", "connectOrCreate", "connect"],
  BookUpdateOneRequiredWithoutBookReviewInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutBookReviewsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ReadingUpdateOneWithoutReviewInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedIntWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedStringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedDateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedBoolFilter: ["equals", "not"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedJsonFilter: ["equals", "not"],
  NestedEnumCalendarProviderNullableFilter: ["equals", "in", "notIn", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedEnumCalendarProviderNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedEnumFREQUENCYFilter: ["equals", "in", "notIn", "not"],
  NestedEnumFREQUENCYWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  UserCreateWithoutAccountsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
  CalendarCreateWithoutAccountInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "events",
  ],
  CalendarCreateOrConnectWithoutAccountInput: ["where", "create"],
  CalendarCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutAccountsInput: ["update", "create"],
  UserUpdateWithoutAccountsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  CalendarUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  CalendarUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  CalendarUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  CalendarScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AccountCreateWithoutUserInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "calendars",
  ],
  AccountCreateOrConnectWithoutUserInput: ["where", "create"],
  AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  CalendarCreateWithoutUserInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "account",
    "events",
  ],
  CalendarCreateOrConnectWithoutUserInput: ["where", "create"],
  CalendarCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  IdentityCreateWithoutUserInput: ["archivedAt", "identity"],
  IdentityCreateOrConnectWithoutUserInput: ["where", "create"],
  IdentityCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ValueCreateWithoutUserInput: ["createdAt", "updatedAt", "archivedAt", "value"],
  ValueCreateOrConnectWithoutUserInput: ["where", "create"],
  ValueCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  BeliefCreateWithoutUserInput: ["createdAt", "updatedAt", "archivedAt", "belief"],
  BeliefCreateOrConnectWithoutUserInput: ["where", "create"],
  BeliefCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  HabitCreateWithoutUserInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutUserInput: ["where", "create"],
  HabitCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  TaskCreateWithoutUserInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  TaskCreateOrConnectWithoutUserInput: ["where", "create"],
  TaskCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  DashboardCreateWithoutUserInput: [
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardCreateOrConnectWithoutUserInput: ["where", "create"],
  DashboardCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  NotebookCreateWithoutOwnerInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "notes",
    "userPermissions",
  ],
  NotebookCreateOrConnectWithoutOwnerInput: ["where", "create"],
  NotebookCreateManyOwnerInputEnvelope: ["data", "skipDuplicates"],
  NotebookUserPermissionCreateWithoutUserInput: ["archivedAt", "notebook"],
  NotebookUserPermissionCreateOrConnectWithoutUserInput: ["where", "create"],
  NotebookUserPermissionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ListCreateWithoutOwnerInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "items",
  ],
  ListCreateOrConnectWithoutOwnerInput: ["where", "create"],
  ListCreateManyOwnerInputEnvelope: ["data", "skipDuplicates"],
  ReadingCreateWithoutUserInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "review",
  ],
  ReadingCreateOrConnectWithoutUserInput: ["where", "create"],
  ReadingCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  BookshelfCreateWithoutOwnerInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "shelvings",
  ],
  BookshelfCreateOrConnectWithoutOwnerInput: ["where", "create"],
  BookshelfCreateManyOwnerInputEnvelope: ["data", "skipDuplicates"],
  BookReviewCreateWithoutUserInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "reading",
  ],
  BookReviewCreateOrConnectWithoutUserInput: ["where", "create"],
  BookReviewCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  AccountScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "provider",
    "remoteId",
    "scopes",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
  ],
  CalendarUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  CalendarUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  CalendarUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  IdentityUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  IdentityUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  IdentityUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  IdentityScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "identityId", "archivedAt"],
  ValueUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ValueUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ValueUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  BeliefUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  BeliefUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  BeliefUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  HabitUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  HabitUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  HabitUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  HabitScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  TaskScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  DashboardUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  DashboardUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  DashboardScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "userId",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUpsertWithWhereUniqueWithoutOwnerInput: ["where", "update", "create"],
  NotebookUpdateWithWhereUniqueWithoutOwnerInput: ["where", "data"],
  NotebookUpdateManyWithWhereWithoutOwnerInput: ["where", "data"],
  NotebookScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  NotebookUserPermissionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  NotebookUserPermissionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  NotebookUserPermissionScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "notebookId",
    "archivedAt",
  ],
  ListUpsertWithWhereUniqueWithoutOwnerInput: ["where", "update", "create"],
  ListUpdateWithWhereUniqueWithoutOwnerInput: ["where", "data"],
  ListUpdateManyWithWhereWithoutOwnerInput: ["where", "data"],
  ListScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ReadingUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ReadingUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ReadingScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfUpsertWithWhereUniqueWithoutOwnerInput: ["where", "update", "create"],
  BookshelfUpdateWithWhereUniqueWithoutOwnerInput: ["where", "data"],
  BookshelfUpdateManyWithWhereWithoutOwnerInput: ["where", "data"],
  BookshelfScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "ownerId",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  BookReviewUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  BookReviewUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  BookReviewScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "review",
    "rating",
    "bookId",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  UserCreateWithoutDashboardsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutDashboardsInput: ["where", "create"],
  UserUpsertWithoutDashboardsInput: ["update", "create"],
  UserUpdateWithoutDashboardsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateWithoutCalendarsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutCalendarsInput: ["where", "create"],
  AccountCreateWithoutCalendarsInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "user",
  ],
  AccountCreateOrConnectWithoutCalendarsInput: ["where", "create"],
  CalendarEventCreateWithoutCalendarInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "schedule",
    "habit",
    "task",
  ],
  CalendarEventCreateOrConnectWithoutCalendarInput: ["where", "create"],
  CalendarEventCreateManyCalendarInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutCalendarsInput: ["update", "create"],
  UserUpdateWithoutCalendarsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  AccountUpsertWithoutCalendarsInput: ["update", "create"],
  AccountUpdateWithoutCalendarsInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "user",
  ],
  CalendarEventUpsertWithWhereUniqueWithoutCalendarInput: ["where", "update", "create"],
  CalendarEventUpdateWithWhereUniqueWithoutCalendarInput: ["where", "data"],
  CalendarEventUpdateManyWithWhereWithoutCalendarInput: ["where", "data"],
  CalendarEventScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarCreateWithoutEventsInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "account",
  ],
  CalendarCreateOrConnectWithoutEventsInput: ["where", "create"],
  ActionScheduleCreateWithoutCalendarEventsInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "template",
  ],
  ActionScheduleCreateOrConnectWithoutCalendarEventsInput: ["where", "create"],
  HabitCreateWithoutCalendarEventsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutCalendarEventsInput: ["where", "create"],
  TaskCreateWithoutCalendarEventsInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "subtasks",
  ],
  TaskCreateOrConnectWithoutCalendarEventsInput: ["where", "create"],
  CalendarUpsertWithoutEventsInput: ["update", "create"],
  CalendarUpdateWithoutEventsInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "account",
  ],
  ActionScheduleUpsertWithoutCalendarEventsInput: ["update", "create"],
  ActionScheduleUpdateWithoutCalendarEventsInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "template",
  ],
  HabitUpsertWithoutCalendarEventsInput: ["update", "create"],
  HabitUpdateWithoutCalendarEventsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  TaskUpsertWithoutCalendarEventsInput: ["update", "create"],
  TaskUpdateWithoutCalendarEventsInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "subtasks",
  ],
  ActionScheduleTemplateCreateWithoutScheduleTemplateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "actionSchedules",
  ],
  ActionScheduleTemplateCreateOrConnectWithoutScheduleTemplateInput: ["where", "create"],
  ActionScheduleTemplateCreateManyScheduleTemplateInputEnvelope: ["data", "skipDuplicates"],
  ActionScheduleTemplateUpsertWithWhereUniqueWithoutScheduleTemplateInput: [
    "where",
    "update",
    "create",
  ],
  ActionScheduleTemplateUpdateWithWhereUniqueWithoutScheduleTemplateInput: ["where", "data"],
  ActionScheduleTemplateUpdateManyWithWhereWithoutScheduleTemplateInput: ["where", "data"],
  ActionScheduleTemplateScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  CategorizationCreateWithoutCategoryInput: ["createdAt", "updatedAt", "archivedAt", "act"],
  CategorizationCreateOrConnectWithoutCategoryInput: ["where", "create"],
  CategorizationCreateManyCategoryInputEnvelope: ["data", "skipDuplicates"],
  CategorizationUpsertWithWhereUniqueWithoutCategoryInput: ["where", "update", "create"],
  CategorizationUpdateWithWhereUniqueWithoutCategoryInput: ["where", "data"],
  CategorizationUpdateManyWithWhereWithoutCategoryInput: ["where", "data"],
  CategorizationScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "categoryId",
    "actId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CategoryCreateWithoutCategorizationsInput: ["name", "createdAt", "updatedAt", "archivedAt"],
  CategoryCreateOrConnectWithoutCategorizationsInput: ["where", "create"],
  ActCreateWithoutCategorizationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
  ],
  ActCreateOrConnectWithoutCategorizationsInput: ["where", "create"],
  CategoryUpsertWithoutCategorizationsInput: ["update", "create"],
  CategoryUpdateWithoutCategorizationsInput: ["name", "createdAt", "updatedAt", "archivedAt"],
  ActUpsertWithoutCategorizationsInput: ["update", "create"],
  ActUpdateWithoutCategorizationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
  ],
  ActCreateWithoutVariantsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateOrConnectWithoutVariantsInput: ["where", "create"],
  ActCreateWithoutParentInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateOrConnectWithoutParentInput: ["where", "create"],
  ActCreateManyParentInputEnvelope: ["data", "skipDuplicates"],
  HabitCreateWithoutActInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutActInput: ["where", "create"],
  HabitCreateManyActInputEnvelope: ["data", "skipDuplicates"],
  MetricApplicationCreateWithoutActInput: ["id", "createdAt", "updatedAt", "archivedAt", "metric"],
  MetricApplicationCreateOrConnectWithoutActInput: ["where", "create"],
  MetricApplicationCreateManyActInputEnvelope: ["data", "skipDuplicates"],
  IdentityActRelationCreateWithoutActionInput: ["archivedAt", "identity"],
  IdentityActRelationCreateOrConnectWithoutActionInput: ["where", "create"],
  IdentityActRelationCreateManyActionInputEnvelope: ["data", "skipDuplicates"],
  ActionScheduleTemplateCreateWithoutActInput: [
    "frequency",
    "multiplier",
    "quantity",
    "scheduleTemplate",
    "actionSchedules",
  ],
  ActionScheduleTemplateCreateOrConnectWithoutActInput: ["where", "create"],
  ActionScheduleTemplateCreateManyActInputEnvelope: ["data", "skipDuplicates"],
  CategorizationCreateWithoutActInput: ["createdAt", "updatedAt", "archivedAt", "category"],
  CategorizationCreateOrConnectWithoutActInput: ["where", "create"],
  CategorizationCreateManyActInputEnvelope: ["data", "skipDuplicates"],
  ActUpsertWithoutVariantsInput: ["update", "create"],
  ActUpdateWithoutVariantsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActUpsertWithWhereUniqueWithoutParentInput: ["where", "update", "create"],
  ActUpdateWithWhereUniqueWithoutParentInput: ["where", "data"],
  ActUpdateManyWithWhereWithoutParentInput: ["where", "data"],
  ActScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "parentId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitUpsertWithWhereUniqueWithoutActInput: ["where", "update", "create"],
  HabitUpdateWithWhereUniqueWithoutActInput: ["where", "data"],
  HabitUpdateManyWithWhereWithoutActInput: ["where", "data"],
  MetricApplicationUpsertWithWhereUniqueWithoutActInput: ["where", "update", "create"],
  MetricApplicationUpdateWithWhereUniqueWithoutActInput: ["where", "data"],
  MetricApplicationUpdateManyWithWhereWithoutActInput: ["where", "data"],
  MetricApplicationScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "actId",
    "metricId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  IdentityActRelationUpsertWithWhereUniqueWithoutActionInput: ["where", "update", "create"],
  IdentityActRelationUpdateWithWhereUniqueWithoutActionInput: ["where", "data"],
  IdentityActRelationUpdateManyWithWhereWithoutActionInput: ["where", "data"],
  IdentityActRelationScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "identityId",
    "actionId",
    "archivedAt",
  ],
  ActionScheduleTemplateUpsertWithWhereUniqueWithoutActInput: ["where", "update", "create"],
  ActionScheduleTemplateUpdateWithWhereUniqueWithoutActInput: ["where", "data"],
  ActionScheduleTemplateUpdateManyWithWhereWithoutActInput: ["where", "data"],
  CategorizationUpsertWithWhereUniqueWithoutActInput: ["where", "update", "create"],
  CategorizationUpdateWithWhereUniqueWithoutActInput: ["where", "data"],
  CategorizationUpdateManyWithWhereWithoutActInput: ["where", "data"],
  ActCreateWithoutMetricApplicationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateOrConnectWithoutMetricApplicationsInput: ["where", "create"],
  MetricCreateWithoutApplicationsInput: ["name", "usages"],
  MetricCreateOrConnectWithoutApplicationsInput: ["where", "create"],
  ActUpsertWithoutMetricApplicationsInput: ["update", "create"],
  ActUpdateWithoutMetricApplicationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  MetricUpsertWithoutApplicationsInput: ["update", "create"],
  MetricUpdateWithoutApplicationsInput: ["name", "usages"],
  MetricCreateWithoutUsagesInput: ["name", "applications"],
  MetricCreateOrConnectWithoutUsagesInput: ["where", "create"],
  HabitCreateWithoutMetricUsagesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutMetricUsagesInput: ["where", "create"],
  MetricRecordCreateWithoutMetricUsageInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "action",
  ],
  MetricRecordCreateOrConnectWithoutMetricUsageInput: ["where", "create"],
  MetricRecordCreateManyMetricUsageInputEnvelope: ["data", "skipDuplicates"],
  MetricUpsertWithoutUsagesInput: ["update", "create"],
  MetricUpdateWithoutUsagesInput: ["name", "applications"],
  HabitUpsertWithoutMetricUsagesInput: ["update", "create"],
  HabitUpdateWithoutMetricUsagesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "goals",
    "routines",
    "actions",
  ],
  MetricRecordUpsertWithWhereUniqueWithoutMetricUsageInput: ["where", "update", "create"],
  MetricRecordUpdateWithWhereUniqueWithoutMetricUsageInput: ["where", "data"],
  MetricRecordUpdateManyWithWhereWithoutMetricUsageInput: ["where", "data"],
  MetricRecordScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "metricUsageId",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationCreateWithoutMetricInput: ["id", "createdAt", "updatedAt", "archivedAt", "act"],
  MetricApplicationCreateOrConnectWithoutMetricInput: ["where", "create"],
  MetricApplicationCreateManyMetricInputEnvelope: ["data", "skipDuplicates"],
  MetricUsageCreateWithoutMetricInput: ["id", "archivedAt", "habit", "records"],
  MetricUsageCreateOrConnectWithoutMetricInput: ["where", "create"],
  MetricUsageCreateManyMetricInputEnvelope: ["data", "skipDuplicates"],
  MetricApplicationUpsertWithWhereUniqueWithoutMetricInput: ["where", "update", "create"],
  MetricApplicationUpdateWithWhereUniqueWithoutMetricInput: ["where", "data"],
  MetricApplicationUpdateManyWithWhereWithoutMetricInput: ["where", "data"],
  MetricUsageUpsertWithWhereUniqueWithoutMetricInput: ["where", "update", "create"],
  MetricUsageUpdateWithWhereUniqueWithoutMetricInput: ["where", "data"],
  MetricUsageUpdateManyWithWhereWithoutMetricInput: ["where", "data"],
  MetricUsageScalarWhereInput: ["AND", "OR", "NOT", "id", "metricId", "habitId", "archivedAt"],
  ActCreateWithoutHabitsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateOrConnectWithoutHabitsInput: ["where", "create"],
  UserCreateWithoutHabitsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutHabitsInput: ["where", "create"],
  ActionScheduleCreateWithoutHabitInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendarEvents",
    "template",
  ],
  ActionScheduleCreateOrConnectWithoutHabitInput: ["where", "create"],
  ActionScheduleCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  TaskCreateWithoutHabitInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "subtasks",
    "calendarEvents",
  ],
  TaskCreateOrConnectWithoutHabitInput: ["where", "create"],
  TaskCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  CalendarEventCreateWithoutHabitInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "task",
  ],
  CalendarEventCreateOrConnectWithoutHabitInput: ["where", "create"],
  CalendarEventCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  MetricUsageCreateWithoutHabitInput: ["id", "archivedAt", "metric", "records"],
  MetricUsageCreateOrConnectWithoutHabitInput: ["where", "create"],
  MetricUsageCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  GoalCreateWithoutHabitInput: ["quantity", "goal", "milestones"],
  GoalCreateOrConnectWithoutHabitInput: ["where", "create"],
  GoalCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  RoutineHabitCreateWithoutHabitInput: [
    "id",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "routine",
  ],
  RoutineHabitCreateOrConnectWithoutHabitInput: ["where", "create"],
  RoutineHabitCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  ActionCreateWithoutHabitInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricRecords",
  ],
  ActionCreateOrConnectWithoutHabitInput: ["where", "create"],
  ActionCreateManyHabitInputEnvelope: ["data", "skipDuplicates"],
  ActUpsertWithoutHabitsInput: ["update", "create"],
  ActUpdateWithoutHabitsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  UserUpsertWithoutHabitsInput: ["update", "create"],
  UserUpdateWithoutHabitsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  ActionScheduleUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  ActionScheduleUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  ActionScheduleUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  ActionScheduleScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  CalendarEventUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  CalendarEventUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  CalendarEventUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  MetricUsageUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  MetricUsageUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  MetricUsageUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  GoalUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  GoalUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  GoalUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  GoalScalarWhereInput: ["AND", "OR", "NOT", "id", "habitId", "goalId", "quantity"],
  RoutineHabitUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  RoutineHabitUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  RoutineHabitUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  RoutineHabitScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "routineId",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionUpsertWithWhereUniqueWithoutHabitInput: ["where", "update", "create"],
  ActionUpdateWithWhereUniqueWithoutHabitInput: ["where", "data"],
  ActionUpdateManyWithWhereWithoutHabitInput: ["where", "data"],
  ActionScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "habitId",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineCreateWithoutHabitsInput: [
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineCreateOrConnectWithoutHabitsInput: ["where", "create"],
  HabitCreateWithoutRoutinesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "actions",
  ],
  HabitCreateOrConnectWithoutRoutinesInput: ["where", "create"],
  RoutineUpsertWithoutHabitsInput: ["update", "create"],
  RoutineUpdateWithoutHabitsInput: [
    "userId",
    "name",
    "durationInMinutes",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitUpsertWithoutRoutinesInput: ["update", "create"],
  HabitUpdateWithoutRoutinesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "actions",
  ],
  RoutineHabitCreateWithoutRoutineInput: [
    "id",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
  ],
  RoutineHabitCreateOrConnectWithoutRoutineInput: ["where", "create"],
  RoutineHabitCreateManyRoutineInputEnvelope: ["data", "skipDuplicates"],
  RoutineHabitUpsertWithWhereUniqueWithoutRoutineInput: ["where", "update", "create"],
  RoutineHabitUpdateWithWhereUniqueWithoutRoutineInput: ["where", "data"],
  RoutineHabitUpdateManyWithWhereWithoutRoutineInput: ["where", "data"],
  MetricUsageCreateWithoutRecordsInput: ["id", "archivedAt", "metric", "habit"],
  MetricUsageCreateOrConnectWithoutRecordsInput: ["where", "create"],
  ActionCreateWithoutMetricRecordsInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
  ],
  ActionCreateOrConnectWithoutMetricRecordsInput: ["where", "create"],
  MetricUsageUpsertWithoutRecordsInput: ["update", "create"],
  MetricUsageUpdateWithoutRecordsInput: ["archivedAt", "metric", "habit"],
  ActionUpsertWithoutMetricRecordsInput: ["update", "create"],
  ActionUpdateWithoutMetricRecordsInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
  ],
  UserCreateWithoutTasksInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutTasksInput: ["where", "create"],
  TaskCreateWithoutSubtasksInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "calendarEvents",
  ],
  TaskCreateOrConnectWithoutSubtasksInput: ["where", "create"],
  HabitCreateWithoutTasksInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutTasksInput: ["where", "create"],
  TaskCreateWithoutParentInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  TaskCreateOrConnectWithoutParentInput: ["where", "create"],
  TaskCreateManyParentInputEnvelope: ["data", "skipDuplicates"],
  CalendarEventCreateWithoutTaskInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "habit",
  ],
  CalendarEventCreateOrConnectWithoutTaskInput: ["where", "create"],
  CalendarEventCreateManyTaskInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutTasksInput: ["update", "create"],
  UserUpdateWithoutTasksInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  TaskUpsertWithoutSubtasksInput: ["update", "create"],
  TaskUpdateWithoutSubtasksInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "habit",
    "calendarEvents",
  ],
  HabitUpsertWithoutTasksInput: ["update", "create"],
  HabitUpdateWithoutTasksInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  TaskUpsertWithWhereUniqueWithoutParentInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutParentInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutParentInput: ["where", "data"],
  CalendarEventUpsertWithWhereUniqueWithoutTaskInput: ["where", "update", "create"],
  CalendarEventUpdateWithWhereUniqueWithoutTaskInput: ["where", "data"],
  CalendarEventUpdateManyWithWhereWithoutTaskInput: ["where", "data"],
  HabitCreateWithoutActionsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
  ],
  HabitCreateOrConnectWithoutActionsInput: ["where", "create"],
  MetricRecordCreateWithoutActionInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricUsage",
  ],
  MetricRecordCreateOrConnectWithoutActionInput: ["where", "create"],
  MetricRecordCreateManyActionInputEnvelope: ["data", "skipDuplicates"],
  HabitUpsertWithoutActionsInput: ["update", "create"],
  HabitUpdateWithoutActionsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
  ],
  MetricRecordUpsertWithWhereUniqueWithoutActionInput: ["where", "update", "create"],
  MetricRecordUpdateWithWhereUniqueWithoutActionInput: ["where", "data"],
  MetricRecordUpdateManyWithWhereWithoutActionInput: ["where", "data"],
  HabitCreateWithoutSchedulesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutSchedulesInput: ["where", "create"],
  CalendarEventCreateWithoutScheduleInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "habit",
    "task",
  ],
  CalendarEventCreateOrConnectWithoutScheduleInput: ["where", "create"],
  CalendarEventCreateManyScheduleInputEnvelope: ["data", "skipDuplicates"],
  ActionScheduleTemplateCreateWithoutActionSchedulesInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "scheduleTemplate",
  ],
  ActionScheduleTemplateCreateOrConnectWithoutActionSchedulesInput: ["where", "create"],
  HabitUpsertWithoutSchedulesInput: ["update", "create"],
  HabitUpdateWithoutSchedulesInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  CalendarEventUpsertWithWhereUniqueWithoutScheduleInput: ["where", "update", "create"],
  CalendarEventUpdateWithWhereUniqueWithoutScheduleInput: ["where", "data"],
  CalendarEventUpdateManyWithWhereWithoutScheduleInput: ["where", "data"],
  ActionScheduleTemplateUpsertWithoutActionSchedulesInput: ["update", "create"],
  ActionScheduleTemplateUpdateWithoutActionSchedulesInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "scheduleTemplate",
  ],
  ActCreateWithoutScheduleTemplatesInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "categorizations",
  ],
  ActCreateOrConnectWithoutScheduleTemplatesInput: ["where", "create"],
  ScheduleTemplateCreateWithoutActionScheduleTemplatesInput: ["frequency", "multiplier", "chron"],
  ScheduleTemplateCreateOrConnectWithoutActionScheduleTemplatesInput: ["where", "create"],
  ActionScheduleCreateWithoutTemplateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "calendarEvents",
  ],
  ActionScheduleCreateOrConnectWithoutTemplateInput: ["where", "create"],
  ActionScheduleCreateManyTemplateInputEnvelope: ["data", "skipDuplicates"],
  ActUpsertWithoutScheduleTemplatesInput: ["update", "create"],
  ActUpdateWithoutScheduleTemplatesInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "categorizations",
  ],
  ScheduleTemplateUpsertWithoutActionScheduleTemplatesInput: ["update", "create"],
  ScheduleTemplateUpdateWithoutActionScheduleTemplatesInput: ["frequency", "multiplier", "chron"],
  ActionScheduleUpsertWithWhereUniqueWithoutTemplateInput: ["where", "update", "create"],
  ActionScheduleUpdateWithWhereUniqueWithoutTemplateInput: ["where", "data"],
  ActionScheduleUpdateManyWithWhereWithoutTemplateInput: ["where", "data"],
  UserCreateWithoutIdentitiesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutIdentitiesInput: ["where", "create"],
  IdentityCreateInput: ["name", "slug", "description", "actionRelations"],
  IdentityCreateOrConnectWithoutIdentitiesInput: ["where", "create"],
  UserUpsertWithoutIdentitiesInput: ["update", "create"],
  UserUpdateWithoutIdentitiesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  IdentityUpsertWithoutIdentitiesInput: ["update", "create"],
  IdentityUpdateWithoutIdentitiesInput: ["name", "slug", "description", "actionRelations"],
  IdentityCreateOrConnectInput: ["where", "create"],
  IdentityCreateManyIdentityInputEnvelope: ["data", "skipDuplicates"],
  IdentityActRelationCreateOrConnectWithoutIdentityInput: ["where", "create"],
  IdentityActRelationCreateManyIdentityInputEnvelope: ["data", "skipDuplicates"],
  IdentityUpsertWithWhereUniqueInput: ["where", "update", "create"],
  IdentityUpdateWithWhereUniqueInput: ["where", "data"],
  IdentityUpdateManyWithWhereInput: ["where", "data"],
  IdentityActRelationUpsertWithWhereUniqueWithoutIdentityInput: ["where", "update", "create"],
  IdentityActRelationUpdateWithWhereUniqueWithoutIdentityInput: ["where", "data"],
  IdentityActRelationUpdateManyWithWhereWithoutIdentityInput: ["where", "data"],
  HabitCreateWithoutGoalsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "routines",
    "actions",
  ],
  HabitCreateOrConnectWithoutGoalsInput: ["where", "create"],
  GoalCreateWithoutMilestonesInput: ["quantity", "habit", "goal"],
  GoalCreateOrConnectWithoutMilestonesInput: ["where", "create"],
  GoalCreateWithoutGoalInput: ["quantity", "habit", "milestones"],
  GoalCreateOrConnectWithoutGoalInput: ["where", "create"],
  GoalCreateManyGoalInputEnvelope: ["data", "skipDuplicates"],
  HabitUpsertWithoutGoalsInput: ["update", "create"],
  HabitUpdateWithoutGoalsInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "routines",
    "actions",
  ],
  GoalUpsertWithoutMilestonesInput: ["update", "create"],
  GoalUpdateWithoutMilestonesInput: ["quantity", "habit", "goal"],
  GoalUpsertWithWhereUniqueWithoutGoalInput: ["where", "update", "create"],
  GoalUpdateWithWhereUniqueWithoutGoalInput: ["where", "data"],
  GoalUpdateManyWithWhereWithoutGoalInput: ["where", "data"],
  IdentityCreateWithoutActionRelationsInput: ["name", "slug", "description", "identities"],
  IdentityCreateOrConnectWithoutActionRelationsInput: ["where", "create"],
  ActCreateWithoutIdentityRelationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "scheduleTemplates",
    "categorizations",
  ],
  ActCreateOrConnectWithoutIdentityRelationsInput: ["where", "create"],
  IdentityUpsertWithoutActionRelationsInput: ["update", "create"],
  IdentityUpdateWithoutActionRelationsInput: ["name", "slug", "description", "identities"],
  ActUpsertWithoutIdentityRelationsInput: ["update", "create"],
  ActUpdateWithoutIdentityRelationsInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "variants",
    "habits",
    "metricApplications",
    "scheduleTemplates",
    "categorizations",
  ],
  BeliefCreateManyBeliefInputEnvelope: ["data", "skipDuplicates"],
  BeliefUpsertWithWhereUniqueInput: ["where", "update", "create"],
  BeliefUpdateWithWhereUniqueInput: ["where", "data"],
  BeliefUpdateManyWithWhereInput: ["where", "data"],
  UserCreateWithoutBeliefsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutBeliefsInput: ["where", "create"],
  UserUpsertWithoutBeliefsInput: ["update", "create"],
  UserUpdateWithoutBeliefsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  BeliefUpdateInput: ["name", "slug", "description", "createdAt", "updatedAt", "archivedAt"],
  ValueCreateOrConnectInput: ["where", "create"],
  ValueCreateManyValueInputEnvelope: ["data", "skipDuplicates"],
  ValueUpsertWithWhereUniqueInput: ["where", "update", "create"],
  ValueUpdateWithWhereUniqueInput: ["where", "data"],
  ValueUpdateManyWithWhereInput: ["where", "data"],
  UserCreateWithoutValuesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutValuesInput: ["where", "create"],
  UserUpsertWithoutValuesInput: ["update", "create"],
  UserUpdateWithoutValuesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  ValueUpdateWithoutUserInput: [
    "name",
    "slug",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  UserCreateWithoutMantrasInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutMantrasInput: ["where", "create"],
  MantraCreateOrConnectInput: ["where", "create"],
  UserUpsertWithoutMantrasInput: ["update", "create"],
  UserUpdateWithoutMantrasInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  MantraUpsertWithoutMantrasInput: ["update", "create"],
  MantraUpdateWithoutMantrasInput: ["content", "createdAt", "updatedAt", "archivedAt"],
  UserCreateWithoutNotebookPermissionsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutNotebookPermissionsInput: ["where", "create"],
  NotebookCreateWithoutUserPermissionsInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "notes",
  ],
  NotebookCreateOrConnectWithoutUserPermissionsInput: ["where", "create"],
  UserUpsertWithoutNotebookPermissionsInput: ["update", "create"],
  UserUpdateWithoutNotebookPermissionsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  NotebookUpsertWithoutUserPermissionsInput: ["update", "create"],
  NotebookUpdateWithoutUserPermissionsInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "notes",
  ],
  UserCreateWithoutNotebooksInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutNotebooksInput: ["where", "create"],
  NoteCreateWithoutNotebookInput: [
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NoteCreateOrConnectWithoutNotebookInput: ["where", "create"],
  NoteCreateManyNotebookInputEnvelope: ["data", "skipDuplicates"],
  NotebookUserPermissionCreateWithoutNotebookInput: ["archivedAt", "user"],
  NotebookUserPermissionCreateOrConnectWithoutNotebookInput: ["where", "create"],
  NotebookUserPermissionCreateManyNotebookInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutNotebooksInput: ["update", "create"],
  UserUpdateWithoutNotebooksInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  NoteUpsertWithWhereUniqueWithoutNotebookInput: ["where", "update", "create"],
  NoteUpdateWithWhereUniqueWithoutNotebookInput: ["where", "data"],
  NoteUpdateManyWithWhereWithoutNotebookInput: ["where", "data"],
  NoteScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "notebookId",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionUpsertWithWhereUniqueWithoutNotebookInput: ["where", "update", "create"],
  NotebookUserPermissionUpdateWithWhereUniqueWithoutNotebookInput: ["where", "data"],
  NotebookUserPermissionUpdateManyWithWhereWithoutNotebookInput: ["where", "data"],
  NotebookCreateWithoutNotesInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "userPermissions",
  ],
  NotebookCreateOrConnectWithoutNotesInput: ["where", "create"],
  NotebookUpsertWithoutNotesInput: ["update", "create"],
  NotebookUpdateWithoutNotesInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
    "userPermissions",
  ],
  UserCreateWithoutListsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutListsInput: ["where", "create"],
  ItemCreateWithoutListInput: ["data", "createdAt", "updatedAt", "archivedAt"],
  ItemCreateOrConnectWithoutListInput: ["where", "create"],
  ItemCreateManyListInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutListsInput: ["update", "create"],
  UserUpdateWithoutListsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "readings",
    "bookshelves",
    "bookReviews",
  ],
  ItemUpsertWithWhereUniqueWithoutListInput: ["where", "update", "create"],
  ItemUpdateWithWhereUniqueWithoutListInput: ["where", "data"],
  ItemUpdateManyWithWhereWithoutListInput: ["where", "data"],
  ItemScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "listId",
    "data",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ListCreateWithoutItemsInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
  ],
  ListCreateOrConnectWithoutItemsInput: ["where", "create"],
  ListUpsertWithoutItemsInput: ["update", "create"],
  ListUpdateWithoutItemsInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
  ],
  AuthorshipCreateWithoutAuthorInput: ["position", "createdAt", "updatedAt", "archivedAt", "book"],
  AuthorshipCreateOrConnectWithoutAuthorInput: ["where", "create"],
  AuthorshipCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
  AuthorshipUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
  AuthorshipUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
  AuthorshipUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
  AuthorshipScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "authorId",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorCreateWithoutAuthorshipsInput: ["name", "slug", "createdAt", "updatedAt", "archivedAt"],
  AuthorCreateOrConnectWithoutAuthorshipsInput: ["where", "create"],
  BookCreateWithoutAuthorshipsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "readings",
    "shelvings",
    "BookReview",
  ],
  BookCreateOrConnectWithoutAuthorshipsInput: ["where", "create"],
  AuthorUpsertWithoutAuthorshipsInput: ["update", "create"],
  AuthorUpdateWithoutAuthorshipsInput: ["name", "slug", "createdAt", "updatedAt", "archivedAt"],
  BookUpsertWithoutAuthorshipsInput: ["update", "create"],
  BookUpdateWithoutAuthorshipsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "readings",
    "shelvings",
    "BookReview",
  ],
  AuthorshipCreateWithoutBookInput: ["position", "createdAt", "updatedAt", "archivedAt", "author"],
  AuthorshipCreateOrConnectWithoutBookInput: ["where", "create"],
  AuthorshipCreateManyBookInputEnvelope: ["data", "skipDuplicates"],
  ReadingCreateWithoutBookInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "review",
  ],
  ReadingCreateOrConnectWithoutBookInput: ["where", "create"],
  ReadingCreateManyBookInputEnvelope: ["data", "skipDuplicates"],
  ShelvingCreateWithoutBookInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "shelf",
  ],
  ShelvingCreateOrConnectWithoutBookInput: ["where", "create"],
  ShelvingCreateManyBookInputEnvelope: ["data", "skipDuplicates"],
  BookReviewCreateWithoutBookInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "reading",
  ],
  BookReviewCreateOrConnectWithoutBookInput: ["where", "create"],
  BookReviewCreateManyBookInputEnvelope: ["data", "skipDuplicates"],
  AuthorshipUpsertWithWhereUniqueWithoutBookInput: ["where", "update", "create"],
  AuthorshipUpdateWithWhereUniqueWithoutBookInput: ["where", "data"],
  AuthorshipUpdateManyWithWhereWithoutBookInput: ["where", "data"],
  ReadingUpsertWithWhereUniqueWithoutBookInput: ["where", "update", "create"],
  ReadingUpdateWithWhereUniqueWithoutBookInput: ["where", "data"],
  ReadingUpdateManyWithWhereWithoutBookInput: ["where", "data"],
  ShelvingUpsertWithWhereUniqueWithoutBookInput: ["where", "update", "create"],
  ShelvingUpdateWithWhereUniqueWithoutBookInput: ["where", "data"],
  ShelvingUpdateManyWithWhereWithoutBookInput: ["where", "data"],
  ShelvingScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "bookId",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewUpsertWithWhereUniqueWithoutBookInput: ["where", "update", "create"],
  BookReviewUpdateWithWhereUniqueWithoutBookInput: ["where", "data"],
  BookReviewUpdateManyWithWhereWithoutBookInput: ["where", "data"],
  UserCreateWithoutReadingsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "bookshelves",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutReadingsInput: ["where", "create"],
  BookCreateWithoutReadingsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "shelvings",
    "BookReview",
  ],
  BookCreateOrConnectWithoutReadingsInput: ["where", "create"],
  BookReviewCreateWithoutReadingInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "user",
  ],
  BookReviewCreateOrConnectWithoutReadingInput: ["where", "create"],
  UserUpsertWithoutReadingsInput: ["update", "create"],
  UserUpdateWithoutReadingsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "bookshelves",
    "bookReviews",
  ],
  BookUpsertWithoutReadingsInput: ["update", "create"],
  BookUpdateWithoutReadingsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "shelvings",
    "BookReview",
  ],
  BookReviewUpsertWithoutReadingInput: ["update", "create"],
  BookReviewUpdateWithoutReadingInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "user",
  ],
  UserCreateWithoutBookshelvesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookReviews",
  ],
  UserCreateOrConnectWithoutBookshelvesInput: ["where", "create"],
  ShelvingCreateWithoutShelfInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
  ],
  ShelvingCreateOrConnectWithoutShelfInput: ["where", "create"],
  ShelvingCreateManyShelfInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutBookshelvesInput: ["update", "create"],
  UserUpdateWithoutBookshelvesInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookReviews",
  ],
  ShelvingUpsertWithWhereUniqueWithoutShelfInput: ["where", "update", "create"],
  ShelvingUpdateWithWhereUniqueWithoutShelfInput: ["where", "data"],
  ShelvingUpdateManyWithWhereWithoutShelfInput: ["where", "data"],
  BookCreateWithoutShelvingsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "BookReview",
  ],
  BookCreateOrConnectWithoutShelvingsInput: ["where", "create"],
  BookshelfCreateWithoutShelvingsInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
  ],
  BookshelfCreateOrConnectWithoutShelvingsInput: ["where", "create"],
  BookUpsertWithoutShelvingsInput: ["update", "create"],
  BookUpdateWithoutShelvingsInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "BookReview",
  ],
  BookshelfUpsertWithoutShelvingsInput: ["update", "create"],
  BookshelfUpdateWithoutShelvingsInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "owner",
  ],
  BookCreateWithoutBookReviewInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "shelvings",
  ],
  BookCreateOrConnectWithoutBookReviewInput: ["where", "create"],
  UserCreateWithoutBookReviewsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
  ],
  UserCreateOrConnectWithoutBookReviewsInput: ["where", "create"],
  ReadingCreateWithoutReviewInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "book",
  ],
  ReadingCreateOrConnectWithoutReviewInput: ["where", "create"],
  BookUpsertWithoutBookReviewInput: ["update", "create"],
  BookUpdateWithoutBookReviewInput: [
    "ids",
    "isbn",
    "isbn13",
    "title",
    "slug",
    "description",
    "publicationYear",
    "originalPublicationYear",
    "extra",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "authorNames",
    "authorNamesLf",
    "authorships",
    "readings",
    "shelvings",
  ],
  UserUpsertWithoutBookReviewsInput: ["update", "create"],
  UserUpdateWithoutBookReviewsInput: [
    "name",
    "email",
    "emailVerified",
    "image",
    "isAdmin",
    "settings",
    "lastLogin",
    "accounts",
    "calendars",
    "identities",
    "values",
    "beliefs",
    "mantras",
    "habits",
    "tasks",
    "dashboards",
    "notebooks",
    "notebookPermissions",
    "lists",
    "readings",
    "bookshelves",
  ],
  ReadingUpsertWithoutReviewInput: ["update", "create"],
  ReadingUpdateWithoutReviewInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "book",
  ],
  CalendarCreateManyAccountInput: [
    "id",
    "uid",
    "userId",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarUpdateWithoutAccountInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "events",
  ],
  AccountCreateManyUserInput: [
    "id",
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
  ],
  CalendarCreateManyUserInput: [
    "id",
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "accountId",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  IdentityCreateManyUserInput: ["id", "identityId", "archivedAt"],
  ValueCreateManyUserInput: ["id", "valueId", "createdAt", "updatedAt", "archivedAt"],
  BeliefCreateManyUserInput: ["id", "beliefId", "createdAt", "updatedAt", "archivedAt"],
  HabitCreateManyUserInput: [
    "id",
    "actId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskCreateManyUserInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "parentId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  DashboardCreateManyUserInput: [
    "id",
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookCreateManyOwnerInput: [
    "id",
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionCreateManyUserInput: ["id", "notebookId", "archivedAt"],
  ListCreateManyOwnerInput: [
    "id",
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingCreateManyUserInput: [
    "id",
    "bookId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookshelfCreateManyOwnerInput: [
    "id",
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewCreateManyUserInput: [
    "id",
    "review",
    "rating",
    "bookId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AccountUpdateWithoutUserInput: [
    "provider",
    "remoteId",
    "accessToken",
    "refreshToken",
    "accessTokenExpiry",
    "syncToken",
    "createdAt",
    "scopes",
    "calendars",
  ],
  CalendarUpdateWithoutUserInput: [
    "uid",
    "name",
    "color",
    "provider",
    "remoteId",
    "syncToken",
    "primary",
    "public",
    "enabled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "account",
    "events",
  ],
  IdentityUpdateWithoutUserInput: ["archivedAt", "identity"],
  BeliefUpdateWithoutUserInput: ["createdAt", "updatedAt", "archivedAt", "belief"],
  HabitUpdateWithoutUserInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "act",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  TaskUpdateWithoutUserInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "parent",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  DashboardUpdateWithoutUserInput: [
    "name",
    "layouts",
    "isDefault",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUpdateWithoutOwnerInput: [
    "title",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "notes",
    "userPermissions",
  ],
  NotebookUserPermissionUpdateWithoutUserInput: ["archivedAt", "notebook"],
  ListUpdateWithoutOwnerInput: [
    "name",
    "slug",
    "description",
    "fields",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "items",
  ],
  ReadingUpdateWithoutUserInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "review",
  ],
  BookshelfUpdateWithoutOwnerInput: [
    "name",
    "slug",
    "isPublic",
    "description",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "shelvings",
  ],
  BookReviewUpdateWithoutUserInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
    "reading",
  ],
  CalendarEventCreateManyCalendarInput: [
    "id",
    "uid",
    "remoteId",
    "scheduleId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventUpdateWithoutCalendarInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "schedule",
    "habit",
    "task",
  ],
  ActionScheduleTemplateCreateManyScheduleTemplateInput: [
    "id",
    "actId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  ActionScheduleTemplateUpdateWithoutScheduleTemplateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "act",
    "actionSchedules",
  ],
  CategorizationCreateManyCategoryInput: ["id", "actId", "createdAt", "updatedAt", "archivedAt"],
  CategorizationUpdateWithoutCategoryInput: ["createdAt", "updatedAt", "archivedAt", "act"],
  ActCreateManyParentInput: [
    "id",
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  HabitCreateManyActInput: [
    "id",
    "userId",
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricApplicationCreateManyActInput: ["id", "metricId", "createdAt", "updatedAt", "archivedAt"],
  IdentityActRelationCreateManyActionInput: ["id", "identityId", "archivedAt"],
  ActionScheduleTemplateCreateManyActInput: [
    "id",
    "scheduleTemplateId",
    "frequency",
    "multiplier",
    "quantity",
  ],
  CategorizationCreateManyActInput: ["id", "categoryId", "createdAt", "updatedAt", "archivedAt"],
  ActUpdateWithoutParentInput: [
    "name",
    "slug",
    "description",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "variants",
    "habits",
    "metricApplications",
    "identityRelations",
    "scheduleTemplates",
    "categorizations",
  ],
  HabitUpdateWithoutActInput: [
    "name",
    "isPublic",
    "defaultDurationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "schedules",
    "tasks",
    "calendarEvents",
    "metricUsages",
    "goals",
    "routines",
    "actions",
  ],
  MetricApplicationUpdateWithoutActInput: ["createdAt", "updatedAt", "archivedAt", "metric"],
  IdentityActRelationUpdateWithoutActionInput: ["archivedAt", "identity"],
  ActionScheduleTemplateUpdateWithoutActInput: [
    "frequency",
    "multiplier",
    "quantity",
    "scheduleTemplate",
    "actionSchedules",
  ],
  CategorizationUpdateWithoutActInput: ["createdAt", "updatedAt", "archivedAt", "category"],
  MetricRecordCreateManyMetricUsageInput: [
    "id",
    "actionId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordUpdateWithoutMetricUsageInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "action",
  ],
  MetricApplicationCreateManyMetricInput: ["id", "actId", "createdAt", "updatedAt", "archivedAt"],
  MetricUsageCreateManyMetricInput: ["id", "habitId", "archivedAt"],
  MetricApplicationUpdateWithoutMetricInput: ["createdAt", "updatedAt", "archivedAt", "act"],
  MetricUsageUpdateWithoutMetricInput: ["archivedAt", "habit", "records"],
  ActionScheduleCreateManyHabitInput: [
    "id",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "templateId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskCreateManyHabitInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "parentId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventCreateManyHabitInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricUsageCreateManyHabitInput: ["id", "metricId", "archivedAt"],
  GoalCreateManyHabitInput: ["id", "goalId", "quantity"],
  RoutineHabitCreateManyHabitInput: [
    "id",
    "routineId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionCreateManyHabitInput: [
    "id",
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleUpdateWithoutHabitInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendarEvents",
    "template",
  ],
  TaskUpdateWithoutHabitInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "parent",
    "subtasks",
    "calendarEvents",
  ],
  CalendarEventUpdateWithoutHabitInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "task",
  ],
  MetricUsageUpdateWithoutHabitInput: ["archivedAt", "metric", "records"],
  GoalUpdateWithoutHabitInput: ["quantity", "goal", "milestones"],
  RoutineHabitUpdateWithoutHabitInput: [
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "routine",
  ],
  ActionUpdateWithoutHabitInput: [
    "start",
    "end",
    "notes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricRecords",
  ],
  RoutineHabitCreateManyRoutineInput: [
    "id",
    "habitId",
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  RoutineHabitUpdateWithoutRoutineInput: [
    "position",
    "durationInMinutes",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
  ],
  TaskCreateManyParentInput: [
    "id",
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "userId",
    "habitId",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventCreateManyTaskInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "scheduleId",
    "habitId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  TaskUpdateWithoutParentInput: [
    "title",
    "description",
    "plannedStartDate",
    "dueDate",
    "rank",
    "completedAt",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "habit",
    "subtasks",
    "calendarEvents",
  ],
  CalendarEventUpdateWithoutTaskInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "schedule",
    "habit",
  ],
  MetricRecordCreateManyActionInput: [
    "id",
    "metricUsageId",
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  MetricRecordUpdateWithoutActionInput: [
    "value",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "metricUsage",
  ],
  CalendarEventCreateManyScheduleInput: [
    "id",
    "uid",
    "remoteId",
    "calendarId",
    "habitId",
    "taskId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  CalendarEventUpdateWithoutScheduleInput: [
    "uid",
    "remoteId",
    "title",
    "start",
    "end",
    "allDay",
    "notes",
    "canceled",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "calendar",
    "habit",
    "task",
  ],
  ActionScheduleCreateManyTemplateInput: [
    "id",
    "habitId",
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ActionScheduleUpdateWithoutTemplateInput: [
    "frequency",
    "multiplier",
    "quantity",
    "active",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "habit",
    "calendarEvents",
  ],
  IdentityCreateManyIdentityInput: ["id", "userId", "archivedAt"],
  IdentityActRelationCreateManyIdentityInput: ["id", "actionId", "archivedAt"],
  GoalCreateManyGoalInput: ["id", "habitId", "quantity"],
  GoalUpdateWithoutGoalInput: ["quantity", "habit", "milestones"],
  BeliefCreateManyBeliefInput: ["id", "userId", "createdAt", "updatedAt", "archivedAt"],
  ValueCreateManyValueInput: ["id", "userId", "createdAt", "updatedAt", "archivedAt"],
  NoteCreateManyNotebookInput: [
    "id",
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionCreateManyNotebookInput: ["id", "userId", "archivedAt"],
  NoteUpdateWithoutNotebookInput: [
    "title",
    "body",
    "isPublic",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  NotebookUserPermissionUpdateWithoutNotebookInput: ["archivedAt", "user"],
  ItemCreateManyListInput: ["id", "data", "createdAt", "updatedAt", "archivedAt"],
  ItemUpdateWithoutListInput: ["data", "createdAt", "updatedAt", "archivedAt"],
  AuthorshipCreateManyAuthorInput: [
    "id",
    "bookId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipUpdateWithoutAuthorInput: ["position", "createdAt", "updatedAt", "archivedAt", "book"],
  AuthorshipCreateManyBookInput: [
    "id",
    "authorId",
    "position",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ReadingCreateManyBookInput: [
    "id",
    "userId",
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingCreateManyBookInput: [
    "id",
    "shelfId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  BookReviewCreateManyBookInput: [
    "id",
    "review",
    "rating",
    "userId",
    "readingId",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  AuthorshipUpdateWithoutBookInput: ["position", "createdAt", "updatedAt", "archivedAt", "author"],
  ReadingUpdateWithoutBookInput: [
    "dateStarted",
    "dateFinished",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "review",
  ],
  ShelvingUpdateWithoutBookInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "shelf",
  ],
  BookReviewUpdateWithoutBookInput: [
    "review",
    "rating",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "user",
    "reading",
  ],
  ShelvingCreateManyShelfInput: [
    "id",
    "bookId",
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
  ],
  ShelvingUpdateWithoutShelfInput: [
    "position",
    "rationale",
    "createdAt",
    "updatedAt",
    "archivedAt",
    "book",
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(inputTypesEnhanceMap: InputTypesEnhanceMap) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo]
    );
  }
}
